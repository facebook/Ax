name: Build and Test Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests-and-coverage:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.10"]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      env:
        ALLOW_BOTORCH_LATEST: true
        ALLOW_LATEST_GPYTORCH_LINOP: true
      run: |
        # use latest Botorch
        pip install git+https://github.com/cornellius-gp/gpytorch.git
        pip install git+https://github.com/pytorch/botorch.git
        pip install -e ".[unittest]"
    - name: Tests and coverage
      run: |
        pytest -ra --cov=ax
    - name: Upload coverage
      run: |
        bash <(curl -s https://codecov.io/bash)

  lint:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - name: Install dependencies
      # Pin ufmt deps so they match intermal pyfmt.
      run: |
        pip install black==22.3.0
        pip install usort==1.0.2
        pip install libcst==0.3.19
        pip install ufmt
        pip install flake8
    - name: ufmt
      run: |
        ufmt diff .
    - name: Flake8
      # run even if previous step (ufmt) failed
      if: ${{ always() }}
      run: |
        flake8

  docs:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.8"
    - name: Install dependencies
      env:
        ALLOW_BOTORCH_LATEST: true
        ALLOW_LATEST_GPYTORCH_LINOP: true
      run: |
        # use latest Botorch
        pip install git+https://github.com/cornellius-gp/gpytorch.git
        pip install git+https://github.com/pytorch/botorch.git
        pip install -e ".[unittest]"
    - name: Validate Sphinx
      run: |
        python scripts/validate_sphinx.py -p "${pwd}"
    - name: Run Sphinx
      # run even if previous step (validate Sphinx) failed
      if: ${{ always() }}
      run: |
        # warnings no longer treated as errors.
        sphinx-build -T --keep-going sphinx/source sphinx/build
