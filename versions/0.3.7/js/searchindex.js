Search.setIndex({"docnames": ["ax", "benchmark", "core", "early_stopping", "exceptions", "global_stopping", "index", "metrics", "modelbridge", "models", "plot", "runners", "service", "storage", "telemetry", "utils"], "filenames": ["ax.rst", "benchmark.rst", "core.rst", "early_stopping.rst", "exceptions.rst", "global_stopping.rst", "index.rst", "metrics.rst", "modelbridge.rst", "models.rst", "plot.rst", "runners.rst", "service.rst", "storage.rst", "telemetry.rst", "utils.rst"], "titles": ["ax", "ax.benchmark", "ax.core", "ax.early_stopping", "ax.exceptions", "ax.global_stopping", "API Reference", "ax.metrics", "ax.modelbridge", "ax.models", "ax.plot", "ax.runners", "ax.service", "ax.storage", "ax.telemetry", "ax.utils"], "terms": {"class": [0, 1, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], "arm": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "paramet": [0, 1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "dict": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15], "str": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "union": [0, 2, 7, 8, 9, 10, 11, 12, 13, 15], "none": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15], "bool": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "float": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "int": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "name": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 15], "option": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15], "sourc": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "base": [0, 1, 2, 4, 6, 7, 11, 12, 13, 14], "defin": [0, 1, 2, 4, 7, 8, 9, 12, 13, 15], "random": [0, 2, 6, 7, 10, 15], "experi": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15], "assign": [0, 2, 8], "unit": [0, 2, 8, 13, 15], "given": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "thu": [0, 2, 8, 9, 15], "encapsul": [0, 2], "parametr": [0, 2, 9], "need": [0, 1, 2, 4, 8, 9, 10, 11, 12, 13, 15], "clone": [0, 2, 7], "clear_nam": [0, 2], "fals": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13, 15], "creat": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15], "copi": [0, 1, 2, 7, 8, 9, 12, 13, 15], "thi": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "whether": [0, 1, 2, 3, 5, 7, 8, 9, 10, 12, 13, 15], "should": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "set": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15], "its": [0, 1, 2, 3, 7, 8, 9, 10, 12, 13, 15], "instead": [0, 1, 2, 8, 9, 10, 12, 15], "being": [0, 2, 7, 8, 9, 10, 14, 15], "default": [0, 1, 2, 3, 8, 9, 10, 12, 13, 15], "properti": [0, 1, 2, 4, 7, 8, 9, 11, 12, 13, 15], "has_nam": [0, 2], "return": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "true": [0, 1, 2, 3, 5, 7, 8, 9, 10, 12, 13, 15], "": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 15], "i": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "static": [0, 2, 12, 15], "md5hash": [0, 2], "uniqu": [0, 2, 8, 15], "identifi": [0, 2, 7, 8, 9, 12, 13, 15], "parameter": [0, 2, 7, 8, 9, 10, 12], "map": [0, 1, 2, 3, 6, 9, 10, 11, 12, 13], "param": [0, 2, 7, 8, 9, 10, 11, 15], "valu": [0, 1, 2, 3, 5, 7, 8, 9, 10, 12, 13, 15], "hash": [0, 2, 13], "get": [0, 2, 4, 7, 8, 9, 10, 12, 13, 15], "throw": [0, 2, 10, 13, 15], "name_or_short_signatur": [0, 2], "exist": [0, 2, 8, 9, 10, 13, 15], "els": [0, 2, 8, 9, 13, 15], "last": [0, 2, 8, 12, 15], "8": [0, 2, 15], "charact": [0, 2], "us": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "present": [0, 1, 2, 3, 8, 9, 10, 13], "candid": [0, 2, 3, 8, 9, 15], "e": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "g": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "plot": [0, 2, 4, 6, 8, 12], "tabl": [0, 2, 13, 15], "where": [0, 1, 2, 3, 8, 9, 10, 12, 13, 14, 15], "do": [0, 2, 3, 5, 8, 9, 10, 12, 13, 15], "yet": [0, 2, 8, 9], "have": [0, 1, 2, 3, 8, 9, 10, 11, 12, 14, 15], "sinc": [0, 1, 2, 3, 8, 9, 11, 12, 13, 15], "ar": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "automat": [0, 2, 3, 8, 9, 10, 11, 13], "upon": [0, 2, 4, 7], "addit": [0, 2, 4, 5, 7, 8, 9, 10, 12, 13, 15], "trial": [0, 1, 3, 4, 5, 7, 8, 10, 11, 12, 13, 15], "from": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "signatur": [0, 2, 8, 9, 11, 15], "represent": [0, 2, 8, 9, 12, 13, 15], "batchtrial": [0, 10, 11, 12, 13, 15], "core": [0, 6, 7, 8, 9, 10, 11, 13], "generator_run": [0, 2, 8, 10, 13, 15], "generatorrun": [0, 8, 10, 13, 15], "list": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 15], "trial_typ": [0, 2, 12, 13, 15], "optimize_for_pow": [0, 2, 13], "ttl_second": [0, 2, 13, 15], "index": [0, 1, 2, 3, 6, 7, 8, 9, 10, 11, 12, 13, 15], "lifecycle_stag": [0, 2, 13], "lifecyclestag": [0, 2, 13], "batch": [0, 2, 8, 9, 10, 12, 13, 15], "ha": [0, 1, 2, 3, 4, 8, 9, 10, 12, 13, 14, 15], "multipl": [0, 1, 2, 7, 8, 9, 10, 12, 13, 15], "attach": [0, 2, 7, 10, 12, 13], "meant": [0, 2, 8, 9, 13, 15], "deploi": [0, 1, 2, 11, 12, 15], "evalu": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 15], "togeth": [0, 2, 3, 8, 9, 10, 12, 15], "possibli": [0, 2, 9], "weight": [0, 2, 7, 8, 9, 10, 12, 13, 15], "which": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "measur": [0, 2, 3, 6, 8, 9], "how": [0, 2, 4, 8, 9, 10, 12, 15], "much": [0, 2], "total": [0, 1, 2, 3, 8, 12, 15], "resourc": [0, 2, 3], "alloc": [0, 2], "go": [0, 2, 10], "toward": [0, 2], "specif": [0, 2, 3, 8, 9, 12, 15], "For": [0, 1, 2, 3, 5, 7, 8, 9, 10, 12, 13, 15], "instanc": [0, 1, 2, 3, 8, 9, 12, 13, 15], "field": [0, 2, 3, 8, 9, 10, 13, 15], "could": [0, 2, 7, 8], "describ": [0, 2, 7, 8, 9], "fraction": [0, 2, 3, 5, 12], "popul": [0, 2, 8, 15], "differ": [0, 1, 2, 4, 5, 8, 9, 11, 12, 15], "treatment": [0, 2], "interpret": [0, 2, 12, 13], "runner": [0, 1, 6, 12, 13, 15], "note": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "A": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "just": [0, 1, 2, 8, 9, 10, 11, 12, 13, 15], "mani": [0, 2, 7, 8, 12, 14, 15], "import": [0, 2, 8, 9, 12, 13, 15], "simultan": [0, 2, 8, 9], "an": [0, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "b": [0, 2, 3, 5, 7, 8, 9, 12, 15], "test": [0, 1, 2, 6, 8, 9, 10, 12, 13], "result": [0, 2, 3, 5, 7, 8, 9, 10, 11, 12], "subject": [0, 2], "nonstationar": [0, 2, 12], "case": [0, 2, 3, 4, 8, 9, 11, 12, 15], "separ": [0, 1, 2, 8, 9, 10, 13], "independ": [0, 2, 8, 12, 15], "each": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 15], "other": [0, 2, 3, 5, 8, 9, 10, 11, 13, 15], "object": [0, 1, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "singl": [0, 1, 2, 3, 5, 8, 9, 10, 11, 12, 15], "associ": [0, 2, 3, 7, 8, 9, 12, 13, 15], "can": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15], "also": [0, 1, 2, 8, 9, 10, 12, 13, 15], "later": [0, 2, 8, 9, 15], "through": [0, 2, 8, 9, 10, 13, 15], "add_arm": [0, 2], "add_generator_run": [0, 2], "gener": [0, 2, 6, 7, 9, 10, 12, 13, 15], "run": [0, 1, 2, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "immut": [0, 2, 4, 12, 13, 15], "onc": [0, 1, 2, 7, 8, 12, 13, 15], "cannot": [0, 1, 2, 8, 9, 10], "combin": [0, 2, 7, 8, 9, 10, 15], "argument": [0, 1, 2, 8, 9, 10, 11, 12, 13, 15], "type": [0, 1, 3, 4, 6, 7, 8, 10, 11, 12, 13, 14, 15], "multitypeexperi": [0, 8, 13, 15], "optim": [0, 1, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15], "power": [0, 2, 8], "detect": [0, 2, 15], "effect": [0, 2, 7, 8, 13, 15], "certain": [0, 2, 3, 8, 13], "size": [0, 2, 8, 9, 10, 12, 13, 15], "high": [0, 2, 8, 9, 11, 12], "possibl": [0, 2, 3, 8, 9, 12, 13, 15], "refer": [0, 1, 2, 7, 8, 9, 10, 12, 15], "document": [0, 2, 7], "set_status_quo_and_optimize_pow": [0, 2], "more": [0, 2, 3, 4, 8, 9, 12, 13, 15], "detail": [0, 2, 7, 8, 9, 11, 12, 15], "If": [0, 2, 3, 7, 8, 9, 10, 11, 12, 13, 15], "specifi": [0, 1, 2, 3, 7, 8, 9, 10, 12, 13, 15], "consid": [0, 2, 3, 7, 8, 9, 12, 15], "fail": [0, 1, 2, 4, 8, 9, 11, 12, 15], "after": [0, 2, 3, 8, 9, 12, 13, 14, 15], "second": [0, 2, 7, 12, 13, 15], "time": [0, 1, 2, 3, 8, 9, 11, 12, 15], "wa": [0, 2, 8, 9, 11, 12, 13, 15], "ran": [0, 2, 12], "unless": [0, 2, 8, 9, 10], "complet": [0, 1, 2, 3, 4, 5, 7, 8, 11, 12, 14, 15], "befor": [0, 2, 3, 5, 8, 9, 15], "dead": [0, 2], "process": [0, 1, 2, 3, 4, 8, 9, 11, 15], "might": [0, 2, 3], "crash": [0, 2], "etc": [0, 1, 2, 3, 8, 9, 12, 15], "live": [0, 2, 9], "pass": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 15], "accordingli": [0, 2], "determin": [0, 2, 3, 5, 8, 9, 10, 12, 15], "number": [0, 1, 2, 3, 4, 7, 8, 9, 10, 12, 13, 14, 15], "onli": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 14, 15], "purpos": [0, 2, 8, 12, 13], "load": [0, 1, 2, 4, 9, 12, 15], "storag": [0, 1, 2, 6, 8, 9, 11, 12], "The": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "stage": [0, 2, 12, 15], "lifecycl": [0, 2], "repres": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 15], "abandoned_arm_nam": [0, 2], "been": [0, 2, 4, 8, 9], "abandon": [0, 1, 2, 11, 13, 15], "within": [0, 1, 2, 8, 9, 10, 12, 15], "abandoned_arm": [0, 2, 13, 15], "arm_weight": [0, 2], "mutablemap": [0, 2, 8, 9, 15], "These": [0, 1, 2, 8, 9, 10, 11, 13], "construct": [0, 1, 2, 3, 8, 9, 10, 12, 13, 15], "merg": [0, 2, 8, 10], "all": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15], "contain": [0, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "arms_by_nam": [0, 2, 15], "attach_batch_trial_data": [0, 2], "raw_data": [0, 2], "integ": [0, 2, 8, 12, 13, 15], "tupl": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "hashabl": [0, 2, 12], "sample_s": [0, 2, 15], "metadata": [0, 1, 2, 8, 9, 11, 13, 15], "data": [0, 1, 3, 5, 6, 7, 8, 9, 10, 12, 13, 15], "metric": [0, 1, 3, 6, 8, 9, 10, 11, 12, 13], "outcom": [0, 2, 3, 5, 7, 8, 9, 10, 12, 13, 15], "sampl": [0, 2, 3, 4, 8, 9, 10, 11, 15], "track": [0, 1, 2, 3, 7, 9, 12, 13, 15], "about": [0, 2, 5, 9, 10, 11], "importantli": [0, 2], "start_dat": [0, 2], "end_dat": [0, 2], "complete_tri": [0, 2], "mark": [0, 2, 11, 12, 15], "current": [0, 2, 4, 8, 9, 11, 12, 13, 15], "clone_to": [0, 2], "include_sq": [0, 2, 15], "provid": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "belong": [0, 2, 8, 9], "unspecifi": [0, 2, 8, 15], "includ": [0, 1, 2, 3, 4, 8, 9, 10, 11, 13, 14, 15], "statu": [0, 1, 2, 3, 8, 10, 11, 12, 13, 15], "quo": [0, 2, 8, 10, 12, 15], "new": [0, 1, 2, 4, 8, 9, 10, 12, 13, 15], "generator_run_struct": [0, 2, 13], "generatorrunstruct": [0, 2, 13], "struct": [0, 2, 10], "hold": [0, 2, 8, 12], "ad": [0, 1, 2, 7, 8, 10, 12, 13, 15], "is_factori": [0, 2], "factori": [0, 2, 4, 6, 9, 12, 13], "design": [0, 2, 3, 7, 8, 9, 10, 12, 15], "link": [0, 2, 8, 15], "factor": [0, 2, 10, 15], "mark_arm_abandon": [0, 2], "arm_nam": [0, 2, 3, 8, 10], "reason": [0, 1, 2, 3, 4, 5, 11, 12, 15], "usual": [0, 2, 3, 8, 9, 15], "done": [0, 2, 3, 8, 9, 10, 15], "deploy": [0, 1, 2, 11, 12, 15], "when": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "one": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 15], "caus": [0, 2, 15], "issu": [0, 1, 2], "user": [0, 2, 4, 8, 13, 15], "want": [0, 2, 5, 8, 10, 15], "continu": [0, 2, 4, 8, 9], "pend": [0, 2, 8, 9, 12, 15], "point": [0, 1, 2, 3, 4, 6, 8, 9, 10, 13, 15], "avoid": [0, 1, 2, 8, 11, 13, 15], "model": [0, 1, 2, 3, 6, 7, 12, 13], "suggest": [0, 2, 3, 4, 8, 12, 15], "same": [0, 1, 2, 3, 8, 9, 10, 12, 13, 15], "again": [0, 2], "exclud": [0, 2, 15], "train": [0, 1, 2, 3, 7, 8, 9, 15], "fit_abandon": [0, 2, 8], "bridg": [0, 2, 6], "normalized_arm_weight": [0, 2], "1": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "trunc_digit": [0, 2], "normal": [0, 2, 3, 7, 8, 9, 10, 13, 15], "method": [0, 2, 3, 4, 7, 8, 9, 10, 11, 12, 13, 15], "we": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "without": [0, 2, 3, 8, 9, 12, 13], "mutat": [0, 2, 8], "probabl": [0, 2, 8, 9], "digit": [0, 2, 7, 12], "keep": [0, 2, 3], "equal": [0, 1, 2, 8, 9, 13], "re": [0, 2, 8, 9, 12, 13], "wai": [0, 2, 4, 13, 15], "maintain": [0, 2, 4, 9], "rel": [0, 2, 8, 9, 10, 15], "best": [0, 2, 6, 8, 9, 10, 15], "accord": [0, 2, 8, 9, 10, 12, 15], "behavior": [0, 2, 8, 9, 12, 13], "run_metadata": [0, 2, 12, 13], "containin": [0, 2], "It": [0, 2, 4, 7, 8, 9, 10, 11, 12, 15], "deployed_nam": [0, 2], "system": [0, 1, 2, 8, 9, 12, 15], "both": [0, 2, 8, 9, 10, 12, 15], "status_quo": [0, 2, 8, 10, 12, 13, 15], "control": [0, 1, 2, 8, 9, 10, 15], "unset_status_quo": [0, 2], "correspond": [0, 2, 7, 8, 9, 10, 12, 13, 15], "choiceparamet": [0, 2, 8, 10, 13, 15], "parameter_typ": [0, 2], "parametertyp": [0, 2, 8, 13], "is_ord": [0, 2, 12], "is_task": [0, 2, 8, 12], "is_fidel": [0, 2, 8, 12], "target_valu": [0, 2, 8, 12, 13], "sort_valu": [0, 2], "depend": [0, 2, 3, 4, 7, 8, 9, 13, 15], "discret": [0, 1, 2, 6, 7], "enum": [0, 2, 7, 8, 10, 12, 13, 15], "indic": [0, 1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 15], "string": [0, 2, 3, 7, 8, 9, 10, 12, 13, 14, 15], "allow": [0, 1, 2, 7, 8, 9, 11, 12, 13, 15], "categor": [0, 2, 7, 8], "variabl": [0, 2, 8, 13, 15], "longer": [0, 2, 8], "than": [0, 1, 2, 3, 8, 9, 12, 13, 15], "2": [0, 2, 3, 7, 8, 9, 10, 11, 12, 13, 15], "treat": [0, 2, 8, 9, 15], "task": [0, 2, 7, 8, 9, 12, 15], "fidel": [0, 2, 9, 12], "target": [0, 2, 8, 9, 13, 15], "sort": [0, 2, 10], "encod": [0, 2, 4, 8, 9], "hierarch": [0, 2, 8], "search": [0, 1, 2, 4, 6, 8, 9, 10, 11, 12, 13, 15], "space": [0, 1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 15], "format": [0, 3, 6, 7, 8, 9, 10, 12, 14, 15], "add_valu": [0, 2], "add": [0, 1, 2, 7, 9, 10, 12, 13, 15], "input": [0, 2, 4, 8, 9, 10, 13, 15], "cast": [0, 2, 15], "available_flag": [0, 2], "boolean": [0, 2, 3, 5, 8, 9, 12, 15], "attribut": [0, 1, 2, 8, 9, 13, 15], "domain_repr": [0, 2], "domain": [0, 2, 8, 13, 15], "set_valu": [0, 2], "valid": [0, 2, 4, 9, 10, 15], "check": [0, 1, 2, 3, 5, 8, 9, 11, 12, 15], "otherwis": [0, 2, 3, 7, 8, 9, 10, 12, 13, 15], "comparisonop": [0, 2, 13, 15], "enumer": [0, 2, 7, 8, 10, 12, 13], "comparison": [0, 2, 10], "oper": [0, 1, 2, 9, 12, 13, 15], "df": [0, 2, 3, 10, 15], "panda": [0, 1, 2, 3, 7, 8, 10, 15], "datafram": [0, 1, 2, 3, 7, 8, 10, 15], "descript": [0, 2, 9, 12, 13], "store": [0, 2, 4, 8, 9, 10, 12, 13, 15], "numer": [0, 2, 8, 10, 15], "retriev": [0, 1, 2, 7, 8, 9, 12, 13, 15], "via": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 13, 15], "extern": [0, 2, 8, 9, 15], "futur": [0, 2, 4, 9], "attach_data": [0, 2, 7], "requir": [0, 1, 2, 8, 9, 11, 12, 13, 15], "underli": [0, 2, 4, 8, 9, 11, 15], "column": [0, 2, 3, 9, 13, 15], "basedata": [0, 2], "metric_nam": [0, 1, 2, 3, 7, 8, 9, 10, 12, 15], "mean": [0, 1, 2, 3, 5, 7, 8, 9, 10, 12, 13, 15], "sem": [0, 1, 2, 3, 7, 8, 10, 12, 15], "latter": [0, 1, 2, 8, 12, 15], "two": [0, 2, 3, 7, 8, 9, 10, 12, 13, 15], "must": [0, 1, 2, 4, 8, 9, 10, 12, 13, 15], "human": [0, 2, 15], "readabl": [0, 2, 15], "filter": [0, 2, 8, 9, 10, 15], "trial_indic": [0, 2, 3, 12, 15], "iter": [0, 1, 2, 3, 4, 5, 7, 8, 11, 12, 13, 15], "subset": [0, 2, 8, 9, 10, 15], "row": [0, 2, 9, 15], "AND": [0, 2], "either": [0, 2, 8, 9, 12, 13, 14, 15], "dimens": [0, 1, 2, 3, 9, 15], "from_multiple_data": [0, 2], "subset_metr": [0, 2, 10], "concaten": [0, 2], "appear": [0, 2, 9, 15], "search_spac": [0, 1, 2, 8, 10, 13, 15], "searchspac": [0, 1, 8, 10, 12, 13, 15], "optimization_config": [0, 1, 2, 8, 9, 12, 13, 15], "optimizationconfig": [0, 1, 8, 9, 12, 13, 15], "tracking_metr": [0, 1, 2], "is_test": [0, 2, 12], "experiment_typ": [0, 2, 12, 14], "ani": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "default_data_typ": [0, 2], "datatyp": [0, 2, 13], "add_tracking_metr": [0, 2], "alreadi": [0, 1, 2, 8, 9, 10, 11, 13], "rais": [0, 2, 4, 8, 9, 10, 12, 13, 15], "error": [0, 1, 2, 4, 8, 9, 10, 12, 13, 15], "don": [0, 2, 9, 13], "t": [0, 2, 3, 4, 8, 9, 10, 12, 13, 15], "them": [0, 1, 2, 3, 8, 9, 15], "arms_by_signatur": [0, 2, 8], "combine_with_last_data": [0, 2], "overwrite_existing_data": [0, 2, 7], "_data_by_tri": [0, 2], "look": [0, 2, 7, 8, 9, 12, 13], "up": [0, 2, 4, 8, 9, 11, 13, 15], "lookup_data_for_tri": [0, 2], "By": [0, 2, 8, 9, 12, 13, 15], "timestamp": [0, 2, 3, 7, 15], "most": [0, 1, 2, 8, 12, 13, 15], "recent": [0, 2, 5, 12], "sometim": [0, 2], "howev": [0, 2, 9, 13], "call": [0, 1, 2, 4, 7, 8, 9, 11, 12, 13, 15], "becaus": [0, 1, 2, 8, 9, 11, 13, 15], "some": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 15], "rest": [0, 2, 11, 12], "anoth": [0, 2, 4, 8, 9, 12, 15], "To": [0, 2, 8, 9, 15], "achiev": [0, 2, 15], "goal": [0, 2, 8], "In": [0, 2, 4, 5, 7, 8, 9, 10, 12, 13, 14, 15], "take": [0, 1, 2, 8, 9, 10, 12, 13, 15], "previous": [0, 2, 4, 8, 9], "append": [0, 2, 15], "newli": [0, 2, 9], "delet": [0, 2], "old": [0, 2], "afterward": [0, 1, 2, 15], "doe": [0, 1, 2, 8, 9, 10, 11, 12, 13, 15], "observ": [0, 3, 4, 7, 8, 9, 10, 12, 13, 15], "around": [0, 2, 9, 10, 13], "ever": [0, 2], "know": [0, 1, 2, 13], "incom": [0, 2], "inform": [0, 1, 2, 4, 7, 8, 9, 11, 13, 14, 15], "replac": [0, 1, 2, 4, 7, 8], "therebi": [0, 2], "reduc": [0, 2, 8, 9, 10, 13], "amount": [0, 1, 2, 8, 15], "databas": [0, 2, 4, 13, 14, 15], "milli": [0, 2], "attach_fetch_result": [0, 2], "metricfetch": [0, 1, 2, 7, 15], "unsaf": [0, 2, 15], "prefer": [0, 2, 15], "directli": [0, 2, 8, 9, 12, 15], "fetch": [0, 1, 2, 7, 10, 12, 13, 15], "so": [0, 2, 5, 8, 9, 10, 12, 13, 15], "thei": [0, 2, 8, 9, 10, 11, 15], "kei": [0, 2, 3, 7, 8, 9, 10, 11, 13, 15], "err": [0, 2, 15], "silent": [0, 1, 2, 15], "drop": [0, 2], "find": [0, 2, 8, 9, 10, 12, 13, 15], "cach": [0, 2, 7, 8, 9], "attempt": [0, 2, 4, 8, 12, 13], "refetch": [0, 2], "your": [0, 2], "intend": [0, 2, 13], "you": [0, 2, 4, 8, 9, 13, 15], "resolv": [0, 2], "first": [0, 1, 2, 3, 7, 8, 9, 12, 13, 15], "attach_tri": [0, 2], "were": [0, 2, 8, 11, 15], "properli": [0, 2, 15], "clone_with": [0, 2], "origin": [0, 1, 2, 3, 8, 9, 11, 15], "cloned_experiment_": [0, 2], "prefix": [0, 2], "config": [0, 1, 2, 5, 8, 9, 10, 12, 13, 15], "orign": [0, 2], "main": [0, 2, 7, 8], "dictionari": [0, 1, 2, 3, 6, 8, 9, 10, 11, 12, 13, 15], "completed_tri": [0, 2], "basetri": [0, 1, 5, 7, 11, 13, 15], "arriv": [0, 2], "expect": [0, 2, 3, 5, 8, 9, 11, 12, 15], "data_by_tri": [0, 2], "ordereddict": [0, 2, 9, 13], "millisecond": [0, 2, 15], "order": [0, 1, 2, 3, 4, 8, 9, 10, 12, 13, 14, 15], "default_trial_typ": [0, 2], "alwai": [0, 2, 8, 13, 15], "fetch_data": [0, 2, 7], "kwarg": [0, 1, 2, 3, 5, 7, 8, 9, 10, 12, 13], "avail": [0, 2, 3, 4, 5, 7, 8, 12, 14, 15], "while": [0, 1, 2, 7, 8, 9, 11, 12, 15], "mai": [0, 1, 2, 4, 7, 8, 9, 11, 12, 15], "is_available_while_run": [0, 2, 7], "lossi": [0, 2], "ex": [0, 2], "mapdata": [0, 3, 7, 8, 13, 15], "implicitli": [0, 2], "lose": [0, 2], "misconfigur": [0, 2, 4], "ones": [0, 2, 8, 9, 10, 15], "keyword": [0, 1, 2, 8, 9, 13, 15], "arg": [0, 1, 2, 8, 9, 11, 13, 15], "function": [0, 1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13], "fetch_data_result": [0, 2], "except": [0, 2, 6, 8, 9, 12, 13, 15], "captur": [0, 2], "metricfetchresult": [0, 2], "along": [0, 2, 8, 9, 10, 12, 15], "messag": [0, 2, 3, 4, 11, 12, 15], "nest": [0, 2, 7, 8, 12, 15], "trial_index": [0, 2, 3, 7, 8, 10, 12, 13, 15], "fetch_trials_data": [0, 2], "whetner": [0, 2], "fetch_trials_data_result": [0, 2], "get_trials_by_indic": [0, 2], "grab": [0, 2, 15], "immutable_search_space_and_opt_config": [0, 2, 12, 13, 15], "mutabl": [0, 2], "improv": [0, 2, 5, 8, 9, 12, 13], "layer": [0, 2, 7], "perform": [0, 1, 2, 3, 7, 8, 9, 10, 11, 12, 15], "Not": [0, 2, 8, 9, 15], "those": [0, 2, 5, 8, 9, 10, 11, 15], "disabl": [0, 2, 8, 15], "chang": [0, 2, 7, 8, 9, 10, 13, 15], "necessit": [0, 2], "is_moo_problem": [0, 2, 8], "lookup_data": [0, 2], "lookup": [0, 2, 6, 10, 15], "latest": [0, 2, 11], "empti": [0, 2, 3, 8, 9, 11, 12], "request": [0, 2, 4, 9], "lookup_data_for_t": [0, 2], "collect": [0, 2, 3, 15], "known": [0, 1, 2, 8, 9, 12, 15], "metric_config_summary_df": [0, 2], "per": [0, 1, 2, 7, 8, 9, 10, 11, 12, 15], "follow": [0, 2, 4, 7, 8, 9, 10, 11, 12, 15], "subclass": [0, 1, 2, 7, 8, 9, 11, 12, 13, 15], "braninmetr": [0, 2, 7, 13, 15], "minim": [0, 2, 7, 8, 9, 10, 12, 13, 15], "maxim": [0, 2, 8, 9, 12, 15], "constraint": [0, 1, 2, 5, 8, 9, 10, 12, 13], "bound": [0, 1, 2, 8, 9, 11, 12, 15], "10": [0, 1, 2, 3, 8, 9, 10, 12, 13, 15], "0": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12, 13, 15], "part": [0, 2, 8, 9, 10, 11, 15], "objectivethreshold": [0, 2, 8, 10, 12, 13, 15], "outcomeconstraint": [0, 8, 9, 10, 12, 13, 15], "lower": [0, 1, 2, 9, 10, 11, 12, 15], "better": [0, 2, 7, 8, 10, 15], "new_batch_tri": [0, 2], "new_trial": [0, 2, 15], "therefor": [0, 2, 8, 15], "num_abandoned_arm": [0, 2], "num_trial": [0, 1, 2, 3, 8, 15], "remove_tracking_metr": [0, 2], "remov": [0, 2, 4, 8, 13, 15], "reset_runn": [0, 2], "runner_for_tri": [0, 2], "running_trial_indic": [0, 2], "preserv": [0, 2, 8, 13], "modif": [0, 2], "compar": [0, 2, 10, 15], "against": [0, 2, 8, 10, 15], "sum_trial_s": [0, 2], "sum": [0, 2, 9, 13, 15], "supports_trial_typ": [0, 2], "support": [0, 1, 2, 4, 7, 8, 9, 11, 15], "time_cr": [0, 2, 13], "datetim": [0, 2, 13, 15], "creation": [0, 1, 2, 12, 14, 15], "trial_indices_by_statu": [0, 2], "trialstatu": [0, 1, 2, 11, 13, 15], "group": [0, 2, 10, 12], "ttl": [0, 2, 12], "elaps": [0, 2, 12], "dure": [0, 2, 4, 5, 8, 9], "found": [0, 2, 4, 7, 8, 9, 10, 12, 15], "past": [0, 2, 5], "trials_by_statu": [0, 2], "trials_expecting_data": [0, 2], "update_tracking_metr": [0, 2], "redefin": [0, 2], "definit": [0, 2, 8, 10, 13], "validate_tri": [0, 2], "valueerror": [0, 2, 4, 8, 9, 15], "warm_start_from_old_experi": [0, 2], "old_experi": [0, 2], "copy_run_metadata_kei": [0, 2], "trial_statuses_to_copi": [0, 2], "search_space_check_membership_raise_error": [0, 2], "expeir": [0, 2, 13], "member": [0, 2, 8, 13], "handl": [0, 1, 2, 8, 9, 11, 15], "transfer": [0, 2, 9], "denot": [0, 2, 9], "item": [0, 2, 8, 9, 12, 13, 15], "over": [0, 1, 2, 5, 8, 9, 12, 15], "run_metadata_report_kei": [0, 2, 11], "early_stop": [0, 2, 12, 13], "warm": [0, 2, 8, 9], "start": [0, 2, 8, 9, 11, 12, 15], "fall": [0, 2, 3, 8, 9, 12, 13], "outsid": [0, 2, 9, 11], "successfulli": [0, 2, 8], "fixedparamet": [0, 2, 8, 13, 15], "fix": [0, 2, 8, 9, 10, 12, 13], "model_predict": [0, 2, 8], "best_arm_predict": [0, 2], "fit_tim": [0, 1, 2, 8], "gen_tim": [0, 1, 2], "model_kei": [0, 2, 8], "model_kwarg": [0, 2, 8], "bridge_kwarg": [0, 2], "gen_metadata": [0, 2, 8, 9], "model_state_after_gen": [0, 2], "generation_step_index": [0, 2, 13], "candidate_metadata_by_arm_signatur": [0, 2], "generation_node_nam": [0, 2], "gen": [0, 2, 8, 9, 15], "previou": [0, 2, 8, 9, 15], "arm_signatur": [0, 2], "match": [0, 2, 8, 9, 11, 15], "respect": [0, 1, 2, 8, 9, 10, 11, 12, 15], "predict": [0, 2, 9, 10, 12, 15], "produc": [0, 2, 7, 8, 9, 12, 15], "becam": [0, 2], "deep": [0, 2], "taken": [0, 2, 8, 9, 10], "fit": [0, 1, 2, 3, 8, 9, 10], "generator_run_typ": [0, 2], "covari": [0, 2, 8, 9, 12, 15], "record": [0, 2, 8, 14, 15], "execut": [0, 1, 2, 15], "model_predictions_by_arm": [0, 2], "param_df": [0, 2], "inspect": [0, 2, 8], "content": [0, 2, 15], "pd": [0, 2, 9], "lower_is_bett": [0, 1, 2, 7, 10, 15], "fetch_trial_data": [0, 1, 2, 7, 15], "essenti": [0, 2, 8, 12], "overrid": [0, 2, 8, 10, 13, 15], "minimum": [0, 1, 2, 8, 10, 12, 15], "http": [0, 2, 8, 15], "dev": [0, 2, 8, 15], "api": [0, 2, 8, 12, 15], "_modul": [0, 2], "html": [0, 2, 10, 15], "required_column": [0, 2], "flag": [0, 2, 8, 9, 10, 13], "particular": [0, 2, 8, 9, 10, 12, 15], "bulk_fetch_experiment_data": [0, 2, 7], "base_tri": [0, 2], "comput": [0, 1, 2, 3, 8, 9, 10, 11, 12, 15], "bulk_fetch_trial_data": [0, 2, 7], "data_constructor": [0, 2, 13], "alia": [0, 2, 8, 9, 10, 13, 15], "fetch_data_prefer_lookup": [0, 2], "fallback": [0, 2, 15], "classmethod": [0, 1, 2, 3, 7, 9, 11, 12, 13, 14, 15], "fetch_experiment_data_multi": [0, 2], "fetch_trial_data_multi": [0, 2], "across": [0, 2, 8, 9, 13, 15], "fetch_multi_group_by_metr": [0, 2], "_metrics_by_class": [0, 2], "superclass": [0, 2, 9], "assum": [0, 2, 7, 8, 9, 10, 12, 15], "never": [0, 2, 7, 8, 15], "whenev": [0, 2, 7], "period_of_new_data_after_trial_complet": [0, 2], "timedelta": [0, 2, 15], "period": [0, 2, 9], "still": [0, 2, 8, 9, 13, 15], "whose": [0, 2, 7, 8, 9, 10, 12, 13], "pipelin": [0, 2], "land": [0, 2], "even": [0, 2, 3, 8, 13, 15], "maximum": [0, 1, 2, 4, 8, 9, 10, 12, 15], "prevent": [0, 2], "Its": [0, 2, 8], "schedul": [0, 1, 2, 6, 11], "anywher": [0, 2], "summary_dict": [0, 2], "registri": [0, 6, 12], "model_key_to_model_setup": [0, 8], "instanti": [0, 1, 6, 8, 9, 10, 13], "simpli": [0, 1, 2, 8], "like": [0, 1, 2, 7, 8, 9, 10, 12, 13, 15], "sobol": [0, 8, 12], "gpei": [0, 8, 12, 15], "constructor": [0, 8, 9, 13, 15], "scrambl": [0, 8, 9], "randommodelbridg": [0, 8], "sobolgener": [0, 8, 9], "multiobject": [0, 2, 8, 10, 13], "extra_kwarg": [0, 2], "compos": [0, 2, 8, 15], "compon": [0, 2, 9, 11, 15], "acquisit": [0, 2, 8, 13, 15], "objective_weight": [0, 2, 8, 9], "multiobjectiveoptimizationconfig": [0, 1, 2, 8, 12, 13, 15], "outcome_constraint": [0, 2, 8, 9, 10, 12, 13], "objective_threshold": [0, 2, 8, 9, 10, 12, 13], "risk_measur": [0, 2, 8, 9, 13, 15], "riskmeasur": [0, 8, 13, 15], "configur": [0, 1, 2, 4, 8, 9, 12, 13, 15], "multi": [0, 2, 5, 8, 9, 12, 13], "compris": [0, 2], "threshold": [0, 2, 3, 8, 9, 10, 12, 13], "risk": [0, 2, 8, 9], "There": [0, 2, 9, 15], "individu": [0, 2, 3, 8, 9, 13, 15], "upper": [0, 2, 9, 10, 11, 12, 15], "everi": [0, 1, 2, 8, 9, 10, 12, 13, 15], "good": [0, 2, 8, 15], "rule": [0, 2, 8], "thumb": [0, 2], "below": [0, 2, 3, 8, 9, 12, 15], "accept": [0, 2, 8, 12], "all_constraint": [0, 2], "clone_with_arg": [0, 2], "make": [0, 1, 2, 8, 9, 10, 12, 13, 15], "objective_thresholds_dict": [0, 2], "get_unconstrainable_metr": [0, 2], "incompat": [0, 2], "op": [0, 2, 9, 10, 15], "contribut": [0, 2, 8, 9, 15], "hypervolum": [0, 1, 2, 5, 8, 9, 12], "calcul": [0, 2, 8, 9, 10, 12, 15], "form": [0, 2, 8, 9, 10, 12, 15], "abov": [0, 2, 8, 9, 10, 11], "express": [0, 2], "absolut": [0, 2, 8, 9, 10, 13, 15], "applic": [0, 2, 3, 8, 15], "direct": [0, 2, 7, 9, 10, 12, 15], "infer": [0, 1, 2, 8, 9, 10, 12, 15], "constrain": [0, 2, 15], "scale": [0, 2, 7, 8, 9, 10, 15], "percent": [0, 2, 10, 15], "manual": [0, 2, 14], "overwrit": [0, 2, 13], "greater": [0, 2, 8, 9, 15], "less": [0, 2, 3, 9, 12, 15], "optimizationloop": [0, 12], "evaluation_funct": [0, 7, 12], "callabl": [0, 1, 2, 7, 8, 9, 10, 11, 12, 13, 15], "total_tri": [0, 1, 12], "20": [0, 8, 9, 12, 15], "arms_per_tri": [0, 12, 14], "random_se": [0, 8, 12], "wait_tim": [0, 12], "run_async": [0, 12], "generation_strategi": [0, 1, 4, 8, 12, 13, 14, 15], "generationstrategi": [0, 1, 2, 8, 12, 13, 14, 15], "manag": [0, 6, 13, 15], "loop": [0, 1, 2, 6, 8, 9], "overse": [0, 12], "gather": [0, 3, 12, 15], "full_run": [0, 12], "full": [0, 2, 8, 9, 11, 12, 15], "plan": [0, 3, 12, 15], "get_best_point": [0, 12], "obtain": [0, 3, 5, 8, 9, 12, 13, 15], "encount": [0, 2, 12, 15], "cours": [0, 2, 8, 12, 15], "get_current_model": [0, 12], "modelbridg": [0, 2, 3, 6, 9, 10, 12, 13, 15], "run_trial": [0, 2, 12, 15], "step": [0, 2, 3, 4, 8, 12, 13], "with_evaluation_funct": [0, 12], "sequenc": [0, 2, 3, 8, 9, 12], "experiment_nam": [0, 12, 13, 14, 15], "objective_nam": [0, 12], "parameter_constraint": [0, 2, 8, 12, 13], "synchron": [0, 12], "with_runners_and_metr": [0, 12], "path_to_runn": [0, 12], "paths_to_metr": [0, 12], "asynchron": [0, 12, 15], "orderconstraint": [0, 2, 13, 15], "lower_paramet": [0, 2], "upper_paramet": [0, 2], "smaller": [0, 2, 9], "clone_with_transformed_paramet": [0, 2], "transformed_paramet": [0, 2], "transform": [0, 2, 3, 6, 9, 10, 13, 15], "version": [0, 2, 4, 8, 9, 10, 15], "constraint_dict": [0, 2, 13], "linear": [0, 2, 7, 8, 9, 13], "higher": [0, 2, 7, 15], "That": [0, 2, 8, 15], "100": [0, 2, 7, 9, 13, 15], "status_quo_metric_valu": [0, 2], "abstract": [0, 1, 2, 3, 4, 7, 8, 12, 13, 15], "is_valid_typ": [0, 2], "python_typ": [0, 2], "python": [0, 2, 8, 13, 15], "primarili": [0, 2, 8], "unknown": [0, 2, 7, 9], "conform": [0, 2], "parameterconstraint": [0, 8, 12, 13, 15], "satisfi": [0, 2, 5, 8, 9], "w": [0, 2, 7, 8, 10, 15], "v": [0, 2, 9, 10, 15], "vector": [0, 2, 8, 12, 15], "dot": [0, 2], "product": [0, 2, 9, 12], "inequ": [0, 2, 9, 15], "parameter_dict": [0, 2], "rangeparamet": [0, 1, 2, 8, 10, 13, 15], "log_scal": [0, 2, 8, 10, 12], "logit_scal": [0, 2], "rang": [0, 2, 5, 8, 9, 10, 12, 13, 15], "round": [0, 2, 9, 12, 13], "log": [0, 2, 7, 9, 10, 12, 13, 14, 15], "logit": [0, 2, 7], "ensur": [0, 1, 2, 8, 9, 13, 15], "strictli": [0, 2, 8], "update_rang": [0, 2], "left": [0, 2, 3, 9, 10], "tol": [0, 2], "5e": [0, 2], "07": [0, 2, 9], "right": [0, 2, 3, 8, 15], "toler": [0, 2], "custom": [0, 1, 2, 4, 8, 9, 10, 11, 13, 15], "poll_available_capac": [0, 2, 12], "capac": [0, 2, 15], "difficult": [0, 2], "implement": [0, 1, 2, 3, 8, 9, 11, 12, 13, 15], "unlimit": [0, 2, 8], "try": [0, 2, 8, 10], "violat": [0, 2, 9, 13], "artifici": [0, 2, 9], "forc": [0, 2, 8, 9, 15], "limit": [0, 2, 3, 8, 9, 10, 12], "place": [0, 2, 8, 9, 10, 12, 15], "scheduleropt": [0, 1, 2, 12, 13, 15], "max_pending_tri": [0, 2, 12, 15], "granular": [0, 2], "max_parallel": [0, 2, 4, 8, 14], "generationstep": [0, 2, 4, 8, 13, 15], "advanc": [0, 1, 2, 8, 9, 15], "poll_except": [0, 2], "poll_trial_statu": [0, 1, 2, 11], "non": [0, 1, 2, 8, 9, 10, 11, 12, 15], "termin": [0, 1, 2, 8, 9, 11], "wait": [0, 1, 2, 4, 11, 12, 15], "between": [0, 1, 2, 5, 8, 9, 10, 11, 12, 15], "poll": [0, 1, 2, 11, 12], "relev": [0, 2, 9, 11, 12, 15], "intern": [0, 2, 8, 11, 15], "impolement": [0, 2, 11], "report": [0, 2, 6, 9, 11], "report_result": [0, 2, 11], "run_multipl": [0, 2], "effici": [0, 2, 9, 12], "overwritten": [0, 2], "staging_requir": [0, 2], "goe": [0, 2], "state": [0, 2, 8, 9, 12, 13, 15], "stop": [0, 1, 2, 3, 4, 5, 11, 12, 13, 15], "why": [0, 2, 11], "restrict": [0, 1, 2, 8, 10, 15], "p_a": [0, 2], "p_b": [0, 2], "cast_arm": [0, 2], "proper": [0, 2, 7, 13, 15], "mismatch": [0, 2], "mostli": [0, 2], "sloppi": [0, 2], "hand": [0, 2], "written": [0, 2], "check_all_parameters_pres": [0, 2], "raise_error": [0, 2], "explan": [0, 2], "check_membership": [0, 2], "check_typ": [0, 2, 15], "allow_non": [0, 2], "construct_arm": [0, 2], "miss": [0, 2, 3, 10, 12], "out_of_design_arm": [0, 2], "out": [0, 2, 8, 9, 10, 12, 15], "convers": [0, 2, 13, 15], "strip": [0, 2], "down": [0, 2, 8, 9, 15], "null": [0, 2, 9, 12], "summary_df": [0, 2], "choic": [0, 2, 8, 10, 12, 13], "sumconstraint": [0, 2, 13, 15], "is_upper_bound": [0, 2], "reconstruct": [0, 2, 13], "appli": [0, 2, 3, 4, 8, 9, 13, 15], "genetor": [0, 2], "get_metric_mean": [0, 2], "objective_mean": [0, 2], "level": [0, 2, 7, 8, 9, 10, 12, 15], "necessarili": [0, 2], "update_trial_data": [0, 2], "util": [0, 6], "updat": [0, 2, 3, 4, 8, 9, 12, 13, 15], "nois": [0, 1, 2, 3, 7, 9, 12], "see": [0, 2, 3, 7, 8, 9, 11, 12, 13, 15], "summar": [0, 2], "validate_data_for_tri": [0, 2], "further": [0, 2, 3], "benchmark_method": [1, 13], "benchmarkmethod": [1, 13, 15], "scheduler_opt": [1, 12, 13], "distribute_repl": 1, "term": [1, 8, 13, 15], "tell": [1, 8], "u": [1, 2, 8, 9, 13, 15], "extra": [1, 8, 12], "parallel": [1, 4, 8, 9, 12, 15], "earli": [1, 2, 3, 5, 12, 13, 15], "scheduler_optionss": 1, "benchmarkproblem": [1, 13, 15], "former": [1, 15], "get_sequential_optimization_scheduler_opt": 1, "timeout_hour": [1, 12], "4": [1, 2, 8, 10, 12, 15], "typic": [1, 2, 3, 7, 8, 9, 11, 15], "hour": [1, 12], "replic": 1, "benchmark_problem": [1, 13], "infer_nois": [1, 7, 15], "from_botorch": [1, 15], "test_problem_class": [1, 11], "basetestproblem": [1, 7, 11], "test_problem_kwarg": [1, 11], "special": [1, 4, 8, 13, 15], "noise_std": [1, 11], "benchmarkproblembas": 1, "protocol": [1, 9, 15], "interfac": [1, 3, 5, 8, 9, 13, 15], "adher": 1, "surrogatebenchmarkproblem": 1, "moosurrogatebenchmarkproblem": [1, 15], "benchmarkproblemwithknownoptimum": 1, "optimal_valu": 1, "multiobjectivebenchmarkproblem": [1, 13, 15], "maximum_hypervolum": 1, "reference_point": 1, "rather": [1, 8, 13, 15], "from_botorch_multi_object": 1, "multiobjectivetestproblem": 1, "own": [1, 8, 9, 10, 12, 13], "singleobjectivebenchmarkproblem": [1, 13, 15], "basic": [1, 2, 8, 9, 15], "from_botorch_synthet": 1, "synthetictestfunct": [1, 15], "benchmark_result": [1, 13], "aggregatedbenchmarkresult": [1, 13, 15], "benchmarkresult": [1, 13, 15], "optimization_trac": 1, "score_trac": 1, "seri": [1, 2, 3, 7, 13, 15], "scalar": [1, 2, 3, 7, 8, 9, 10, 13, 15], "here": [1, 2, 8, 9, 10], "pair": [1, 2, 9, 10], "from_benchmark_result": 1, "aggregr": 1, "variou": [1, 2, 15], "timeout": [1, 13], "aggreg": [1, 8, 10, 15], "trace": [1, 12, 15], "statist": [1, 8, 10], "truncat": 1, "count": 1, "seed": [1, 8, 9, 15], "ndarrai": [1, 2, 3, 7, 8, 9, 10, 15], "experiment_storage_id": 1, "benchmarkproblemregistryentri": 1, "factory_fn": 1, "factory_kwarg": 1, "get_problem": 1, "problem_nam": 1, "additional_kwarg": 1, "hd_embed": 1, "embed_higher_dimens": 1, "tproblem": 1, "total_dimension": 1, "enough": [1, 9], "get_surrogate_and_dataset": 1, "superviseddataset": [1, 8, 9, 15], "_runner": 1, "surrogatebenchmarkproblembas": 1, "until": [1, 4, 8, 9, 12], "defer": [1, 13], "simpl": [1, 7, 9, 11, 14], "aspect": 1, "immedi": [1, 2], "todo": [1, 4, 8, 9], "expens": [1, 8, 10], "download": [1, 15], "file": [1, 9, 12, 13], "soosurrogatebenchmarkproblem": [1, 15], "lazi": 1, "dataset": [1, 7, 8, 9, 15], "set_runn": 1, "surrogatemetr": [1, 13], "surrogaterunn": [1, 13], "deserialize_init_arg": [1, 2, 11, 15], "decoder_registri": [1, 2, 11, 13, 15], "class_decoder_registri": [1, 2, 11, 13, 15], "deseri": [1, 11, 13, 15], "initi": [1, 2, 8, 9, 11, 12, 13, 15], "serialize_init_arg": [1, 2, 11, 15], "obj": [1, 2, 11, 13, 15], "serial": [1, 2, 8, 9, 11, 13, 14], "warn": [1, 4, 8, 9, 15], "consist": [1, 8, 13, 15], "save": [1, 2, 3, 4, 8, 9, 12, 15], "gpytorch": [1, 9, 13], "modul": [1, 6, 7, 8, 15], "At": [1, 8], "syntheticrunn": [1, 11, 13, 15], "extens": [1, 15], "common": [1, 4, 6, 9, 13], "adapt": [1, 8], "daulton2022bopr": 1, "daulton": [1, 9], "x": [1, 2, 3, 7, 8, 9, 10, 11, 12, 15], "wan": 1, "d": [1, 2, 3, 7, 8, 9, 10, 15], "eriksson": [1, 9], "m": [1, 3, 8, 9, 15], "balandat": [1, 9], "osborn": 1, "bakshi": [1, 9], "bayesian": [1, 7, 8, 9, 15], "probabilist": 1, "reparameter": 1, "neural": [1, 9], "35": 1, "2022": 1, "mixed_integ": 1, "get_discrete_acklei": 1, "50": [1, 3, 10], "13d": 1, "acklei": 1, "get_discrete_hartmann": 1, "6d": 1, "hartmann": [1, 15], "get_discrete_rosenbrock": 1, "10d": 1, "rosenbrock": 1, "6": [1, 2, 9, 10, 12, 15], "hss": 1, "get_jenatton_benchmark_problem": 1, "hpo": [1, 13], "pytorch_cnn": [1, 13], "pytorchcnnbenchmarkproblem": 1, "from_dataset": 1, "train_set": 1, "test_set": [1, 15], "pytorchcnnmetr": [1, 13], "pytorchcnnrunn": 1, "cnn": [1, 15], "forward": [1, 3, 7, 8, 9, 11, 15], "overridden": [1, 8, 12, 15], "although": [1, 15], "recip": [1, 15], "care": [1, 9, 15], "regist": [1, 8, 13, 15], "hook": [1, 15], "ignor": [1, 2, 3, 8, 9, 10, 15], "train_and_evalu": 1, "lr": [1, 15], "momentum": [1, 15], "weight_decai": [1, 15], "step_siz": 1, "gamma": [1, 9], "pytorchcnntorchvisionbenchmarkproblem": [1, 13], "from_dataset_nam": 1, "pytorchcnntorchvisionrunn": [1, 13], "aid": 1, "reload": [1, 15], "sortablebas": [2, 8, 15], "abc": [2, 3, 5, 7, 8, 13, 15], "kind": 2, "regular": [2, 12], "arbitrari": [2, 8], "abandoned_reason": [2, 13], "assign_runn": 2, "doesn": [2, 3, 4, 10, 13], "completed_successfulli": 2, "framework": 2, "deriv": [2, 4], "did_not_complet": 2, "failed_reason": [2, 13], "is_abandon": 2, "mark_abandon": 2, "saniti": 2, "transit": [2, 8], "mark_a": 2, "mark_": 2, "mark_complet": 2, "mark_early_stop": 2, "mark_fail": 2, "mark_run": 2, "no_runner_requir": 2, "skip": [2, 3, 8, 13], "presenc": 2, "mark_stag": 2, "experiment": [2, 8, 15], "new_statu": 2, "stop_metadata": [2, 13], "time_complet": [2, 13], "time_run_start": [2, 13], "time_stag": [2, 13], "infinit": [2, 15], "reflect": [2, 8], "update_run_metadata": 2, "update_stop_metadata": 2, "retryabl": [2, 15], "deem": [2, 15], "unpromis": 2, "prior": [2, 8, 9, 13], "failur": [2, 4, 12, 15], "transient": 2, "resuggest": [2, 8, 15], "end": [2, 9, 12, 13, 15], "rerun": 2, "action": [2, 8], "poorli": [2, 8], "determinist": [2, 7, 15], "autom": [2, 4, 7, 8], "bot": 2, "strategi": [2, 6, 9, 12, 13, 15], "addition": [2, 4, 8], "intermedi": [2, 15], "exampl": [2, 3, 8, 9, 10, 11, 15], "servic": [2, 6, 13], "get_next_tri": 2, "5": [2, 3, 5, 7, 8, 9, 10, 11, 12, 15], "3": [2, 8, 9, 10, 12, 13, 15], "dispatch": [2, 12, 15], "7": [2, 10, 15], "expecting_data": 2, "is_candid": 2, "is_complet": [2, 8], "is_deploi": 2, "is_early_stop": 2, "is_fail": 2, "is_run": 2, "is_termin": 2, "immutable_once_run": 2, "func": [2, 15], "decor": [2, 8, 9], "batch_trial": [2, 12, 13], "abandonedarm": [2, 13, 15], "abandoned_arms_metadata": [2, 13], "add_arms_and_weight": 2, "in_design_arm": 2, "set_status_quo_with_weight": 2, "well": [2, 7, 9, 11, 13, 15], "bakeoff": 2, "explor": [2, 8, 9], "exploration_concurr": 2, "offline_optim": 2, "serializationmixin": [2, 8, 15], "column_data_typ": 2, "end_tim": [2, 15], "frac_nonnul": 2, "numpi": [2, 8, 9, 15], "float64": [2, 8, 15], "n": [2, 3, 7, 8, 9, 15], "random_split": 2, "start_tim": [2, 15], "extra_column_typ": 2, "excluded_column": 2, "copy_structure_with_df": 2, "tbasedata": 2, "structur": [2, 8, 9, 13, 15], "help": [2, 8, 13, 15], "similar": [2, 4, 8, 9, 15], "extract": [2, 7, 8, 9, 10, 12, 13, 15], "df_hash": 2, "md5": 2, "veri": [2, 15], "larg": [2, 8, 13, 15], "from_evalu": 2, "convert": [2, 7, 8, 9, 10, 11, 12, 13, 15], "itself": [2, 8, 9, 13, 15], "iso": 2, "work": [2, 8, 10, 11, 15], "enclos": 2, "from_fidelity_evalu": 2, "cl": 2, "from_multipl": 2, "get_filtered_result": 2, "supported_column": 2, "extra_column_nam": 2, "true_df": 2, "truth": 2, "clone_without_metr": 2, "excluded_metric_nam": 2, "sanit": 2, "rectangular": 2, "custom_data_class": 2, "time_column": 2, "amend": 2, "set_single_tri": 2, "our": [2, 15], "ivw": [2, 10], "default_data_constructor": 2, "add_arm_and_prevent_naming_collis": 2, "old_trial": 2, "old_experiment_nam": 2, "generation_strategy_interfac": 2, "gen_for_multiple_trials_with_multiple_model": [2, 8, 15], "num_generator_run": [2, 8, 15], "ensembl": [2, 8, 15], "status": [2, 8, 11, 15], "actual": [2, 4, 8, 11, 15], "output": [2, 7, 8, 9, 12, 15], "pending_observ": [2, 8, 9, 15], "outer": [2, 8, 15], "inner": [2, 8, 15], "last_generator_run": 2, "armweight": 2, "namedtupl": [2, 8, 10, 13, 15], "ty": 2, "generatorruntyp": [2, 13], "extract_arm_predict": 2, "arm_idx": 2, "cov": [2, 8, 9], "map_data": [2, 3, 7, 13], "map_key_info": [2, 7], "mapkeyinfo": [2, 7, 13, 15], "auxiliari": 2, "occur": [2, 3, 4], "element": [2, 3, 7, 8, 9, 12, 15], "simplest": 2, "multifidel": 2, "fidelity_feature_1": 2, "fidelity_feature_n": 2, "map_df": 2, "deduplicate_by_column": 2, "shape": [2, 9], "from_map_evalu": 2, "downcast": 2, "necessari": [2, 7, 8, 13, 15], "fill": [2, 3, 9, 12], "cell": [2, 10, 15], "from_multiple_map_data": 2, "map_key_to_typ": 2, "map_kei": [2, 3, 7, 8], "subsampl": [2, 3], "keep_everi": 2, "limit_rows_per_group": 2, "limit_rows_per_metr": [2, 3], "include_first_last": 2, "manner": [2, 7, 15], "self": [2, 3, 8, 9, 12, 15], "length": [2, 3, 8, 9, 15], "account": [2, 8, 9, 12, 15], "three": [2, 9], "k": [2, 7, 8, 9, 12, 15], "kth": 2, "kept": [2, 15], "word": [2, 8], "largest": [2, 8, 12], "select": [2, 8, 9, 10], "approprio": 2, "appropri": [2, 7, 8, 9, 10, 14, 15], "prioriti": [2, 8, 15], "curv": [2, 3, 6, 12], "nearli": 2, "quantiti": [2, 8, 9], "guidelin": 2, "evenli": 2, "default_valu": 2, "helper": [2, 3, 8, 10, 12, 15], "auxilari": 2, "info": [2, 12, 13, 15], "value_typ": [2, 11, 12, 15], "map_metr": [2, 13], "maybe_raise_deprecation_warning_on_class_method": 2, "tb_str": 2, "multi_type_experi": [2, 8, 13], "default_runn": 2, "canon": [2, 8], "tune": [2, 7], "budget": 2, "simul": [2, 6, 8, 9], "approxim": [2, 8, 9, 12, 15], "final": [2, 3, 8, 9, 12, 15], "fed": 2, "tutori": [2, 6], "canonical_nam": 2, "proxi": 2, "add_trial_typ": [2, 15], "default_tri": 2, "indici": [2, 8, 15], "metric_to_trial_typ": 2, "oc": 2, "trial_type_to_runn": 2, "update_runn": 2, "scalarizedobject": [2, 13], "metric_weight": 2, "featur": [2, 3, 8, 9, 12, 13, 15], "observationfeatur": [2, 8, 10, 12, 13, 15], "observationdata": [2, 8], "would": [2, 3, 8, 13], "arrai": [2, 3, 8, 9, 15], "covariance_matrix": 2, "matric": [2, 9], "m1": [2, 8, 9, 12, 15], "m2": [2, 9], "means_dict": 2, "split": [2, 8, 9, 15], "everyth": [2, 9, 15], "join": [2, 8], "replace_paramet": 2, "from_arm": 2, "update_featur": 2, "new_featur": 2, "get_feature_col": 2, "get_feature_cols_from_map_data": 2, "observations_from_data": 2, "include_abandon": 2, "pull": 2, "diagon": [2, 9], "matrix": [2, 8, 9, 12, 15], "observations_from_map_data": 2, "map_keys_as_paramet": 2, "learn": [2, 3, 7, 9, 15], "frequent": 2, "lead": 2, "intract": 2, "recombine_observ": 2, "observation_featur": [2, 8, 15], "observation_data": [2, 8], "separate_observ": 2, "check_objective_thresholds_match_object": 2, "objectives_by_nam": 2, "objective_metr": 2, "wrong": [2, 4, 15], "scalarizedoutcomeconstraint": [2, 13, 15], "len": [2, 9], "cardin": [2, 8], "is_hierarch": 2, "is_numer": 2, "set_digit": 2, "set_log_scal": 2, "set_logit_scal": 2, "validate_constraint_paramet": 2, "parameter_distribut": [2, 13], "distribution_class": 2, "distribution_paramet": 2, "distribut": [2, 8, 9, 10, 11, 13, 15], "robust": [2, 8, 9, 13], "environment": [2, 8, 13], "rv_frozen": 2, "scipi": [2, 9, 15], "is_environment": 2, "robustsearchspac": [2, 8, 10, 13, 15], "recommend": [2, 5, 9], "modelbridge_util": [2, 8], "py": [2, 8, 9, 13, 15], "risk_measure_name_to_class": 2, "extract_risk_measur": [2, 8], "botorch": [2, 6, 8, 12, 13, 15], "hierarchicalsearchspac": [2, 13, 15], "cast_observation_featur": 2, "under": [2, 8, 9, 12, 15], "full_parameter": [2, 15], "due": [2, 3, 4, 13], "flatten": [2, 8, 14], "flatten_observation_featur": 2, "inject_dummy_values_to_complete_flat_parameter": 2, "inject": [2, 15], "happen": [2, 8, 9, 13, 15], "wasn": 2, "height": 2, "tree": [2, 9, 15], "hierarchical_structure_str": 2, "parameter_names_onli": 2, "show": [2, 8, 9, 10, 15], "concis": 2, "root": [2, 9, 13, 15], "num_sampl": [2, 8, 9, 13, 15], "environmental_vari": 2, "is_environmental_vari": 2, "parameter_nam": [2, 8, 15], "transform_search_spac": [2, 8, 15], "bunch": 2, "parent": [2, 13], "update_paramet": 2, "robustsearchspacedigest": [2, 8], "sample_param_perturb": [2, 8], "sample_environment": [2, 8], "lightweight": [2, 9, 12], "searchspacedigest": [2, 8, 9], "dim": [2, 8, 9, 15], "distribution_sampl": [2, 8], "environmental_sampl": [2, 8], "perturb": [2, 9], "add_paramet": 2, "add_parameter_constraint": 2, "is_robust": 2, "range_paramet": 2, "set_parameter_constraint": 2, "tunable_paramet": 2, "validate_membership": 2, "feature_nam": [2, 9, 15], "ordinal_featur": [2, 8], "categorical_featur": [2, 8, 9], "discrete_choic": [2, 8, 9], "task_featur": [2, 8, 9, 15], "fidelity_featur": [2, 8, 9, 15], "robust_digest": 2, "commun": [2, 9], "ephemer": [2, 9], "extract_search_space_digest": [2, 8], "docstr": [2, 9, 11], "explain": [2, 8], "l_0": 2, "u_0": 2, "l_d": 2, "u_d": 2, "inclus": 2, "ordin": 2, "l_i": [2, 8], "u_i": [2, 8], "carri": 2, "geq": [2, 15], "leq": 2, "merge_model_predict": 2, "predict_append": 2, "tmodelpredict": 2, "mean1": 2, "mean2": 2, "var1": 2, "var2": 2, "other_predict": 2, "validate_evaluation_outcom": 2, "runtim": [2, 7, 11, 15], "suppli": [2, 9, 12, 15], "correct": [2, 15], "validate_fidelity_trial_evalu": 2, "validate_floatlik": 2, "floatlik": 2, "validate_map_dict": 2, "map_dict": 2, "validate_map_trial_evalu": 2, "validate_param_valu": 2, "param_valu": 2, "validate_parameter": 2, "validate_single_metric_data": 2, "validate_trial_evalu": 2, "missingmetr": 2, "best_feasible_object": 2, "feasibl": [2, 5, 8, 9], "cumul": [2, 12], "extend_pending_observ": 2, "extend": [2, 8, 10, 15], "extract_pending_observ": 2, "include_out_of_design_point": 2, "get_pending_observation_featur": 2, "fewer": 2, "get_pending_observation_features_based_on_trial_statu": 2, "faster": [2, 15], "guarante": [2, 9], "accur": 2, "assumpt": [2, 8, 10, 13, 15], "instruct": 2, "get_missing_metr": 2, "observatin": 2, "missing_object": 2, "missing_outcome_constraint": 2, "get_missing_metrics_by_nam": 2, "missing_metr": 2, "entri": [2, 8, 9, 15], "get_model_tim": 2, "spent": 2, "get_model_trace_of_tim": 2, "seek": [2, 8], "among": [2, 5, 9, 10], "analogu": [2, 13], "speed": [2, 8, 9, 15], "entail": 2, "No": 2, "formatting_util": 2, "data_and_evaluations_from_raw_data": 2, "data_typ": 2, "raw": [2, 3, 4, 8, 9, 10, 12], "unavail": 2, "eventu": [2, 8], "raw_data_to_evalu": 2, "standard": [2, 8, 9, 10, 13, 15], "ttrialevalu": 2, "tmaptrialevalu": 2, "batchedtri": 2, "baseearlystoppingstrategi": [3, 5, 12, 15], "seconds_between_pol": 3, "300": 3, "min_progress": 3, "max_progress": 3, "min_curv": 3, "trial_indices_to_ignor": 3, "true_objective_metric_nam": 3, "normalize_progress": 3, "heurist": [3, 8, 9, 12], "halt": [3, 12, 15], "is_elig": 3, "elig": 3, "reach": [3, 4, 12], "hasn": 3, "surpass": 3, "_check_validity_and_get_data": 3, "though": [3, 9, 12, 13], "secondari": [3, 10], "shouldn": 3, "decis": [3, 5, 10], "progress": [3, 7, 8, 12], "ineligibl": 3, "is_eligible_ani": 3, "least": [3, 8, 9], "situat": [3, 15], "costli": 3, "should_stop_trials_earli": [3, 12, 15], "decid": [3, 5, 15], "fulli": [3, 5, 9, 12, 15], "conclud": [3, 15], "machin": [3, 8, 15], "contextu": [3, 5, 9, 13, 15], "earlystoppingtrainingdata": 3, "y": [3, 8, 9, 10, 15], "yvar": [3, 9, 15], "dataclass": [3, 9], "relat": [3, 4, 12, 13], "understand": 3, "come": 3, "modelbasedearlystoppingstrategi": 3, "min_progression_model": 3, "get_training_data": [3, 8], "max_training_s": 3, "untransform": [3, 8, 15], "trail": 3, "get_transform_helper_model": 3, "maptorchmodelbridg": [3, 8], "torchmodelbridg": [3, 8, 10, 15], "cont_x_tran": 3, "torch": [3, 6, 10, 13], "andearlystoppingstrategi": [3, 13, 15], "logicalearlystoppingstrategi": [3, 13], "orearlystoppingstrategi": [3, 13, 15], "from_early_stopping_strategi": 3, "percentil": [3, 8, 9, 13], "percentile_threshold": 3, "bottom": [3, 8, 10], "metric_threshold": 3, "pre": [3, 8, 9, 15], "align_partial_result": 3, "progr_kei": 3, "interpol": 3, "slinear": 3, "do_forward_fil": 3, "align": [3, 9], "partial": [3, 5, 7, 8], "heterogen": 3, "long": [3, 8, 13], "area": 3, "insid": [3, 8, 9], "forward_fil": 3, "suppos": [3, 9], "task_1": 3, "task_2": 3, "c": [3, 5, 7, 8, 15], "solut": [3, 13], "estimate_early_stopping_sav": 3, "estim": [3, 8, 9, 10, 15], "benchmark": [3, 6, 13], "resource_sav": 3, "actual_resource_usag": 3, "usag": [3, 13], "11": 3, "axerror": 4, "hint": 4, "guidanc": 4, "remedi": 4, "axstoragewarn": 4, "axwarn": 4, "concern": 4, "datarequirederror": [4, 8], "distinguish": [4, 8], "experimentnotfounderror": 4, "objectnotfounderror": 4, "experimentnotreadyerror": 4, "exposures_unavail": 4, "queri": [4, 13], "immatur": 4, "analys": 4, "incompatibledependencyvers": 4, "imcompat": 4, "instal": 4, "misconfiguredexperi": 4, "incomplet": [4, 9, 12], "incorrect": 4, "nodataerror": 4, "code": [4, 9], "backward": [4, 8, 15], "compat": [4, 8, 9, 13, 15], "inherit": [4, 8, 13], "optimizationcomplet": 4, "hit": 4, "searchspaceexhaust": 4, "generationstrategycomplet": 4, "optimizationshouldstop": 4, "global": [4, 5, 13, 15], "algorithm": [4, 8, 9], "dedupl": [4, 8, 9], "unsupportederror": 4, "unsupport": [4, 8, 15], "made": [4, 8, 9], "seem": [4, 8], "notimplementederror": 4, "nie": 4, "offici": 4, "intent": [4, 12, 13], "perman": 4, "lack": 4, "unsupportedploterror": 4, "userinputerror": 4, "invalid": 4, "data_provid": 4, "dataprovidererror": 4, "data_provider_error": 4, "dataprovid": 4, "section": 4, "friendli": [4, 15], "missingdataerror": 4, "missing_trial_index": 4, "generationstrategymisconfiguredexcept": 4, "error_info": 4, "generationstrategyrepeatedpoint": [4, 8], "repeatedli": [4, 12], "maxparallelismreachedexcept": 4, "model_nam": [4, 8], "num_run": [4, 15], "step_index": 4, "node_nam": [4, 8], "cvnotsupportederror": 4, "cross": [4, 9, 10], "modelerror": 4, "immutabilityerror": 4, "incorrectdbconfigurationerror": 4, "engin": [4, 9, 13], "session": [4, 13], "setup": [4, 8, 15], "incorrectli": 4, "connect": [4, 13], "jsondecodeerror": 4, "json": [4, 6, 8, 9, 12, 15], "decod": [4, 15], "jsonencodeerror": 4, "sqadecodeerror": [4, 13], "sqa": [4, 13, 15], "sqaencodeerror": 4, "baseglobalstoppingstrategi": [5, 12, 15], "min_trial": [5, 15], "inactive_when_pending_tri": 5, "overal": 5, "optimz": [5, 9], "altogeth": 5, "margin": [5, 8, 9, 15], "gain": 5, "justifi": 5, "cost": [5, 9], "should_stop_optim": 5, "declar": [5, 11], "window_s": 5, "improvement_bar": 5, "signific": 5, "interquartil": 5, "iqr": 5, "seen": [5, 8], "far": [5, 12], "moo": [5, 8, 9, 11], "ago": 5, "constraint_satisfact": 5, "iff": [5, 8], "ax": 6, "constant": [6, 8, 9], "problem": [6, 8, 9, 12, 13], "branin": [6, 13], "chemistri": [6, 13], "hartmann6": [6, 13, 15], "jenatton": [6, 13], "l2": 6, "norm": [6, 9], "noisi": [6, 8, 9, 15], "sklearn": [6, 13], "tensorboard": 6, "torchx": 6, "render": 6, "singlerunningtrialmixin": 6, "synthet": [6, 13], "backend": [6, 7], "client": 6, "interact": [6, 10], "identif": 6, "withdbsettingsbas": 6, "earlystop": 6, "sqlalchemi": 6, "mysql": 6, "sqlite": 6, "telemetri": 6, "flake8": 6, "plugin": 6, "notebook": [6, 8, 10], "sensit": [6, 8, 10], "stat": [6, 8], "page": 6, "botorch_test_problem": [7, 11, 13], "botorchtestproblemmetr": [7, 13], "noise_sd": [7, 15], "retriv": 7, "botorchtestproblemrunn": [7, 11, 13], "tensor": [7, 8, 9, 10, 11, 12, 13, 15], "augmentedbraninmetr": [7, 13, 15], "param_nam": [7, 8, 10, 15], "noisyfunctionmetr": [7, 13], "f": [7, 8, 9, 10, 15], "negativebraninmetr": [7, 13], "branin_map": [7, 13], "braninfidelitymapmetr": 7, "noisyfunctionmapmetr": [7, 15], "branintimestampmapmetr": [7, 13, 15], "rate": [7, 9, 12, 15], "cache_evalu": [7, 15], "interv": [7, 8, 9, 10, 12, 13, 15], "yield": [7, 8], "chemic": 7, "reaction": 7, "perera2018": 7, "perera": 7, "j": [7, 8, 9, 10, 12, 15], "tucker": 7, "brahmbhatt": 7, "helal": 7, "chong": 7, "farrel": 7, "p": [7, 8, 9, 10], "richardson": 7, "sach": 7, "platform": 7, "nanomol": 7, "screen": 7, "micromol": 7, "synthesi": 7, "flow": 7, "scienc": 7, "26": 7, "2018": 7, "shields2021": 7, "shield": 7, "steven": 7, "li": 7, "et": [7, 9, 15], "al": [7, 9, 15], "tool": 7, "natur": [7, 8], "590": 7, "89": 7, "96": [7, 9], "2021": [7, 9, 15], "suzuki": 7, "involv": [7, 8, 9, 10], "solvent": 7, "ligand": 7, "miyaura": 7, "coupl": [7, 8, 11, 13], "carbon": 7, "bond": 7, "_": [7, 15], "direct_aryl": 7, "temperatur": 7, "concentr": [7, 9], "aryl": 7, "chemistrydata": 7, "objective_dict": 7, "tparamvalu": [7, 8], "chemistrymetr": [7, 13], "noiseless": [7, 9], "problem_typ": 7, "chemistryproblemtyp": [7, 13], "tabul": 7, "sume": 7, "gaussian": [7, 8, 9], "ml": 7, "job": [7, 11], "abstractcurvemetr": 7, "curve_nam": 7, "cumulative_best": 7, "smoothing_window": 7, "mapmetr": [7, 13], "get_curves_from_id": 7, "id": [7, 13, 15], "omit": [7, 9, 11, 15], "slow": [7, 15], "loss": [7, 15], "training_row": 7, "200": [7, 9], "get_df_from_curve_seri": 7, "all_curve_seri": 7, "trial_idx_to_id": 7, "get_ids_from_tri": 7, "abstractscalarizedcurvemetr": 7, "coeffici": [7, 8, 9, 15], "offset": [7, 15], "scalarized_curv": 7, "sum_i": [7, 8, 9], "get_df_from_scalarized_curve_seri": 7, "dict_lookup": [7, 13], "dictlookupmetr": [7, 13, 15], "lookup_dict": 7, "mean_sd": 7, "factorialmetr": [7, 13, 15], "batch_siz": [7, 12, 13, 15], "10000": [7, 8, 9, 15], "noise_var": 7, "augmentedhartmann6metr": [7, 13, 15], "hartmann6metr": [7, 13, 15], "jenattonmetr": [7, 13], "l2norm": [7, 13], "l2normmetr": [7, 13], "noisy_funct": [7, 13], "genericnoisyfunctionmetr": 7, "noisy_function_map": 7, "sklearndataset": [7, 13], "boston": 7, "cancer": 7, "sklearnmetr": [7, 13], "model_typ": 7, "sklearnmodeltyp": [7, 13], "rf": 7, "observed_nois": 7, "num_fold": 7, "fold": [7, 8, 9], "score": 7, "classif": [7, 15], "regress": 7, "hidden_layer_s": 7, "hidden": 7, "num_hidden_lay": 7, "nn": [7, 13, 15], "train_ev": 7, "averag": [7, 8, 15], "cv": [7, 8, 10], "se": [7, 10, 15], "nan": [7, 8, 9, 15], "tensorboardcurvemetr": 7, "curvemetr": 7, "path": [7, 9, 13, 15], "posix": 7, "locat": [7, 9, 15], "directori": [7, 9, 15], "tag": [7, 15], "get_tb_from_posix": 7, "torchxmetr": 7, "appmetr": 7, "app": 7, "tracker": [7, 11], "fsspecresulttrack": 7, "tracker_bas": [7, 11], "mean_valu": 7, "sem_valu": 7, "generationnod": [8, 13, 15], "generationstrategyinterfac": [8, 15], "enabl": [8, 9, 13], "throughout": 8, "subsequ": 8, "trials_per_model": 8, "conceptu": 8, "graph": [8, 15], "transitioncriterion": [8, 13], "edg": 8, "flexibl": [8, 13], "notabl": 8, "generaiton": 8, "clone_reset": [8, 9], "current_generator_run_limit": 8, "move": [8, 9], "next": 8, "safe": 8, "pick": [8, 9], "Then": 8, "now": [8, 9, 15], "becom": [8, 9], "current_nod": 8, "current_node_nam": 8, "current_step": 8, "current_step_index": 8, "newer": [8, 15], "surfac": 8, "propag": [8, 9], "model_gen_kwarg": [8, 9], "compli": 8, "develop": 8, "pleas": 8, "is_node_bas": 8, "logic": [8, 9, 13], "model_transit": 8, "optimization_complet": 8, "aepsych": 8, "trials_as_df": 8, "put": [8, 9, 15], "frame": [8, 10], "easi": [8, 14], "view": [8, 15], "0_0": [8, 10], "9": 8, "17": 8, "uses_non_registered_model": 8, "step_based_gs_onli": 8, "mainli": [8, 9, 15], "older": [8, 15], "generation_nod": [8, 13], "model_spec": [8, 13], "best_model_selector": 8, "bestmodelselector": 8, "should_dedupl": 8, "transition_criteria": 8, "gen_unlimited_tri": 8, "capabl": 8, "spec": [8, 10, 11, 13], "hood": 8, "propos": 8, "reject": [8, 9], "discard": [8, 15], "entir": [8, 13, 15], "converg": 8, "condit": [8, 9, 15], "met": 8, "is_met": 8, "evaluatetru": 8, "realli": 8, "simplifi": 8, "focu": [8, 10], "cv_result": [8, 10], "cvresult": [8, 10], "model_spec_to_gen_from": 8, "conveni": [8, 9], "diagnost": [8, 9], "local": [8, 11, 15], "preced": 8, "fitted_model": 8, "fixed_featur": [8, 9, 10, 12, 15], "max_gen_draws_for_dedupl": 8, "arms_by_signature_for_dedupl": 8, "_pick_fitted_model_to_gen_from": 8, "alongsid": [8, 12], "nteger": 8, "backpoint": 8, "generator_run_limit": 8, "supress_generation_error": 8, "trialbasedcriterion": 8, "model_cv_kwarg": 8, "model_enum": 8, "modelregistrybas": [8, 12, 13], "_model_spec_to_gen_from": 8, "model_to_gen_from_nam": 8, "should_transition_to_next_nod": 8, "raise_data_required_error": 8, "transitioncriteria": [8, 13], "trials_from_nod": 8, "completion_criteria": 8, "transition_criterion": [8, 13], "min_trials_observ": 8, "use_upd": 8, "enforce_num_tri": 8, "One": [8, 10], "what": [8, 9, 13, 15], "proce": 8, "resum": [8, 13], "interrupt": [8, 13], "min_trials_": 8, "maxparallelismreach": 8, "deprec": [8, 9, 15], "enforc": [8, 12], "exceed": [8, 12], "num_": 8, "delai": 8, "proceed": [8, 9], "get_sobol": 8, "snapshot": 8, "reassign": 8, "criterion": [8, 12, 13], "automodul": 8, "undoc": 8, "sampler": [8, 15], "gp": [8, 9, 10], "ei": [8, 9], "thompson": [8, 15], "reinstanti": [8, 13], "get_model_from_generator_run": 8, "instrument": [8, 13], "__call__": [8, 9], "modelsetup": 8, "model_bridge_class": 8, "model_class": [8, 13, 15], "view_default": 8, "eas": 8, "environ": [8, 15], "view_kwarg": 8, "annot": 8, "bridge_class": 8, "default_model_kwarg": 8, "standard_bridge_kwarg": 8, "not_saved_model_kwarg": 8, "quasirandom": 8, "alebo_initi": 8, "botorch_modular": [8, 13], "bo_mix": 8, "context_sacbo": 8, "contextual_sacbo": 8, "empirical_bayes_thompson": 8, "eb": 8, "fullybayesian": 8, "fullybayesianmoo": 8, "fullybayesianmoo_mtgp": 8, "fullybayesian_mtgp": 8, "gpkg": 8, "gpme": 8, "legacy_botorch": 8, "saasbo": [8, 9], "saas_mtgp": 8, "st_mtgp": 8, "st_mtgp_legaci": 8, "st_mtgp_nehvi": 8, "uniform": [8, 11], "models_enum": [8, 12], "after_gen": 8, "oppos": [8, 11, 15], "recreat": [8, 13], "TO": 8, "default_ehvi_batch_limit": 8, "composit": 8, "abl": [8, 12], "deleg": [8, 11], "get_gpei": 8, "dtype": [8, 9, 15], "devic": [8, 9, 15], "cpu": 8, "get_gpkg": 8, "cost_intercept": [8, 9, 15], "01": 8, "removefix": 8, "orderedchoiceencod": 8, "onehot": 8, "inttofloat": 8, "unitx": 8, "standardize_i": 8, "standardizei": 8, "transform_config": 8, "acquisitionfunct": [8, 9, 13, 15], "winsorization_config": [8, 13], "winsorizationconfig": [8, 9, 13, 15], "kg": 8, "get_gpm": 8, "me": 8, "get_moo_ehvi": 8, "ehvi": 8, "get_moo_nehvi": 8, "status_quo_featur": 8, "use_input_warp": [8, 9], "qnehvi": [8, 9], "get_moo_parego": 8, "parego": 8, "qparego": 8, "augment": [8, 15], "chebyshev": [8, 10], "convex": 8, "pareto": [8, 9, 12], "frontier": [8, 9, 10, 12], "get_moo_r": 8, "choos": [8, 9, 10], "hull": 8, "get_mtgp_legaci": 8, "mtgp": 8, "get_mtgp_nehvi": 8, "get_mtgp_parego": 8, "get_botorch": 8, "model_constructor": [8, 9], "get_and_fit_model": [8, 9], "model_predictor": [8, 9], "predict_from_model": [8, 9], "acqf_constructor": [8, 9], "botorch_default": 8, "tacqfconstructor": [8, 9], "get_qlognei": [8, 9], "acqf_optim": [8, 9], "scipy_optim": [8, 9], "refit_on_cv": [8, 9], "refit_on_upd": [8, 9, 15], "botorchmodel": [8, 9, 13, 15], "get_empirical_bayes_thompson": 8, "min_weight": [8, 9], "uniform_weight": [8, 9], "discretemodelbridg": 8, "empir": [8, 9, 15], "bay": [8, 9, 15], "get_factori": 8, "init_posit": [8, 9], "fallback_to_sample_polytop": [8, 9], "quasi": 8, "get_thompson": 8, "get_uniform": 8, "uniformgener": [8, 9], "factoryfunctionmodelspec": 8, "_fitted_model": 8, "_cv_result": 8, "_diagnost": 8, "cvdiagnost": 8, "_last_fit_arg_id": 8, "factory_funct": 8, "tmodelfactori": 8, "singleton": [8, 9], "cross_valid": [8, 9], "compute_diagnost": [8, 9], "assert": [8, 15], "modelspecjsonencod": 8, "skipkei": 8, "ensure_ascii": 8, "check_circular": 8, "allow_nan": 8, "sort_kei": 8, "indent": 8, "jsonencod": 8, "__repr__": 8, "o": [8, 9], "serializ": [8, 13], "typeerror": 8, "def": [8, 9, 11, 15], "let": 8, "basegenarg": 8, "genresult": 8, "best_observation_featur": 8, "status_quo_nam": [8, 10, 15], "fit_out_of_design": 8, "fit_tracking_metr": 8, "fit_on_init": 8, "assess": 8, "consum": [8, 13], "sent": 8, "receiv": [8, 9, 15], "cv_training_data": 8, "cv_test_point": 8, "feature_import": [8, 9, 10], "approach": [8, 9], "analysi": [8, 10], "invers": [8, 15], "lengthscal": [8, 9], "model_gen_opt": [8, 9], "torchoptconfig": [8, 9], "model_spac": 8, "othweris": 8, "metric1": [8, 10], "metric2": 8, "status_quo_data_by_tri": 8, "training_in_design": 8, "transform_observation_featur": [8, 15], "transform_observ": 8, "new_data": 8, "scratch": [8, 9], "clamp_observation_featur": 8, "gen_arm": 8, "unwrap_observation_data": 8, "discretemodel": [8, 9], "pure": [8, 15], "randommodel": [8, 9], "awkward": 8, "init": [8, 9, 13], "torchmodel": [8, 9], "torch_dtyp": 8, "torch_devic": 8, "default_model_gen_opt": 8, "evaluate_acquisition_funct": [8, 9], "acq_opt": [8, 9], "joint": [8, 9], "contruct": [8, 9], "infer_objective_threshold": [8, 9], "nadir": [8, 9, 10, 12], "back": [8, 9, 10, 12, 13], "model_best_point": 8, "validate_optimization_config": 8, "pairwisemodelbridg": 8, "fit_time_since_gen": 8, "map_torch": 8, "map_data_limit_rows_per_metr": 8, "map_data_limit_rows_per_group": 8, "retain": 8, "surrog": [8, 13, 15], "parameters_with_map_kei": 8, "array_to_observation_data": 8, "check_has_multi_objective_and_data": 8, "extract_objective_threshold": 8, "Will": [8, 10], "extract_objective_weight": 8, "give": [8, 9, 15], "multipli": [8, 9], "extract_outcome_constraint": 8, "extract_parameter_constraint": 8, "riskmeasuremcobject": [8, 9], "extract_robust_digest": 8, "digest": 8, "regard": 8, "choiceencod": 8, "feasible_hypervolum": 8, "get_fixed_featur": 8, "reformat": 8, "get_fixed_features_from_experi": 8, "get_pareto_frontier_and_config": 8, "modelbridge_modul": [8, 15], "trefpoint": 8, "use_model_predict": [8, 12], "transform_outcomes_and_config": 8, "frontier_evalu": [8, 9], "front": [8, 10, 12, 15], "region": [8, 10], "interest": [8, 10], "four": 8, "frontier_observ": 8, "obj_w": 8, "obj_t": 8, "selected_metr": 8, "observation_data_to_arrai": 8, "observation_features_to_arrai": 8, "obsf": 8, "observed_hypervolum": 8, "hyperrectangl": [8, 9], "observed_pareto_fronti": 8, "pareto_fronti": [8, 9], "descend": [8, 13, 15], "parse_observation_featur": 8, "candidate_metadata": [8, 9], "np": 8, "pending_observations_as_array_list": 8, "outcome_nam": [8, 9, 15], "predicted_hypervolum": 8, "posterior": [8, 9, 10, 12, 15], "predicted_pareto_fronti": 8, "lie": [8, 9, 10], "process_contextual_dataset": 8, "parameter_decomposit": 8, "metric_decomposit": 8, "contextualdataset": 8, "context": [8, 9, 10, 12, 15], "context1": [8, 9], "p1_c1": [8, 9], "p2_c1": [8, 9], "context2": [8, 9], "p1_c2": [8, 9], "p2_c2": [8, 9], "breakdown": 8, "m1_c1": 8, "m2_c1": 8, "m3_c1": 8, "m1_c2": 8, "m2_c2": 8, "m3_c2": 8, "transform_callback": 8, "closur": [8, 9], "trip": [8, 9], "de": 8, "revers": [8, 10, 13, 15], "_model_gen": 8, "roundtrip": 8, "validate_and_apply_final_transform": 8, "linear_constraint": [8, 9], "final_transform": 8, "built": [8, 13], "prediction_util": 8, "predict_at_point": 8, "scalarized_metric_config": [8, 10], "deviat": [8, 15], "agg": [8, 10], "metric1_c1": [8, 10], "metric1_c2": [8, 10], "predict_by_featur": 8, "label_to_feature_dict": 8, "label": [8, 9, 10, 13], "assessmodelfitresult": 8, "good_fit_metrics_to_fisher_scor": 8, "bad_fit_metrics_to_fisher_scor": 8, "best_diagnost": 8, "callableenum": 8, "diagnosticcriterion": 8, "min": [8, 9, 15], "functool": 8, "amin": 8, "metricaggreg": 8, "singlediagnosticbestmodelselector": 8, "metric_aggreg": 8, "fisher": [8, 10], "exact": [8, 9, 10, 15], "best_diagnostic_index": 8, "assess_model_fit": 8, "significance_level": 8, "bad": 8, "ci": [8, 10], "width": [8, 15], "mape": 8, "percentag": [8, 10, 15], "wmape": 8, "smallest": [8, 12], "max": [8, 9, 12, 15], "correl": 8, "pearson": 8, "rank": [8, 9], "spearman": 8, "half": 8, "top": [8, 9], "low": [8, 9, 11], "abil": 8, "chanc": 8, "too": 8, "compute_model_fit_metrics_from_modelbridg": 8, "model_bridg": [8, 15], "fit_metrics_dict": [8, 15], "modelfitmetricprotocol": [8, 15], "diagnos": 8, "calcualt": 8, "imaginari": 8, "automl": [8, 9], "hyper": [8, 12], "model_fit_dict": 8, "exp": [8, 15], "coefficient_of_determin": [8, 15], "test_selector": 8, "repeat": [8, 9, 10, 15], "lambda": 8, "ob": 8, "leav": [8, 9, 15], "qualiti": 8, "invert": [8, 9], "logi": 8, "outlier": 8, "cross_validate_by_tri": 8, "launch": [8, 9], "has_good_opt_config_model_fit": 8, "assess_model_fit_result": 8, "criteria": [8, 12], "incl": 8, "dispatch_util": 8, "calculate_num_initialization_tri": 8, "num_tunable_paramet": 8, "use_batch_tri": 8, "5th": 8, "twice": [8, 9], "tunabl": [8, 9], "choose_generation_strategi": 8, "enforce_sequential_optim": 8, "no_winsor": 8, "derelativize_with_raw_status_quo": 8, "no_bayesian_optim": 8, "num_initialization_tri": [8, 14], "num_completed_initialization_tri": 8, "max_initialization_tri": 8, "min_sobol_trials_observ": 8, "max_parallelism_cap": 8, "max_parallelism_overrid": 8, "use_saasbo": 8, "verbos": [8, 9, 13, 15], "disable_progbar": [8, 9], "jit_compil": [8, 9], "suggested_model_overrid": 8, "bayesopt": 8, "pytorch": [8, 9], "sped": 8, "gpu": 8, "explicit": [8, 13], "upper_quantile_margin": [8, 9], "lower_quantile_margin": [8, 9], "unset": 8, "randomli": [8, 15], "cap": [8, 15], "initialization_tri": 8, "ceil": 8, "hard": [8, 15], "overload": 8, "chosen": 8, "Be": 8, "awar": [8, 9], "saa": [8, 9], "bar": [8, 10, 11], "disable_probar": 8, "jit": 8, "compil": 8, "pyro": [8, 9], "_experi": [8, 15], "is_saasbo": 8, "tconfig": [8, 15], "potenti": [8, 9, 15], "ident": [8, 13, 15], "noth": [8, 9, 15], "effort": 8, "transform_optimization_config": [8, 15], "privat": [8, 15], "_transform_search_spac": [8, 15], "_transform_parameter_distribut": [8, 15], "untransform_observation_featur": [8, 15], "untransform_observ": 8, "untransform_outcome_constraint": 8, "modifi": [8, 9, 11, 12, 15], "portion": 8, "searh": 8, "transform_": 8, "untransform_": 8, "capparamet": 8, "new_upper_range_valu": 8, "centeredunitx": 8, "target_lb": 8, "target_rang": 8, "unord": [8, 15], "n_choic": 8, "onto": [8, 9, 11], "taskencod": 8, "contigu": [8, 15], "encoded_paramet": 8, "encoded_parameters_invers": 8, "closestlookupdict": 8, "transform_choice_valu": 8, "rescal": 8, "convertmetricnam": 8, "offlin": [8, 15], "onlin": [8, 15], "turn": 8, "off": [8, 9, 10], "perform_untransform": 8, "convert_mt_observ": 8, "mt": 8, "tconfig_from_mt_experi": 8, "plug": [8, 15], "use_raw_status_quo": 8, "intrangetochoic": 8, "randomized_round": 8, "min_choic": 8, "varianc": [8, 9, 15], "ivw_metric_merg": 8, "obsd": 8, "conflicting_noiseless": [8, 15], "correctli": [8, 9, 13], "ybar1": 8, "w_i": 8, "y_i": [8, 15], "ybar2": 8, "sum_j": 8, "w_j": 8, "y_j": 8, "infin": 8, "inversegaussiancdfi": 8, "base_modelbridg": 8, "cdf": 8, "match_ci_width": 8, "procedur": 8, "delta": [8, 15], "lognorm_to_norm": 8, "mu_ln": 8, "cov_ln": 8, "mvn": [8, 9], "mu_n": 8, "cov_n": 8, "cov_n_": 8, "ij": 8, "cov_ln_": 8, "mu_ln_": 8, "mu_n_": 8, "ii": 8, "95": [8, 9], "norm_to_lognorm": 8, "suffici": 8, "jj": 8, "transfor": 8, "mapunitx": 8, "undergo": 8, "mergerepeatedmeasur": 8, "intention": 8, "stationar": 8, "metricsastask": 8, "metric_task_map": 8, "metric3": 8, "hot": [8, 9], "strict": 8, "With": [8, 9, 12, 15], "restor": [8, 9, 13], "ti": [8, 13], "broken": 8, "onehotencod": 8, "inverse_transform": 8, "encoded_label": 8, "transorm": 8, "percentilei": 8, "powertransformi": 8, "yeo": 8, "johnson": 8, "www": [8, 15], "umn": 8, "edu": 8, "arc": 8, "yjpower": 8, "pdf": 8, "posit": [8, 9, 10, 15], "neg": [8, 9, 10, 15], "quit": [8, 9], "sens": [8, 12, 15], "bit": 8, "remain": [8, 9, 12, 13, 15], "clip": 8, "imag": 8, "clip_mean": 8, "contains_constrained_integ": 8, "transform_paramet": 8, "randomized_onehot_round": 8, "zero": [8, 15], "randomized_round_paramet": 8, "strict_onehot_round": 8, "searchspacetochoic": 8, "thompsonsampl": [8, 9], "use_ord": 8, "compute_standardization_paramet": 8, "defaultdict": 8, "std": [8, 15], "stratifiedstandardizei": 8, "stratifi": 8, "exactli": [8, 11, 13], "stratif": 8, "trialastask": 8, "trial_param1": 8, "level1": 8, "level2": 8, "trial_level_map": 8, "lowest": 8, "target_tri": 8, "l": 8, "x_tilde_i": 8, "x_i": 8, "wtx": 8, "gtx_tild": 8, "h": [8, 9], "g_i": 8, "wtl": 8, "closest": 8, "construct_new_search_spac": 8, "derelativize_optimization_config_with_raw_status_quo": 8, "get_data": [8, 15], "match_ci_width_trunc": 8, "001": [8, 15], "lower_bound": 8, "upper_bound": 8, "lai": 8, "succe": 8, "30": 8, "wherea": [8, 13], "metric_1": [8, 10], "metric_2": [8, 10], "won": [8, 12], "cutoff": 8, "auto_wins_quantil": 8, "quantil": [8, 9], "boundari": 8, "lower_boundari": [8, 9], "upper_boundari": [8, 9], "discourag": [8, 15], "strongli": 8, "encourag": 8, "baserelativ": 8, "opt": 8, "control_as_const": [8, 15], "relativizewithconstantcontrol": 8, "missing_status_quo_error": 8, "opt_config": 8, "unrelativ": [8, 15], "statstool": 8, "alebostrategi": 8, "init_s": 8, "random_kwarg": 8, "gp_kwarg": 8, "gp_gen_kwarg": 8, "embed": [8, 9], "bo": 8, "project": [8, 9, 15], "dimension": [8, 9, 14, 15], "gen_project": 8, "get_alebo": 8, "get_aleboiniti": 8, "rembo": 8, "hesbostrategi": 8, "init_per_proj": 8, "hesbo": 8, "rembostrategi": 8, "get_project": 8, "box": [8, 9], "As": [8, 9], "paper": [8, 9], "rotat": 8, "get_rembo": 8, "initial_x_d": [8, 9], "bounds_d": [8, 9], "get_rembo_initi": 8, "remboiniti": [8, 9], "best_point": [9, 12], "vari": 9, "share": 9, "deserialize_st": 9, "serialized_st": 9, "serialize_st": 9, "raw_stat": 9, "_get_stat": 9, "readi": 9, "access": 9, "parameter_valu": 9, "xs_train": 9, "ys_train": 9, "yvars_train": 9, "x_test": 9, "k_i": 9, "feature_index": 9, "torchgenresult": 9, "search_space_digest": 9, "torch_opt_config": 9, "compactli": 9, "th": 9, "rounding_func": 9, "opt_config_metr": 9, "is_moo": 9, "domin": [9, 15], "commonli": [9, 15], "optimizer_kwarg": [9, 15], "often": 9, "mimic": 9, "optimize_acqf": 9, "num_restart": [9, 15], "sequenti": [9, 12, 15], "batch_limit": 9, "maxit": 9, "torchmodellik": 9, "stand": 9, "add_fixed_featur": 9, "tunable_point": 9, "tunable_feature_indic": 9, "as_arrai": 9, "mix": 9, "best_in_sample_point": 9, "posterior_objective_mean": 9, "baselin": [9, 15], "prob": 9, "best_point_method": 9, "max_util": 9, "feasible_threshold": 9, "utility_baselin": 9, "probability_threshold": 9, "feasibility_mc_sampl": 9, "mc": 9, "10k": 9, "best_observed_point": 9, "check_dupl": 9, "check_param_constraint": 9, "enumerate_discrete_combin": 9, "filter_constraints_and_fixed_featur": 9, "get_observ": [9, 15], "mk_discrete_choic": 9, "ssd": 9, "rejection_sampl": 9, "gen_unconstrain": 9, "max_draw": 9, "existing_point": 9, "unconstrain": 9, "_gen_unconstrain": 9, "duplic": [9, 13, 15], "attemp": 9, "draw": [9, 10], "validate_bound": 9, "fixed_feature_indic": 9, "winsor": [9, 13], "increas": [9, 12, 15], "decreas": [9, 10, 15], "80th": 9, "lesser": 9, "larger": [9, 15], "unaffect": 9, "empiricalbayesthompsonsampl": 9, "jame": [9, 15], "stein": [9, 15], "fullfactorialgener": 9, "max_cardin": 9, "check_cardin": 9, "suppress": [9, 12, 15], "proport": [9, 15], "winner": 9, "mont": 9, "carlo": 9, "generated_point": 9, "skeleton": 9, "_gen_sampl": 9, "altern": 9, "hitandrunpolytopesampl": 9, "permut": 9, "sobolengin": 9, "init_engin": 9, "n_tunable_featur": 9, "aleboiniti": 9, "nsamp": 9, "init_bound": 9, "16": 9, "subspac": 9, "pseudoinvers": 9, "thrown": 9, "constrict": 9, "halv": 9, "small": [9, 15], "few": 9, "dxd": 9, "clamp": 9, "project_up": 9, "laplace_nsamp": 9, "25": [9, 15], "fit_restart": 9, "pinvers": 9, "hyperparamet": 9, "restart": 9, "polytop": 9, "raw_sampl": [9, 15], "state_dict": [9, 15], "gpytorchmodel": 9, "alebogp": 9, "train_x": 9, "train_i": 9, "train_yvar": 9, "singletaskgp": [9, 13], "mahalanobi": 9, "alebokernel": 9, "scalekernel": 9, "mode": [9, 10, 15], "integr": 9, "moment": 9, "output_indic": 9, "observation_nois": 9, "posterior_transform": 9, "posteriortransform": 9, "gpytorchposterior": 9, "batch_shap": 9, "q": 9, "jointli": 9, "likelihood": [9, 13], "ard": 9, "rbf": [9, 15], "distanc": 9, "choleski": 9, "decomposit": 9, "x1": [9, 11, 15], "x2": [9, 11], "diag": 9, "last_dim_is_batch": 9, "alebo_acqf_optim": 9, "acq_funct": 9, "inequality_constraint": 9, "begin": [9, 12], "ei_or_nei": 9, "modellistgp": [9, 13], "x_observ": 9, "x_pend": 9, "analyt": [9, 13, 15], "nei": 9, "extract_map_statedict": 9, "m_b": 9, "num_output": 9, "statedict": 9, "get_batch_model": 9, "uvec_batch": 9, "mean_constant_batch": 9, "output_scale_batch": 9, "uvec": 9, "get_fitted_model": 9, "init_state_dict": 9, "laplac": 9, "get_map_model": 9, "exactmarginalloglikelihood": [9, 13], "laplace_sample_u": 9, "mll": [9, 13], "hessian": 9, "finit": 9, "autograd": 9, "gradient": [9, 15], "p_map": 9, "inv": 9, "prepend": [9, 15], "module_to_arrai": 9, "torchattr": 9, "requires_grad": 9, "worth": 9, "syntax": 9, "named_parameters_and_constraint": 9, "n_param": 9, "parameter_arrai": 9, "property_dict": 9, "bounds_out": 9, "set_params_with_arrai": 9, "tmodul": 9, "best_point_recommend": 9, "recommend_best_observed_point": 9, "warm_start_refit": [9, 15], "use_loocv_pseudo_likelihood": 9, "customiz": 9, "qlognei": 9, "refit": 9, "covar_module_prior": 9, "lengthscale_prior": 9, "gammaprior": [9, 13, 15], "lkjcovarianceprior": 9, "sd_prior": 9, "nonneg": 9, "task_covar_prior": 9, "eta": 9, "lkj": 9, "craft": 9, "equality_constraint": 9, "callback": 9, "target_fidel": 9, "get_feature_importances_from_botorch_model": 9, "modulelist": 9, "get_rounding_func": 9, "get_nei": 9, "qnei": 9, "get_qei": 9, "get_acqf": 9, "acquisition_function_nam": 9, "wrapper": [9, 10, 12, 15], "solv": 9, "wrap": [9, 15], "qei": 9, "acqf": 9, "monte_carlo": [9, 13], "qexpectedimprov": [9, 13], "refit_model": 9, "multitask_gp_rank": 9, "statement": [9, 12], "line": [9, 13, 15], "137": 9, "modular": 9, "_get_model": 9, "bodi": [9, 15], "legaci": 9, "get_qlogei": 9, "qlogei": 9, "get_warping_transform": 9, "warp": [9, 13], "recommend_best_out_of_sample_point": 9, "un": [9, 10], "joint_optim": 9, "adpat": 9, "rh": 9, "knowledgegradi": 9, "linear_trunc": 9, "knowledg": 9, "shot": 9, "intercept": 9, "affin": 9, "downsampl": [9, 15], "exponenti": 9, "decai": 9, "lineartruncatedfidelitykernel": 9, "maxvalueentropysearch": 9, "entropi": 9, "multiobjectivebotorchmodel": 9, "get_qlognehvi": 9, "pareto_frontier_evalu": 9, "sign": [9, 10, 15], "daulton2020qehvi": 9, "differenti": 9, "33": 9, "2020": 9, "daulton2021nehvi": 9, "34": [9, 15], "ament2023logei": 9, "ament": 9, "unexpect": [9, 15], "36": 9, "2023": 9, "get_ehvi": 9, "mc_sampl": 9, "128": [9, 10, 15], "alpha": [9, 10], "qexpectedhypervolumeimprov": [9, 13], "acqusit": 9, "submit": [9, 11], "512": 9, "partit": [9, 15], "complex": [9, 15], "get_nehvi": 9, "prune_baselin": 9, "marginalize_dim": 9, "cache_root": 9, "qnoisyexpectedhypervolumeimprov": [9, 13], "prune": 9, "get_default_frontier_evalu": 9, "get_qlogehvi": 9, "qlogexpectedhypervolumeimprov": [9, 13], "qlognoisyexpectedhypervolumeimprov": [9, 13], "get_weighted_mc_objective_and_objective_threshold": 9, "weightedmcmultioutputobject": 9, "subset_idc": 9, "relativ": [9, 10, 15], "multi_object": [9, 13, 15], "infer_reference_point": [9, 10], "matter": [9, 15], "unobserv": 9, "scipy_optimizer_list": 9, "acq_function_list": 9, "adaptor": 9, "ith": 9, "acquisition_funct": 9, "botorch_acqf_class": 9, "subcompon": 9, "acquistitionfunct": 9, "default_botorch_acqf_class": 9, "compute_model_depend": 9, "super": 9, "multifidelityknowledgegradi": 9, "broadcast": 9, "get_botorch_objective_and_transform": 9, "mcacquisitionobject": 9, "optimizer_opt": 9, "post": 9, "post_processing_func": 9, "mbm": 9, "max_featur": 9, "sqrt": 9, "num_tre": 9, "500": 9, "forest": 9, "bootstrap": [9, 15], "uncertainti": [9, 15], "breiman": 9, "surrogate_spec": 9, "surrogatespec": [9, 13, 15], "acquisition_class": 9, "acquisition_opt": 9, "auto": 9, "liu": 9, "sole": 9, "unus": 9, "reoptim": 9, "refit_on_": 9, "n_i": 9, "accessor": 9, "unchang": [9, 15], "additional_model_input": 9, "caveat": 9, "modellist": 9, "base_kernel": 9, "only_surrog": [9, 15], "outcomes_by_surrogate_label": 9, "output_ord": 9, "stitch": 9, "predict_from_surrog": 9, "surrogate_label": 9, "botorch_model_class": 9, "botorch_model_kwarg": 9, "mll_class": 9, "marginal_log_likelihood": [9, 13], "marginalloglikelihood": [9, 13, 15], "exact_marginal_log_likelihood": [9, 13], "mll_kwarg": 9, "covar_module_class": 9, "covar_module_kwarg": 9, "likelihood_class": 9, "likelihood_kwarg": 9, "input_transform_class": 9, "inputtransform": [9, 13, 15], "input_transform_opt": 9, "outcome_transform_class": 9, "outcometransform": [9, 13, 15], "outcome_transform_opt": 9, "allow_batched_model": 9, "__init__": [9, 11, 15], "respons": 9, "requisit": 9, "single_surrogate_onli": 9, "multifidelityacquisit": 9, "l1_norm_func": 9, "init_point": 9, "l1_norm": 9, "l1": 9, "genericdeterministicmodel": 9, "seboacquisit": [9, 13, 15], "sparsiti": 9, "free": 9, "l0": 9, "novel": 9, "relax": 9, "homotopi": 9, "clamp_candid": 9, "target_point": 9, "clamp_tol": 9, "tkwarg": [9, 15], "get_batch_initial_condit": 9, "x_pareto": 9, "model_opt": 9, "mll_option": 9, "covar_module_opt": 9, "likelihood_opt": 9, "chain": 9, "chainedoutcometransform": [9, 13], "chainedinputtransform": [9, 13, 15], "integer_indic": 9, "pars": [9, 10, 12], "covar_module_argpars": 9, "best_out_of_sample_point": 9, "und": 9, "some_state_dict": 9, "construct_input": 9, "training_data": 9, "check_outcome_dataset_match": 9, "exact_match": 9, "choose_botorch_acqf_class": 9, "choose_model_class": 9, "construct_acquisition_and_optimizer_opt": 9, "acqf_opt": 9, "convert_to_block_design": 9, "fit_botorch_model": 9, "get_post_processing_func": 9, "get_subset_dataset": 9, "subset_outcome_nam": 9, "subset_state_dict": 9, "submodel_index": 9, "submodel": 9, "use_model_list": 9, "scalematernkernel": 9, "ard_num_dim": 9, "outputscale_prior": 9, "lengthscale_constraint": 9, "outputscale_constraint": 9, "temporalkernel": 9, "temporal_featur": 9, "matern_ard_num_dim": 9, "temporal_lengthscale_prior": 9, "period_length_prior": 9, "fixed_period_length": 9, "temporal_lengthscale_constraint": 9, "period_length_constraint": 9, "matern": [9, 15], "tempor": 9, "dai": 9, "lceabo": 9, "cat_feature_dict": 9, "embs_feature_dict": 9, "context_weight_dict": 9, "embs_dim_list": 9, "gp_model_arg": 9, "latent": 9, "lce": 9, "train_embed": 9, "boolen": 9, "embds_feature_dict": 9, "fidelity_model_id": 9, "lceagp": [9, 13], "lcembo": 9, "context_cat_featur": 9, "context_emb_featur": 9, "modelistgp": 9, "lcem": 9, "sacbo": 9, "sacgp": 9, "structuraladditivecontextualgp": 9, "generate_model_space_decomposit": 9, "eriksson2021saasbo": 9, "jankowiak": 9, "spars": 9, "axi": [9, 10], "thirti": 9, "seventh": 9, "confer": 9, "intellig": 9, "eriksson2021na": 9, "chuang": 9, "latenc": 9, "architectur": 9, "icml": 9, "workshop": 9, "fullybayesianbotorchmodel": 9, "get_and_fit_model_mcmc": 9, "predict_from_model_mcmc": 9, "get_fully_bayesian_acqf": 9, "use_saa": 9, "256": 9, "warmup_step": 9, "thin": 9, "max_tree_depth": 9, "gp_kernel": 9, "fullybayesianbotorchmodelmixin": 9, "nut": 9, "fullybayesianmoobotorchmodel": 9, "get_fully_bayesian_acqf_nehvi": 9, "compute_dist": 9, "z": 9, "mcmc": 9, "did": 9, "matern_kernel": 9, "nu": 9, "rbf_kernel": 9, "run_infer": 9, "pyro_model": 9, "single_task_pyro_model": 9, "ep": [9, 15], "1e": [9, 15], "rbfkernel": 9, "num": 9, "load_mcmc_samples_to_model": 9, "mcmc_sampl": 9, "pyro_sample_input_warp": 9, "pyro_sample_mean": 9, "pyro_sample_nois": 9, "pyro_sample_outputscal": 9, "15": [9, 10], "pyro_sample_saas_lengthscal": 9, "get_posteriormean": 9, "posteriormean": 9, "spac": 9, "from_01": 9, "x_d01": 9, "project_down": 9, "x_d": 9, "shuffl": 9, "fast": 9, "worri": 9, "to_01": 9, "subsetmodeldata": 9, "acquisitionobject": 9, "get_out_of_sample_best_point_acqf": 9, "seed_inn": [9, 15], "qmc": [9, 15], "is_noiseless": 9, "normalize_indic": 9, "pick_best_out_of_sample_point_acqf_class": 9, "gaussianmixtureposterior": 9, "mixtur": 9, "ideal": 9, "randomize_objective_weight": 9, "random_scalarization_distribut": 9, "simplex": 9, "hyperspher": 9, "subset_model": [9, 15], "subset_output": 9, "tensor_callable_to_array_cal": 9, "tensor_func": 9, "plot_config_to_html": 10, "plot_config": [10, 15], "axplotconfig": [10, 15], "plot_module_nam": 10, "plot_resourc": 10, "axplottyp": 10, "generic_plotli": 10, "inject_help": [10, 15], "plot_typ": 10, "_axplotconfigbas": 10, "bandit_rollout": 10, "interact_contour": 10, "interact_slic": 10, "plotdata": 10, "in_sampl": 10, "plotinsamplearm": 10, "out_of_sampl": 10, "plotoutofsamplearm": 10, "y_hat": 10, "se_hat": 10, "context_stratum": 10, "plotmetr": 10, "pred": 10, "plot_bandit_rollout": 10, "generator_runs_dict": 10, "densiti": 10, "slice_valu": 10, "val": [10, 13, 15], "interact_contour_plotli": 10, "figur": 10, "plot_contour": 10, "param_x": [10, 15], "param_i": [10, 15], "plot_contour_plotli": 10, "short_nam": 10, "plot_feature_import": 10, "titl": [10, 15], "plot_feature_importance_plotli": 10, "plot_feature_importance_by_featur": [10, 15], "sensitivity_valu": [10, 15], "caption": 10, "importance_measur": 10, "label_dict": 10, "plot_feature_importance_by_feature_plotli": 10, "shown": [10, 15], "color": 10, "parameter1": 10, "value1": 10, "parameter2": 10, "value2": 10, "var": [10, 15], "short": [10, 13], "plot_feature_importance_by_metr": 10, "plot_feature_importance_by_metric_plotli": 10, "plot_relative_feature_import": 10, "plot_relative_feature_importance_plotli": 10, "stack": [10, 11, 15], "chart": 10, "marginal_effect": [10, 15], "plot_marginal_effect": 10, "awai": 10, "interact_batch_comparison": 10, "batch_x": 10, "batch_i": 10, "x_label": 10, "y_label": 10, "dropdown": 10, "bach": 10, "interact_cross_valid": 10, "show_context": 10, "autoset_axis_limit": 10, "plotli": [10, 15], "hover": 10, "real": [10, 15], "shorten": 10, "interact_cross_validation_plotli": 10, "graph_object": 10, "interact_empirical_model_valid": 10, "reli": 10, "tile_cross_valid": 10, "show_arm_details_on_hov": 10, "tile": 10, "include_measurement_error": 10, "measurement_error": 10, "displai": 10, "pareto_util": 10, "paretofrontierresult": 10, "param_dict": 10, "primary_metr": 10, "secondary_metr": 10, "absolute_metr": 10, "wrt": 10, "primari": [10, 12, 15], "NOT": [10, 11, 15], "r": [10, 15], "compute_posterior_pareto_fronti": 10, "primary_object": 10, "secondary_object": 10, "num_point": 10, "trade": 10, "augmented_chebyshev_scalar": 10, "get_observed_pareto_fronti": 10, "plu": 10, "interact_pareto_fronti": 10, "get_tensor_converter_model": 10, "thing": [10, 15], "beyond": 10, "regardless": [10, 15], "infer_reference_point_from_experi": 10, "asid": 10, "forth": 10, "to_nonrobust_search_spac": 10, "interact_fit": 10, "show_ci": 10, "arm_noun": 10, "data_selector": 10, "confid": 10, "noun": 10, "interact_fitted_plotli": 10, "lattice_multiple_metr": 10, "plot_fit": [10, 15], "custom_arm_ord": 10, "custom_arm_order_nam": 10, "plot_multiple_metr": 10, "metric_x": 10, "metric_i": 10, "rel_x": 10, "rel_i": 10, "color_paramet": 10, "color_metr": 10, "plot_objective_vs_constraint": 10, "infer_relative_constraint": 10, "tradeoff": 10, "insampl": 10, "read": [10, 13], "tile_fit": 10, "tile_observ": 10, "interact_slice_plotli": 10, "plot_slic": 10, "plot_slice_plotli": 10, "table_view": 10, "get_color": 10, "table_view_plot": 10, "use_empirical_bay": 10, "only_data_fram": 10, "0_1": 10, "coral": 10, "251": 10, "114": 10, "light_purpl": 10, "190": 10, "186": 10, "218": 10, "orang": 10, "253": 10, "180": 10, "98": 10, "pink": 10, "188": 10, "189": 10, "steelblu": 10, "177": 10, "211": 10, "teal": 10, "141": 10, "199": 10, "plotly_color_scal": 10, "list_of_rgb_tupl": 10, "rgb": 10, "break": 10, "stringifi": 10, "rgba": 10, "rgb_tupl": 10, "arm_name_to_sort_kei": 10, "suitabl": 10, "1_10": 10, "1_2": 10, "10_0": 10, "arm_name_to_tupl": 10, "axis_rang": 10, "grid": [10, 15], "is_log": 10, "build_filter_tri": 10, "keep_trial_indic": 10, "compose_annot": 10, "contour_config_to_trac": 10, "extend_rang": 10, "meaning": 10, "get_fixed_valu": 10, "get_grid_for_paramet": 10, "get_plot_data": 10, "rawdata": 10, "get_range_paramet": [10, 15], "min_num_valu": 10, "get_range_parameters_from_list": 10, "infer_is_rel": 10, "non_constraint_rel": 10, "default_rel": 10, "m_t": [10, 15], "sem_t": 10, "m_c": [10, 15], "sem_c": [10, 15], "relativize_data": [10, 15], "sd": 10, "arm_data": 10, "resize_subtitl": 10, "arr": 10, "slice_config_to_trac": 10, "arm_name_to_paramet": 10, "fit_data": 10, "setx": 10, "visibl": 10, "modified_bound": 11, "wish": 11, "recomput": 11, "evaluate_with_original_bound": 11, "test_problem": 11, "single_running_trial_mixin": 11, "mixin": [11, 12], "dummy_metadata": 11, "dummi": [11, 15], "act": 11, "shell": 11, "simulated_backend": 11, "simulatedbackendrunn": 11, "backendsimul": [11, 15], "sample_runtime_func": 11, "queu": [11, 15], "sample_runtime_unif": 11, "torchxrunn": 11, "appdef": 11, "component_const_param": 11, "cfg": 11, "submiss": 11, "trial_idx": 11, "url": [11, 13], "dir": 11, "trainer_compon": 11, "x3": [11, 12], "x4": [11, 12], "breviti": 11, "And": 11, "s3": 11, "foo": 11, "barbaz": 11, "get_runn": 11, "kill": 11, "managed_loop": 12, "trialtyp": [12, 13], "tolerated_trial_failure_r": 12, "min_failed_trials_for_failure_rate_check": 12, "log_filepath": 12, "logging_level": 12, "ttl_seconds_for_tri": 12, "init_seconds_between_pol": 12, "min_seconds_before_pol": 12, "seconds_between_polls_backoff_factor": 12, "run_trials_in_batch": 12, "debug_log_run_metadata": 12, "early_stopping_strategi": [12, 15], "global_stopping_strategi": 12, "global_stop": [12, 13], "suppress_storage_errors_after_retri": 12, "wait_for_running_tri": 12, "fetch_kwarg": 12, "validate_metr": 12, "status_quo_weight": 12, "enforce_immutable_search_space_and_opt_config": 12, "guid": 12, "influenc": [12, 15], "benefici": 12, "exhaust": [12, 15], "run_all_tri": 12, "run_n_trial": 12, "whole": 12, "ratio": [12, 15], "exce": 12, "write": [12, 13, 15], "wait_for_completed_trials_and_report_result": 12, "reset": [12, 15], "introduc": 12, "abort": 12, "io": 12, "paralel": 12, "debug": 12, "sql": [12, 13], "retri": [12, 15], "db": [12, 15], "exit": [12, 15], "best_point_mixin": 12, "bestpointmixin": 12, "get_best_paramet": 12, "tri": [12, 15], "tmodelpredictarm": 12, "metric_name_1": 12, "metric_name_2": 12, "cov_1_2": 12, "get_best_tri": 12, "get_hypervolum": 12, "get_pareto_optimal_paramet": 12, "metric_mean": 12, "one_metric_nam": 12, "another_metric_nam": 12, "get_trac": 12, "equival": 12, "_get_hypervolum": 12, "_get_best_tri": 12, "get_trace_by_progress": 12, "bin": 12, "final_progression_onli": 12, "num_bins_per_tri": 12, "extract_y_from_data": 12, "block": 12, "fill_missing_thresholds_from_nadir": 12, "get_best_by_raw_object": 12, "had": 12, "get_best_by_raw_objective_with_trial_index": 12, "get_best_parameters_from_model_predict": 12, "get_best_parameters_from_model_predictions_with_trial_index": 12, "get_best_parameters_with_trial_index": 12, "get_best_raw_objective_point": 12, "get_best_raw_objective_point_with_trial_index": 12, "fixedfeatur": 12, "instantiationbas": 12, "stateless": 12, "bundl": [12, 15], "axclient": 12, "build_objective_threshold": 12, "objective_properti": 12, "objectiveproperti": 12, "make_experi": 12, "constraint_from_str": 12, "owner": 12, "tracking_metric_nam": 12, "metric_definit": 12, "support_intermediate_data": 12, "3a": 12, "3b": 12, "3c": 12, "x5": 12, "make_fixed_observation_featur": 12, "make_objective_threshold": 12, "status_quo_defin": 12, "make_object": 12, "make_optimization_config": 12, "make_optimization_config_from_properti": 12, "make_outcome_constraint": 12, "make_search_spac": 12, "objective_threshold_constraint_from_str": 12, "optimization_config_from_object": 12, "outcome_constraint_from_str": 12, "parameter_from_json": 12, "metricobject": 12, "ax_client": 12, "create_experi": 12, "moo_experi": 12, "ref_point": 12, "resp": 12, "valuabl": 12, "literatur": 12, "volum": 12, "logger": [12, 13], "get_early_stopping_metr": 12, "ax_class_from_json_dict": 13, "_class": 13, "object_json": 13, "domaintyp": 13, "torch_prior": 13, "improvementglobalstoppingstrategi": [13, 15], "listsurrog": [13, 15], "maxtrial": 13, "mintrial": 13, "minimumpreferenceoccur": 13, "minimumtrialsinstatu": 13, "modelspec": 13, "parameterconstrainttyp": 13, "parameterdistribut": [13, 15], "pathlib_from_json": 13, "percentileearlystoppingstrategi": [13, 15], "posixpath": 13, "purepath": 13, "pureposixpath": 13, "purewindowspath": 13, "torchvis": 13, "thresholdearlystoppingstrategi": [13, 15], "windowspath": 13, "class_from_json": 13, "input_transform_type_from_json": 13, "outcome_transform_type_from_json": 13, "transform_type_from_json": 13, "data_from_json": 13, "data_by_trial_json": 13, "experiment_from_json": 13, "generation_node_from_json": 13, "generation_node_json": 13, "generation_step_from_json": 13, "generation_step_json": 13, "generation_strategy_from_json": 13, "generation_strategy_json": 13, "generator_run_from_json": 13, "get_input_transform_json_compon": 13, "input_transforms_json": 13, "get_outcome_transform_json_compon": 13, "outcome_transforms_json": 13, "model_spec_from_json": 13, "model_spec_json": 13, "multi_type_experiment_from_json": 13, "ae": 13, "object_from_json": 13, "recurs": [13, 15], "parameter_constraints_from_json": 13, "parameter_constraint_json": 13, "search_space_from_json": 13, "search_space_json": 13, "surrogate_from_list_surrogate_json": 13, "list_surrogate_json": 13, "transition_criteria_from_json": 13, "transition_criteria_json": 13, "trials_from_json": 13, "trials_json": 13, "batch_trial_from_json": 13, "num_arms_cr": 13, "status_quo_weight_overrid": 13, "botorch_component_from_json": 13, "botorch_class": 13, "pathseg": 13, "tensor_from_json": 13, "tensor_or_size_from_json": 13, "trial_from_json": 13, "object_to_json": 13, "encoder_registri": 13, "arm_to_dict": 13, "logical_early_stopping_strategy_to_dict": 13, "metric_to_dict": 13, "batch_to_dict": 13, "benchmark_problem_to_dict": 13, "botorch_model_to_dict": 13, "runner_to_dict": 13, "botorch_component_to_dict": 13, "choice_parameter_to_dict": 13, "data_to_dict": 13, "experiment_to_dict": 13, "fixed_parameter_to_dict": 13, "generation_step_to_dict": 13, "generation_node_to_dict": 13, "generation_strategy_to_dict": 13, "generator_run_to_dict": 13, "improvement_global_stopping_strategy_to_dict": 13, "map_data_to_dict": 13, "map_key_info_to_dict": 13, "maxgenerationparallel": 13, "transition_criterion_to_dict": 13, "model_spec_to_dict": 13, "multi_objective_to_dict": 13, "multi_objective_benchmark_problem_to_dict": 13, "multi_objective_optimization_config_to_dict": 13, "multi_type_experiment_to_dict": 13, "percentile_early_stopping_strategy_to_dict": 13, "objective_to_dict": 13, "outcome_constraint_to_dict": 13, "optimization_config_to_dict": 13, "order_parameter_constraint_to_dict": 13, "parameter_constraint_to_dict": 13, "parameter_distribution_to_dict": 13, "pathlib": 13, "pathlib_to_dict": 13, "pytorch_cnn_torchvision_benchmark_problem_to_dict": 13, "range_parameter_to_dict": 13, "risk_measure_to_dict": 13, "robust_search_space_to_dict": 13, "scalarized_objective_to_dict": 13, "search_space_to_dict": 13, "single_objective_benchmark_problem_to_dict": 13, "sum_parameter_constraint_to_dict": 13, "surrogate_to_dict": 13, "threshold_early_stopping_strategy_to_dict": 13, "trial_to_dict": 13, "observation_features_to_dict": 13, "winsorization_config_to_dict": 13, "class_encoder_registri": 13, "botorch_modular_to_dict": 13, "transform_type_to_dict": 13, "node": [13, 15], "builtin": 13, "sub": 13, "object_dict": 13, "_type": 13, "shallow": 13, "subfield": 13, "unconvert": 13, "input_obj": 13, "botorch_input_transform_to_init_arg": 13, "input_transform": [13, 15], "class_typ": 13, "generation_step": 13, "gss": 13, "mki": 13, "moo_benchmark_problem": 13, "multi_objective_optimization_config": 13, "multityp": 13, "obs_featur": 13, "dist": 13, "rss": 13, "soo_benchmark_problem": 13, "tensor_to_dict": 13, "transform_typ": 13, "load_experi": 13, "filepath": [13, 15], "save_experi": 13, "sqaconfig": 13, "abandoned_arm_from_sqa": 13, "abandoned_arm_sqa": 13, "sqaabandonedarm": 13, "arm_from_sqa": 13, "arm_sqa": 13, "sqaarm": 13, "data_from_sqa": 13, "data_sqa": 13, "sqadata": 13, "environmental_variable_from_sqa": 13, "parameter_sqa": 13, "sqaparamet": 13, "experiment_from_sqa": 13, "experiment_sqa": 13, "sqaexperi": 13, "ax_object_field_overrid": 13, "slightli": 13, "generation_strategy_from_sqa": 13, "gs_sqa": 13, "sqagenerationstrategi": 13, "sqalchemi": 13, "generator_run_from_sqa": 13, "generator_run_sqa": 13, "sqageneratorrun": 13, "unlik": [13, 15], "get_enum_nam": 13, "metric_from_sqa": 13, "metric_sqa": 13, "sqametr": 13, "opt_config_and_tracking_metrics_from_sqa": 13, "metrics_sqa": 13, "parameter_constraint_from_sqa": 13, "parameter_constraint_sqa": 13, "sqaparameterconstraint": 13, "parameter_distributions_from_sqa": 13, "parameter_constraint_sqa_list": 13, "parameter_from_sqa": 13, "runner_from_sqa": 13, "runner_sqa": 13, "sqarunn": 13, "runner_kwarg": 13, "search_space_from_sqa": 13, "parameters_sqa": 13, "parameter_constraints_sqa": 13, "trial_from_sqa": 13, "trial_sqa": 13, "sqatrial": 13, "abandoned_arm_to_sqa": 13, "arm_to_sqa": 13, "data_to_sqa": 13, "environmental_variable_to_sqa": 13, "experiment_data_to_sqa": 13, "experiment_to_sqa": 13, "generation_strategy_to_sqa": 13, "experiment_id": 13, "generator_run_reduced_st": 13, "generator_run_to_sqa": 13, "get_children_metrics_by_nam": 13, "get_enum_valu": 13, "get_metric_type_and_properti": 13, "metrictyp": 13, "blob": 13, "metric_to_sqa": 13, "multi_objective_to_sqa": 13, "children": 13, "placehold": 13, "objective_threshold_to_sqa": 13, "objective_to_sqa": 13, "optimization_config_to_sqa": 13, "outcome_constraint_to_sqa": 13, "parameter_constraint_to_sqa": 13, "parameter_distribution_to_sqa": 13, "parameter_to_sqa": 13, "risk_measure_to_sqa": 13, "robust_search_space_to_sqa": 13, "runner_to_sqa": 13, "scalarized_objective_to_sqa": 13, "scalarized_outcome_constraint_to_sqa": 13, "search_space_to_sqa": 13, "trial_to_sqa": 13, "validate_experiment_metadata": 13, "existing_sqa_experiment_id": 13, "sqabas": 13, "metaclass": [13, 15], "create_all_t": 13, "create_mysql_engine_from_cr": 13, "creator": 13, "echo": 13, "pool_recycl": 13, "dialect": 13, "dbapi": 13, "recycl": 13, "create_engin": 13, "create_mysql_engine_from_url": 13, "usernam": 13, "password": 13, "hostnam": 13, "driver": 13, "host": 13, "port": 13, "create_test_engin": 13, "memori": 13, "get_engin": 13, "init_engine_and_session_factori": 13, "get_sess": 13, "explicitli": [13, 15], "orm": 13, "force_init": 13, "session_factori": 13, "init_test_engine_and_session_factori": 13, "tier_or_path": 13, "tier": 13, "session_scop": 13, "transact": 13, "scope": 13, "delete_experi": 13, "exp_nam": 13, "delete_generation_strategi": 13, "jsonencodeddict": 13, "jsonencodedobject": 13, "jsonencodedlist": 13, "jsonencodedlongtext": 13, "mediumtext": 13, "impl": 13, "varchar": 13, "4294967295": 13, "jsonencodedlongtextdict": 13, "jsonencodedmediumtext": 13, "16777215": 13, "typedecor": 13, "marshal": 13, "unmarshal": 13, "cache_ok": 13, "4096": 13, "process_bind_param": 13, "process_result_valu": 13, "jsonencodedtext": 13, "text": [13, 15], "object_pairs_hook": 13, "jsonencodedtextdict": 13, "get_generation_strategy_id": 13, "get_generation_strategy_sqa": 13, "gs_id": 13, "query_opt": 13, "get_generation_strategy_sqa_reduced_st": 13, "get_generator_runs_by_id": 13, "generator_run_id": 13, "bulk": 13, "load_trials_in_batches_of_s": 13, "skip_runners_and_metr": 13, "withoug": 13, "load_generation_strategy_by_experiment_nam": 13, "load_generation_strategy_by_id": 13, "save_generation_strategi": 13, "save_or_update_tri": 13, "reduce_state_generator_run": 13, "update_generation_strategi": 13, "update_outcome_constraint_on_experi": 13, "update_properties_on_experi": 13, "experiment_with_updated_properti": 13, "update_properties_on_tri": 13, "trial_with_updated_properti": 13, "update_runner_on_experi": 13, "dbset": 13, "declarative_bas": 13, "time_abandon": 13, "inttimestamp": 13, "scalarized_objective_children_metr": 13, "scalarized_outcome_constraint_children_metr": 13, "fixed_valu": 13, "is_batch": 13, "class_to_sqa_class": 13, "experiment_type_enum": 13, "generator_run_type_enum": 13, "json_encoder_registri": 13, "json_class_encoder_registri": 13, "json_decoder_registri": 13, "json_class_decoder_registri": 13, "metric_registri": 13, "runner_registri": 13, "face": 13, "reverse_metric_registri": 13, "reverse_runner_registri": 13, "basenullableenum": 13, "intenum": 13, "stringenum": 13, "copy_db_id": 13, "_db_id": 13, "is_foreign_key_field": 13, "foreign": 13, "_id": 13, "consistency_exactly_on": 13, "exactly_one_field": 13, "do_not_set_existing_value_to_nul": 13, "new_valu": 13, "old_valu": 13, "initiator_ev": 13, "event": [13, 14], "listens_for_multipl": 13, "instrumentedattribut": 13, "listen_for": 13, "listen": 13, "handler": [13, 15], "get_query_options_to_defer_immutable_dupl": 13, "strategy_opt": 13, "get_query_options_to_defer_large_model_col": 13, "botorch_modular_registri": 13, "acquisition_function_registri": 13, "expectedimprov": 13, "noisyexpectedimprov": 13, "knowledge_gradi": 13, "qknowledgegradi": 13, "max_value_entropy_search": 13, "qmaxvalueentropi": 13, "qmultifidelityknowledgegradi": 13, "qmultifidelitymaxvalueentropi": 13, "qnoisyexpectedimprov": 13, "logexpectedimprov": 13, "lognoisyexpectedimprov": 13, "logei": 13, "qlogexpectedimprov": 13, "qlognoisyexpectedimprov": 13, "acquisition_registri": 13, "sebo": 13, "class_to_registri": 13, "gaussian_likelihood": 13, "gaussianlikelihood": 13, "leave_one_out_pseudo_likelihood": 13, "leaveoneoutpseudolikelihood": 13, "sum_marginal_log_likelihood": 13, "summarginalloglikelihood": 13, "gp_regress": 13, "fixednoisegp": 13, "gp_regression_fidel": 13, "fixednoisemultifidelitygp": 13, "singletaskmultifidelitygp": 13, "multitask": 13, "fixednoisemultitaskgp": 13, "multitaskgp": 13, "gp_regression_mix": 13, "mixedsingletaskgp": 13, "model_list_gp_regress": 13, "fully_bayesian": 13, "saasfullybayesiansingletaskgp": 13, "fully_bayesian_multitask": 13, "saasfullybayesianmultitaskgp": 13, "inputperturb": 13, "gpytorch_component_registri": 13, "input_transform_registri": 13, "model_registri": 13, "outcome_transform_registri": 13, "overarch": 13, "reverse_outcome_transform_registri": 13, "register_acquisit": 13, "acq_class": 13, "register_acquisition_funct": 13, "acqf_class": 13, "register_model": 13, "register_metr": 13, "metric_cl": 13, "metric_clss": 13, "register_runn": 13, "runner_cl": [13, 14], "runner_clss": 13, "registry_bundl": 13, "registrybundl": 13, "registrybundlebas": 13, "concret": 13, "sensibl": 13, "lazili": 13, "from_registry_bundl": 13, "environmental_rang": 13, "metricint": 13, "additional_object": 13, "scalarized_object": 13, "scalarized_outcome_constraint": 13, "stable_hash": 13, "invoc": 13, "salt": 13, "experimentcompletedrecord": 14, "num_bayesopt_tri": 14, "num_other_tri": 14, "num_completed_tri": 14, "num_failed_tri": 14, "num_abandoned_tri": 14, "num_early_stopped_tri": 14, "total_fit_tim": 14, "total_gen_tim": 14, "programat": 14, "facilit": 14, "from_experi": 14, "experimentcreatedrecord": 14, "num_continuous_range_paramet": 14, "num_int_range_parameters_smal": 14, "num_int_range_parameters_medium": 14, "num_int_range_parameters_larg": 14, "num_log_scale_range_paramet": 14, "num_unordered_choice_parameters_smal": 14, "num_unordered_choice_parameters_medium": 14, "num_unordered_choice_parameters_larg": 14, "num_fixed_paramet": 14, "hierarchical_tree_height": 14, "num_parameter_constraint": 14, "num_object": [14, 15], "num_tracking_metr": 14, "num_outcome_constraint": 14, "num_map_metr": 14, "metric_cls_to_quant": 14, "generationstrategycreatedrecord": 14, "generation_strategy_nam": 14, "num_requested_initialization_tri": 14, "num_requested_bayesopt_tri": 14, "num_requested_other_tri": 14, "from_generation_strategi": 14, "schedulercompletedrecord": 14, "experiment_completed_record": 14, "best_point_qu": 14, "model_fit_qu": 14, "model_std_qu": 14, "model_fit_gener": 14, "model_std_gener": 14, "improvement_over_baselin": 14, "num_metric_fetch_e_encount": 14, "num_trials_bad_due_to_err": 14, "tabular": 14, "from_schedul": 14, "schedulercreatedrecord": 14, "experiment_created_record": 14, "generation_strategy_created_record": 14, "scheduler_total_tri": 14, "scheduler_max_pending_tri": 14, "early_stopping_strategy_cl": 14, "global_stopping_strategy_cl": 14, "transformed_dimension": 14, "db_id": 15, "reserv": 15, "alphabet": 15, "acqf_kwarg": 15, "acquisition_function_kwarg": 15, "autoset_surrog": 15, "batch_init_condit": 15, "batch_initial_condit": 15, "candidate_set": 15, "candidate_s": 15, "cost_aware_util": 15, "current_valu": 15, "expand": 15, "expected_acqf_v": 15, "expected_acquisition_valu": 15, "fidelity_weight": 15, "frac_random": 15, "immutable_search_space_and_opt_conf": 15, "num_fantasi": 15, "num_inner_restart": 15, "num_trace_observ": 15, "pairwise_preference_queri": 15, "pairwise_pref_queri": 15, "preference_data": 15, "primary_surrog": 15, "raw_inner_sampl": 15, "trial_completion_timestamp": 15, "x_baselin": 15, "classdecor": 15, "templat": 15, "decorate_cal": 15, "disable_logg": 15, "_call_func": 15, "imperfect": 15, "lot": 15, "staticmethod": 15, "decorate_priv": 15, "But": 15, "escap": 15, "decorate_class": 15, "klass": 15, "sphinx": 15, "copy_doc": 15, "src": 15, "_t": 15, "cat": 15, "mamal": 15, "is_felin": 15, "dataframe_equ": 15, "df1": 15, "df2": 15, "datetime_equ": 15, "dt1": 15, "dt2": 15, "microsecond": 15, "equality_typecheck": 15, "eq_func": 15, "__eq__": 15, "object_attribute_dicts_equ": 15, "one_dict": 15, "other_dict": 15, "skip_db_id_check": 15, "_model": 15, "__dict__": 15, "confirm": 15, "object_attribute_dicts_find_unequal_field": 15, "fast_return": 15, "unequ": 15, "soon": 15, "same_el": 15, "list1": 15, "list2": 15, "executil": 15, "handle_exceptions_in_retri": 15, "no_retry_except": 15, "retry_except": 15, "suppress_error": 15, "check_message_contain": 15, "last_retri": 15, "wrap_error_message_in": 15, "retry_on_except": 15, "exception_typ": 15, "no_retry_on_exception_typ": 15, "suppress_all_error": 15, "default_return_on_suppress": 15, "initial_wait_second": 15, "standalon": 15, "catch": 15, "baseclass": 15, "supertyp": 15, "caught": 15, "default_return_on_suppres": 15, "original_error_typ": 15, "original_error_msg": 15, "doubl": 15, "minut": 15, "consolidate_kwarg": 15, "kwargs_iter": 15, "earlier": 15, "referenc": 15, "somewhat": 15, "redund": 15, "filter_kwarg": 15, "get_function_argument_nam": 15, "get_function_default_argu": 15, "validate_kwarg_typ": 15, "typed_cal": 15, "warn_on_kwarg": 15, "callable_with_kwarg": 15, "cater": 15, "axoutputnamefilt": 15, "output_nam": 15, "logrecord": 15, "build_file_handl": 15, "streamhandl": 15, "build": 15, "stream": 15, "filehandl": 15, "build_stream_handl": 15, "40": 15, "get_logg": 15, "force_nam": 15, "axlogg": 15, "my_output_nam": 15, "stderr": 15, "hander": 15, "setlevel": 15, "ultim": 15, "make_indices_str": 15, "min_idx": 15, "max_idx": 15, "idx_1": 15, "idx_2": 15, "idx_n": 15, "set_stderr_log_level": 15, "print": 15, "mock_patch_method_origin": 15, "mock_path": 15, "original_method": 15, "magicmock": 15, "patch": 15, "nativ": 15, "is_err": 15, "is_ok": 15, "ok": 15, "untouch": 15, "map_err": 15, "success": 15, "map_or": 15, "map_or_els": 15, "default_op": 15, "unpack": 15, "unwrap": 15, "noreturn": 15, "unwraperror": 15, "unwrap_or": 15, "unwrap_or_els": 15, "unwrap_or_default": 15, "unwrap_err": 15, "rusti": 15, "monad": 15, "doc": 15, "rust": 15, "lang": 15, "org": 15, "someth": 15, "gone": 15, "world": 15, "impropperli": 15, "callable_from_refer": 15, "callable_to_refer": 15, "extract_init_arg": 15, "class_": 15, "named_tuple_to_dict": 15, "exclude_field": 15, "testcas": 15, "methodnam": 15, "runtest": 15, "assertaxbaseequ": 15, "msg": 15, "assertdictsalmostequ": 15, "consider_nans_equ": 15, "almost": 15, "assertequ": 15, "assertraiseson": 15, "exc": 15, "regex": 15, "contextmanag": 15, "silence_stderr": 15, "silenc": 15, "disable_profil": 15, "yappi": 15, "profil": 15, "current_timestamp_in_milli": 15, "timestamps_in_rang": 15, "to_d": 15, "to_t": 15, "checked_cast": 15, "typ": 15, "safeti": 15, "signal": 15, "typecheck": 15, "check_cast": 15, "checked_cast_dict": 15, "key_typ": 15, "checked_cast_list": 15, "old_l": 15, "checked_cast_opt": 15, "checked_cast_to_tupl": 15, "not_non": 15, "unbox": 15, "numpy_type_to_python_typ": 15, "coerc": 15, "version_safe_check_typ": 15, "argnam": 15, "expected_typ": 15, "excecut": 15, "typeguard": 15, "conflict": 15, "typeutils_torch": 15, "torch_type_from_str": 15, "type_nam": 15, "torch_type_to_str": 15, "flake8_plugin": 15, "docstring_check": 15, "a000": 15, "ast": 15, "docstringcheck": 15, "filenam": 15, "sure": 15, "public": 15, "fikenam": 15, "docstringcheckervisitor": 15, "nodevisitor": 15, "check_a000": 15, "visit_asyncfunctiondef": 15, "classdef": 15, "visit_classdef": 15, "visit_functiondef": 15, "functiondef": 15, "lineno": 15, "col": 15, "is_copy_doc_cal": 15, "guess": 15, "syntact": 15, "alias": 15, "new_error": 15, "errorid": 15, "should_check": 15, "synthetic_funct": 15, "aug_branin": 15, "syntheticfunct": 15, "minima": 15, "aug_hartmann6": 15, "frombotorch": 15, "botorch_synthetic_funct": 15, "fmax": 15, "fmin": 15, "required_dimension": 15, "informative_failure_on_non": 15, "init_notebook_plot": 15, "h2_html": 15, "emb": 15, "subhead": 15, "h3_html": 15, "subsubhead": 15, "link_html": 15, "href": 15, "address": 15, "list_item_html": 15, "p_html": 15, "paragraph": 15, "render_report_el": 15, "html_element": 15, "header": 15, "notebook_env": 15, "jinja2": 15, "subsect": 15, "plot_html": 15, "gp_model": 15, "perf_metr": 15, "pandas_html": 15, "my": 15, "email": 15, "serv": 15, "librari": 15, "700px": 15, "table_cell_html": 15, "table_heading_cell_html": 15, "head": 15, "table_html": 15, "table_row": 15, "table_row_html": 15, "table_cel": 15, "unordered_list_html": 15, "list_item": 15, "derivative_gp": 15, "get_kxx_inv": 15, "get_kxx_dx": 15, "kernel_typ": 15, "kernel": 15, "get_kxx_dx2": 15, "posterior_deriv": 15, "multivariatenorm": 15, "gibo": 15, "sarah": 15, "muller": 15, "alexand": 15, "von": 15, "rohr": 15, "sebastian": 15, "trimp": 15, "polici": 15, "neurip": 15, "derivative_measur": 15, "gpdgsmgpmean": 15, "y_scale": 15, "num_mc_sampl": 15, "input_qmc": 15, "num_bootstrap_sampl": 15, "transform_fun": 15, "bootstrap_indic": 15, "gradient_absolute_measur": 15, "var_mc": 15, "stderr_mc": 15, "gradient_measur": 15, "gradients_square_measur": 15, "squar": 15, "mean_gradi": 15, "mean_gradients_btsp": 15, "gpdgsmgpsampl": 15, "num_gp_sampl": 15, "gp_sample_qmc": 15, "samples_gradi": 15, "samples_gradients_btsp": 15, "compute_derivatives_from_model_list": 15, "model_list": 15, "sobol_measur": 15, "gaussianlinkmean": 15, "probitlinkmean": 15, "sobolsensit": 15, "input_funct": 15, "second_ord": 15, "bootstrap_arrai": 15, "evalute_funct": 15, "f_a_b_abi": 15, "devid": 15, "first_order_indic": 15, "generate_all_input_matrix": 15, "second_order_indic": 15, "first_order_idx": 15, "first_order_idxs_btsp": 15, "total_order_indic": 15, "sobolsensitivitygpmean": 15, "link_funct": 15, "mini_batch_s": 15, "sobolsensitivitygpsampl": 15, "1000": 15, "var_gp": 15, "stderr_gp": 15, "ax_parameter_sen": 15, "sobol_kwarg": 15, "unimport": 15, "close": 15, "compute_sobol_indices_from_model_list": 15, "agresti_coull_sem": 15, "n_numer": 15, "n_denom": 15, "prior_success": 15, "prior_failur": 15, "agresti": 15, "coull": 15, "style": 15, "binomi": 15, "alan": 15, "brent": 15, "american": 15, "statistician": 15, "vol": 15, "52": 15, "1998": 15, "pp": 15, "119": 15, "126": 15, "jstor": 15, "stabl": 15, "2685469": 15, "inverse_variance_weight": 15, "versu": 15, "beta": 15, "positive_part_james_stein": 15, "sigma_i": 15, "shrunk": 15, "shrink": 15, "constitu": 15, "grand": 15, "phi_i": 15, "ybar": 15, "shrinkag": 15, "mu_hat": 15, "unrestrict": 15, "sigma2_i": 15, "s2": 15, "precis": 15, "tightli": 15, "cluster": 15, "phi": 15, "third": 15, "sem_i": 15, "mu_hat_i": 15, "means_t": 15, "sems_t": 15, "mean_c": 15, "bias_correct": 15, "cov_mean": 15, "as_perc": 15, "taylor": 15, "mu_t": 15, "mu_c": 15, "expans": 15, "sigma_c": 15, "sigma_t": 15, "sigma_tc": 15, "s_c": 15, "s_t": 15, "s_tc": 15, "divis": 15, "bia": 15, "mean_t": 15, "ab": 15, "sem_hat": 15, "rel_hat": 15, "total_vari": 15, "model_fit_stat": 15, "y_ob": 15, "y_pred": 15, "se_pr": 15, "12": 15, "denomin": 15, "stabil": 15, "compute_model_fit_metr": 15, "mean_of_the_standardized_error": 15, "quantifi": 15, "practic": 15, "std_of_the_standardized_error": 15, "backend_schedul": 15, "asyncsimulatedbackendschedul": 15, "backend_simul": 15, "loggeradapt": 15, "markdown_messag": 15, "backendsimulatoropt": 15, "simtrial": 15, "verbose_log": 15, "concurr": 15, "queue": 15, "all_trial": 15, "from_stat": 15, "backendsimulatorst": 15, "desir": 15, "get_sim_trial_by_index": 15, "lookup_trial_index_statu": 15, "_queu": 15, "_run": 15, "num_complet": 15, "num_fail": 15, "num_queu": 15, "time_sc": 15, "arbitrarili": 15, "simstatu": 15, "stop_trial": 15, "use_internal_clock": 15, "clock": 15, "max_concurr": 15, "failure_r": 15, "internal_clock": 15, "use_update_as_start_tim": 15, "coin": 15, "flip": 15, "time_remain": 15, "sim": 15, "sim_runtim": 15, "sim_start_tim": 15, "sim_queued_tim": 15, "sim_completed_tim": 15, "stopper": 15, "trial_list": 15, "benchmark_stub": 15, "get_aggregated_benchmark_result": 15, "get_benchmark_problem": 15, "get_benchmark_result": 15, "get_moo_surrog": 15, "get_multi_objective_benchmark_problem": 15, "get_single_objective_benchmark_problem": 15, "get_sobol_benchmark_method": 15, "get_sobol_gpei_benchmark_method": 15, "get_soo_surrog": 15, "core_stub": 15, "customtestmetr": 15, "test_attribut": 15, "customtestrunn": 15, "dummyearlystoppingstrategi": 15, "early_stop_tri": 15, "dummyglobalstoppingstrategi": 15, "trial_to_stop": 15, "specialgenerationstrategi": 15, "respond": 15, "subtyp": 15, "testtrial": 15, "get_abandoned_arm": 15, "get_acquisition_function_typ": 15, "get_acquisition_typ": 15, "get_and_early_stopping_strategi": 15, "get_arm": 15, "get_arm_weights1": 15, "get_arm_weights2": 15, "get_arms_from_dict": 15, "arm_weights_dict": 15, "get_augmented_branin_metr": 15, "get_augmented_branin_object": 15, "get_augmented_branin_optimization_config": 15, "get_augmented_hartmann_metr": 15, "aug_hartmann": 15, "get_augmented_hartmann_object": 15, "get_augmented_hartmann_optimization_config": 15, "get_batch_tri": 15, "abandon_arm": 15, "constrain_search_spac": 15, "get_batch_trial_with_repeated_arm": 15, "num_repeated_arm": 15, "get_botorch_model": 15, "get_botorch_model_with_default_acquisition_class": 15, "get_botorch_model_with_surrogate_spec": 15, "get_branin_arm": 15, "get_branin_data": 15, "get_branin_data_batch": 15, "get_branin_data_multi_object": 15, "get_branin_experi": 15, "has_optimization_config": 15, "with_batch": 15, "with_trial": 15, "with_status_quo": 15, "with_fidelity_paramet": 15, "with_choice_paramet": 15, "with_str_choice_param": 15, "with_completed_tri": 15, "get_branin_experiment_with_multi_object": 15, "has_objective_threshold": 15, "get_branin_experiment_with_status_quo_tri": 15, "num_sobol_tri": 15, "get_branin_experiment_with_timestamp_map_metr": 15, "map_tracking_metr": 15, "get_branin_metr": 15, "get_branin_multi_object": 15, "get_branin_multi_objective_optimization_config": 15, "get_branin_object": 15, "get_branin_optimization_config": 15, "get_branin_outcome_constraint": 15, "get_branin_search_spac": 15, "get_branin_with_multi_task": 15, "with_multi_object": 15, "get_chained_input_transform": 15, "get_choice_paramet": 15, "get_custom_multi_object": 15, "ax_test_metr": 15, "num_non_sq_arm": 15, "get_dataset": 15, "has_observation_nois": 15, "x0": 15, "y0": 15, "y1": 15, "get_default_scheduler_opt": 15, "get_dict_lookup_metr": 15, "get_discrete_search_spac": 15, "get_experi": 15, "get_experiment_with_batch_and_single_tri": 15, "get_experiment_with_batch_tri": 15, "get_experiment_with_custom_runner_and_metr": 15, "get_experiment_with_data": 15, "get_experiment_with_map_data": 15, "get_experiment_with_map_data_typ": 15, "get_experiment_with_multi_object": 15, "get_experiment_with_observ": 15, "with_tracking_metr": 15, "get_experiment_with_repeated_arm": 15, "get_experiment_with_scalarized_objective_and_outcome_constraint": 15, "get_experiment_with_tri": 15, "get_experiment_with_trial_with_ttl": 15, "get_factorial_experi": 15, "get_factorial_metr": 15, "success_metr": 15, "get_factorial_search_spac": 15, "get_fixed_paramet": 15, "get_gamma_prior": 15, "get_generator_run": 15, "get_generator_run2": 15, "get_hartmann_metr": 15, "get_hartmann_object": 15, "get_hartmann_optimization_config": 15, "get_hartmann_search_spac": 15, "get_hierarchical_search_spac": 15, "with_fixed_paramet": 15, "get_hierarchical_search_space_experi": 15, "num_observ": 15, "get_high_dimensional_branin_experi": 15, "get_hss_trials_with_fixed_paramet": 15, "get_improvement_global_stopping_strategi": 15, "get_interv": 15, "get_l2_reg_weight_paramet": 15, "get_large_factorial_search_spac": 15, "num_level": 15, "num_paramet": 15, "get_large_ordinal_search_spac": 15, "n_ordinal_choice_paramet": 15, "n_continuous_range_paramet": 15, "get_lr_paramet": 15, "get_many_branin_objective_opt_config": 15, "n_object": 15, "get_map_data": 15, "get_map_key_info": 15, "get_map_object": 15, "get_map_optimization_config": 15, "get_metr": 15, "get_mll_typ": 15, "get_model_covari": 15, "get_model_mean": 15, "get_model_paramet": 15, "get_model_predict": 15, "get_model_predictions_per_arm": 15, "get_model_typ": 15, "get_multi_object": 15, "get_multi_objective_optimization_config": 15, "custom_metr": 15, "get_multi_type_experi": 15, "add_trial": 15, "num_arm": 15, "get_multi_type_experiment_with_multi_object": 15, "get_non_monolithic_branin_moo_data": 15, "get_num_boost_rounds_paramet": 15, "get_object": 15, "get_objective_threshold": 15, "comparison_op": 15, "get_optimization_config": 15, "get_optimization_config_no_constraint": 15, "get_or_early_stopping_strategi": 15, "get_order_constraint": 15, "get_ordered_choice_paramet": 15, "get_outcome_constraint": 15, "get_parameter_constraint": 15, "get_parameter_distribut": 15, "get_pathlib_path": 15, "get_percentile_early_stopping_strategi": 15, "get_percentile_early_stopping_strategy_with_non_objective_metric_nam": 15, "get_percentile_early_stopping_strategy_with_true_objective_metric_nam": 15, "get_range_parameter2": 15, "get_risk_measur": 15, "get_robust_branin_experi": 15, "get_robust_search_spac": 15, "lb": 15, "ub": 15, "multivari": 15, "use_discret": 15, "get_robust_search_space_environment": 15, "get_scalarized_object": 15, "get_scalarized_outcome_constraint": 15, "get_scheduler_options_batch_tri": 15, "get_search_spac": 15, "get_search_space_for_range_valu": 15, "get_search_space_for_valu": 15, "get_search_space_with_choice_paramet": 15, "num_ordered_paramet": 15, "num_unordered_choic": 15, "get_sebo_acquisition_class": 15, "get_small_discrete_search_spac": 15, "get_status_quo": 15, "get_sum_constraint1": 15, "get_sum_constraint2": 15, "get_surrog": 15, "get_synthetic_runn": 15, "get_task_choice_paramet": 15, "get_test_map_data_experi": 15, "num_fetch": 15, "get_threshold_early_stopping_strategi": 15, "get_trial": 15, "get_weight": 15, "get_weights_from_dict": 15, "get_winsorization_config": 15, "run_branin_experiment_with_generation_strategi": 15, "kwargs_for_get_branin_experi": 15, "modeling_stub": 15, "get_experiment_for_valu": 15, "get_generation_strategi": 15, "with_experi": 15, "with_callable_model_kwarg": 15, "with_completion_criteria": 15, "with_generation_nod": 15, "get_input_transform_typ": 15, "get_legacy_list_surrogate_generation_step_as_dict": 15, "first_metric_nam": 15, "second_metric_nam": 15, "get_observation1": 15, "get_observation1tran": 15, "get_observation2": 15, "get_observation2tran": 15, "get_observation_featur": 15, "get_observation_status_quo0": 15, "get_observation_status_quo1": 15, "get_outcome_transfrom_typ": 15, "get_surrogate_as_dict": 15, "outcome_transform": 15, "get_surrogate_generation_step": 15, "get_surrogate_spec_as_dict": 15, "with_legacy_input_transform": 15, "get_transform_typ": 15, "sobol_gpei_generation_node_g": 15, "usecas": 15, "transform_1": 15, "transform_2": 15, "fast_botorch_optim": 15, "fast_botorch_optimize_context_manag": 15, "tactic": 15, "assertionerror": 15, "responsibli": 15, "skip_fit_gpytorch_ml": 15, "skip_fit_gpytorch_mll_context_manag": 15, "fit_gpytorch_ml": 15, "test_init_fil": 15, "inittest": 15, "test_initfil": 15, "buck": 15, "torch_stub": 15, "get_torch_test_data": 15, "float32": 15, "cuda": 15, "constant_nois": 15, "generic_equ": 15, "backend_simulator_map": 15, "backendsimulatortimestampmapmetr": 15, "convert_to_timestamp": 15, "branin_backend_map": 15, "braninbackendmapmetr": 15, "delta_t": 15, "cnn_util": 15, "convolut": 15, "network": 15, "data_load": 15, "dataload": 15, "accuraci": 15, "get_partition_data_load": 15, "train_valid_set": 15, "downsample_pct": 15, "train_pct": 15, "num_work": 15, "deterministic_partit": 15, "downsample_pct_test": 15, "worker": 15, "subprocess": 15, "fashion": 15, "load_mnist": 15, "data_path": 15, "mnist": 15, "pt": 15, "split_dataset": 15, "train_load": 15, "num_epoch": 15}, "objects": {"ax": [[1, 0, 0, "-", "benchmark"], [2, 0, 0, "-", "core"], [3, 0, 0, "-", "early_stopping"], [4, 0, 0, "-", "exceptions"], [5, 0, 0, "-", "global_stopping"], [7, 0, 0, "-", "metrics"], [8, 0, 0, "-", "modelbridge"], [9, 0, 0, "-", "models"], [10, 0, 0, "-", "plot"], [11, 0, 0, "-", "runners"], [12, 0, 0, "-", "service"], [13, 0, 0, "-", "storage"], [14, 0, 0, "-", "telemetry"], [15, 0, 0, "-", "utils"]], "ax.benchmark": [[1, 0, 0, "-", "benchmark_method"], [1, 0, 0, "-", "benchmark_problem"], [1, 0, 0, "-", "benchmark_result"]], "ax.benchmark.benchmark_method": [[1, 1, 1, "", "BenchmarkMethod"], [1, 3, 1, "", "get_sequential_optimization_scheduler_options"]], "ax.benchmark.benchmark_method.BenchmarkMethod": [[1, 2, 1, "", "distribute_replications"], [1, 2, 1, "", "generation_strategy"], [1, 2, 1, "", "name"], [1, 2, 1, "", "scheduler_options"]], "ax.benchmark.benchmark_problem": [[1, 1, 1, "", "BenchmarkProblem"], [1, 1, 1, "", "BenchmarkProblemBase"], [1, 1, 1, "", "BenchmarkProblemWithKnownOptimum"], [1, 1, 1, "", "MultiObjectiveBenchmarkProblem"], [1, 1, 1, "", "SingleObjectiveBenchmarkProblem"]], "ax.benchmark.benchmark_problem.BenchmarkProblem": [[1, 4, 1, "", "from_botorch"], [1, 5, 1, "", "runner"]], "ax.benchmark.benchmark_problem.BenchmarkProblemBase": [[1, 2, 1, "", "infer_noise"], [1, 2, 1, "", "name"], [1, 2, 1, "", "num_trials"], [1, 2, 1, "", "optimization_config"], [1, 5, 1, "", "runner"], [1, 2, 1, "", "search_space"], [1, 2, 1, "", "tracking_metrics"]], "ax.benchmark.benchmark_problem.BenchmarkProblemWithKnownOptimum": [[1, 2, 1, "", "optimal_value"]], "ax.benchmark.benchmark_problem.MultiObjectiveBenchmarkProblem": [[1, 4, 1, "", "from_botorch_multi_objective"], [1, 5, 1, "", "optimal_value"]], "ax.benchmark.benchmark_problem.SingleObjectiveBenchmarkProblem": [[1, 4, 1, "", "from_botorch_synthetic"]], "ax.benchmark.benchmark_result": [[1, 1, 1, "", "AggregatedBenchmarkResult"], [1, 1, 1, "", "BenchmarkResult"]], "ax.benchmark.benchmark_result.AggregatedBenchmarkResult": [[1, 2, 1, "", "fit_time"], [1, 4, 1, "", "from_benchmark_results"], [1, 2, 1, "", "gen_time"], [1, 2, 1, "", "name"], [1, 2, 1, "", "optimization_trace"], [1, 2, 1, "", "results"], [1, 2, 1, "", "score_trace"]], "ax.benchmark.benchmark_result.BenchmarkResult": [[1, 2, 1, "", "experiment"], [1, 2, 1, "", "experiment_storage_id"], [1, 2, 1, "", "fit_time"], [1, 2, 1, "", "gen_time"], [1, 2, 1, "", "name"], [1, 2, 1, "", "optimization_trace"], [1, 2, 1, "", "score_trace"], [1, 2, 1, "", "seed"]], "ax.benchmark.problems": [[1, 0, 0, "-", "hd_embedding"], [1, 0, 0, "-", "registry"], [1, 0, 0, "-", "surrogate"]], "ax.benchmark.problems.hd_embedding": [[1, 3, 1, "", "embed_higher_dimension"]], "ax.benchmark.problems.hpo": [[1, 0, 0, "-", "pytorch_cnn"], [1, 0, 0, "-", "torchvision"]], "ax.benchmark.problems.hpo.pytorch_cnn": [[1, 1, 1, "", "PyTorchCNNBenchmarkProblem"], [1, 1, 1, "", "PyTorchCNNMetric"], [1, 1, 1, "", "PyTorchCNNRunner"]], "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNBenchmarkProblem": [[1, 4, 1, "", "from_datasets"]], "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNMetric": [[1, 4, 1, "", "fetch_trial_data"]], "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner": [[1, 1, 1, "", "CNN"], [1, 4, 1, "", "poll_trial_status"], [1, 4, 1, "", "run"], [1, 4, 1, "", "train_and_evaluate"]], "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.CNN": [[1, 4, 1, "", "forward"], [1, 2, 1, "", "training"]], "ax.benchmark.problems.hpo.torchvision": [[1, 1, 1, "", "PyTorchCNNTorchvisionBenchmarkProblem"], [1, 1, 1, "", "PyTorchCNNTorchvisionRunner"]], "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionBenchmarkProblem": [[1, 4, 1, "", "from_dataset_name"]], "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionRunner": [[1, 4, 1, "", "deserialize_init_args"], [1, 4, 1, "", "serialize_init_args"]], "ax.benchmark.problems.registry": [[1, 1, 1, "", "BenchmarkProblemRegistryEntry"], [1, 3, 1, "", "get_problem"]], "ax.benchmark.problems.registry.BenchmarkProblemRegistryEntry": [[1, 2, 1, "", "factory_fn"], [1, 2, 1, "", "factory_kwargs"]], "ax.benchmark.problems.surrogate": [[1, 1, 1, "", "MOOSurrogateBenchmarkProblem"], [1, 1, 1, "", "SOOSurrogateBenchmarkProblem"], [1, 1, 1, "", "SurrogateBenchmarkProblemBase"], [1, 1, 1, "", "SurrogateMetric"], [1, 1, 1, "", "SurrogateRunner"]], "ax.benchmark.problems.surrogate.MOOSurrogateBenchmarkProblem": [[1, 5, 1, "", "optimal_value"], [1, 2, 1, "", "optimization_config"]], "ax.benchmark.problems.surrogate.SurrogateBenchmarkProblemBase": [[1, 5, 1, "", "runner"], [1, 4, 1, "", "set_runner"]], "ax.benchmark.problems.surrogate.SurrogateMetric": [[1, 4, 1, "", "fetch_trial_data"]], "ax.benchmark.problems.surrogate.SurrogateRunner": [[1, 4, 1, "", "deserialize_init_args"], [1, 4, 1, "", "poll_trial_status"], [1, 4, 1, "", "run"], [1, 4, 1, "", "serialize_init_args"]], "ax.benchmark.problems.synthetic.discretized": [[1, 0, 0, "-", "mixed_integer"]], "ax.benchmark.problems.synthetic.discretized.mixed_integer": [[1, 3, 1, "", "get_discrete_ackley"], [1, 3, 1, "", "get_discrete_hartmann"], [1, 3, 1, "", "get_discrete_rosenbrock"]], "ax.benchmark.problems.synthetic.hss": [[1, 0, 0, "-", "jenatton"]], "ax.benchmark.problems.synthetic.hss.jenatton": [[1, 3, 1, "", "get_jenatton_benchmark_problem"]], "ax.core": [[2, 0, 0, "-", "arm"], [2, 0, 0, "-", "base_trial"], [2, 0, 0, "-", "batch_trial"], [2, 0, 0, "-", "experiment"], [2, 0, 0, "-", "formatting_utils"], [2, 0, 0, "-", "generation_strategy_interface"], [2, 0, 0, "-", "generator_run"], [2, 0, 0, "-", "multi_type_experiment"], [2, 0, 0, "-", "observation"], [2, 0, 0, "-", "optimization_config"], [2, 0, 0, "-", "parameter"], [2, 0, 0, "-", "parameter_constraint"], [2, 0, 0, "-", "parameter_distribution"], [2, 0, 0, "-", "risk_measures"], [2, 0, 0, "-", "runner"], [2, 0, 0, "-", "trial"], [2, 0, 0, "-", "types"], [2, 0, 0, "-", "utils"]], "ax.core.arm": [[2, 1, 1, "", "Arm"]], "ax.core.arm.Arm": [[2, 4, 1, "", "clone"], [2, 5, 1, "", "has_name"], [2, 4, 1, "", "md5hash"], [2, 5, 1, "", "name"], [2, 5, 1, "", "name_or_short_signature"], [2, 5, 1, "", "parameters"], [2, 5, 1, "", "signature"]], "ax.core.base_trial": [[2, 1, 1, "", "BaseTrial"], [2, 1, 1, "", "TrialStatus"], [2, 3, 1, "", "immutable_once_run"]], "ax.core.base_trial.BaseTrial": [[2, 5, 1, "", "abandoned_arms"], [2, 5, 1, "", "abandoned_reason"], [2, 5, 1, "", "arms"], [2, 5, 1, "", "arms_by_name"], [2, 4, 1, "", "assign_runner"], [2, 4, 1, "", "complete"], [2, 5, 1, "", "completed_successfully"], [2, 5, 1, "", "deployed_name"], [2, 5, 1, "", "did_not_complete"], [2, 5, 1, "", "experiment"], [2, 5, 1, "", "failed_reason"], [2, 4, 1, "", "fetch_data"], [2, 4, 1, "", "fetch_data_results"], [2, 5, 1, "", "generator_runs"], [2, 5, 1, "", "index"], [2, 5, 1, "", "is_abandoned"], [2, 4, 1, "", "lookup_data"], [2, 4, 1, "", "mark_abandoned"], [2, 4, 1, "", "mark_arm_abandoned"], [2, 4, 1, "", "mark_as"], [2, 4, 1, "", "mark_completed"], [2, 4, 1, "", "mark_early_stopped"], [2, 4, 1, "", "mark_failed"], [2, 4, 1, "", "mark_running"], [2, 4, 1, "", "mark_staged"], [2, 4, 1, "", "run"], [2, 5, 1, "", "run_metadata"], [2, 5, 1, "", "runner"], [2, 5, 1, "", "status"], [2, 4, 1, "", "stop"], [2, 5, 1, "", "stop_metadata"], [2, 5, 1, "", "time_completed"], [2, 5, 1, "", "time_created"], [2, 5, 1, "", "time_run_started"], [2, 5, 1, "", "time_staged"], [2, 5, 1, "", "trial_type"], [2, 5, 1, "", "ttl_seconds"], [2, 4, 1, "", "update_run_metadata"], [2, 4, 1, "", "update_stop_metadata"]], "ax.core.base_trial.TrialStatus": [[2, 2, 1, "", "ABANDONED"], [2, 2, 1, "", "CANDIDATE"], [2, 2, 1, "", "COMPLETED"], [2, 2, 1, "", "DISPATCHED"], [2, 2, 1, "", "EARLY_STOPPED"], [2, 2, 1, "", "FAILED"], [2, 2, 1, "", "RUNNING"], [2, 2, 1, "", "STAGED"], [2, 5, 1, "", "expecting_data"], [2, 5, 1, "", "is_abandoned"], [2, 5, 1, "", "is_candidate"], [2, 5, 1, "", "is_completed"], [2, 5, 1, "", "is_deployed"], [2, 5, 1, "", "is_early_stopped"], [2, 5, 1, "", "is_failed"], [2, 5, 1, "", "is_running"], [2, 5, 1, "", "is_terminal"]], "ax.core.batch_trial": [[2, 1, 1, "", "AbandonedArm"], [2, 1, 1, "", "BatchTrial"], [2, 1, 1, "", "GeneratorRunStruct"], [2, 1, 1, "", "LifecycleStage"]], "ax.core.batch_trial.AbandonedArm": [[2, 2, 1, "", "name"], [2, 2, 1, "", "reason"], [2, 2, 1, "", "time"]], "ax.core.batch_trial.BatchTrial": [[2, 5, 1, "", "abandoned_arm_names"], [2, 5, 1, "", "abandoned_arms"], [2, 5, 1, "", "abandoned_arms_metadata"], [2, 4, 1, "", "add_arm"], [2, 4, 1, "", "add_arms_and_weights"], [2, 4, 1, "", "add_generator_run"], [2, 5, 1, "", "arm_weights"], [2, 5, 1, "", "arms"], [2, 5, 1, "", "arms_by_name"], [2, 4, 1, "", "attach_batch_trial_data"], [2, 4, 1, "", "clone"], [2, 4, 1, "", "clone_to"], [2, 5, 1, "", "experiment"], [2, 5, 1, "", "generator_run_structs"], [2, 5, 1, "", "generator_runs"], [2, 5, 1, "", "in_design_arms"], [2, 5, 1, "", "index"], [2, 5, 1, "", "is_factorial"], [2, 5, 1, "", "lifecycle_stage"], [2, 4, 1, "", "mark_arm_abandoned"], [2, 4, 1, "", "normalized_arm_weights"], [2, 4, 1, "", "run"], [2, 4, 1, "", "set_status_quo_and_optimize_power"], [2, 4, 1, "", "set_status_quo_with_weight"], [2, 5, 1, "", "status_quo"], [2, 4, 1, "", "unset_status_quo"], [2, 5, 1, "", "weights"]], "ax.core.batch_trial.GeneratorRunStruct": [[2, 2, 1, "", "generator_run"], [2, 2, 1, "", "weight"]], "ax.core.batch_trial.LifecycleStage": [[2, 2, 1, "", "BAKEOFF"], [2, 2, 1, "", "EXPLORATION"], [2, 2, 1, "", "EXPLORATION_CONCURRENT"], [2, 2, 1, "", "ITERATION"], [2, 2, 1, "", "OFFLINE_OPTIMIZED"]], "ax.core.experiment": [[2, 1, 1, "", "Experiment"], [2, 3, 1, "", "add_arm_and_prevent_naming_collision"]], "ax.core.experiment.Experiment": [[2, 4, 1, "", "add_tracking_metric"], [2, 4, 1, "", "add_tracking_metrics"], [2, 5, 1, "", "arms_by_name"], [2, 5, 1, "", "arms_by_signature"], [2, 4, 1, "", "attach_data"], [2, 4, 1, "", "attach_fetch_results"], [2, 4, 1, "", "attach_trial"], [2, 4, 1, "", "clone_with"], [2, 5, 1, "", "completed_trials"], [2, 5, 1, "", "data_by_trial"], [2, 5, 1, "", "default_data_constructor"], [2, 5, 1, "", "default_data_type"], [2, 5, 1, "", "default_trial_type"], [2, 5, 1, "", "experiment_type"], [2, 4, 1, "", "fetch_data"], [2, 4, 1, "", "fetch_data_results"], [2, 4, 1, "", "fetch_trials_data"], [2, 4, 1, "", "fetch_trials_data_results"], [2, 4, 1, "", "get_trials_by_indices"], [2, 5, 1, "", "has_name"], [2, 5, 1, "", "immutable_search_space_and_opt_config"], [2, 5, 1, "", "is_moo_problem"], [2, 5, 1, "", "is_test"], [2, 4, 1, "", "lookup_data"], [2, 4, 1, "", "lookup_data_for_trial"], [2, 4, 1, "", "lookup_data_for_ts"], [2, 5, 1, "", "metric_config_summary_df"], [2, 5, 1, "", "metrics"], [2, 5, 1, "", "name"], [2, 4, 1, "", "new_batch_trial"], [2, 4, 1, "", "new_trial"], [2, 5, 1, "", "num_abandoned_arms"], [2, 5, 1, "", "num_trials"], [2, 5, 1, "", "optimization_config"], [2, 5, 1, "", "parameters"], [2, 4, 1, "", "remove_tracking_metric"], [2, 4, 1, "", "reset_runners"], [2, 4, 1, "", "runner_for_trial"], [2, 5, 1, "", "running_trial_indices"], [2, 5, 1, "", "search_space"], [2, 5, 1, "", "status_quo"], [2, 5, 1, "", "sum_trial_sizes"], [2, 4, 1, "", "supports_trial_type"], [2, 5, 1, "", "time_created"], [2, 5, 1, "", "tracking_metrics"], [2, 5, 1, "", "trial_indices_by_status"], [2, 5, 1, "", "trials"], [2, 5, 1, "", "trials_by_status"], [2, 5, 1, "", "trials_expecting_data"], [2, 4, 1, "", "update_tracking_metric"], [2, 4, 1, "", "validate_trials"], [2, 4, 1, "", "warm_start_from_old_experiment"]], "ax.core.formatting_utils": [[2, 1, 1, "", "DataType"], [2, 3, 1, "", "data_and_evaluations_from_raw_data"], [2, 3, 1, "", "raw_data_to_evaluation"]], "ax.core.formatting_utils.DataType": [[2, 2, 1, "", "DATA"], [2, 2, 1, "", "MAP_DATA"]], "ax.core.generation_strategy_interface": [[2, 1, 1, "", "GenerationStrategyInterface"]], "ax.core.generation_strategy_interface.GenerationStrategyInterface": [[2, 5, 1, "", "experiment"], [2, 4, 1, "", "gen_for_multiple_trials_with_multiple_models"], [2, 5, 1, "", "last_generator_run"], [2, 5, 1, "", "name"]], "ax.core.generator_run": [[2, 1, 1, "", "ArmWeight"], [2, 1, 1, "", "GeneratorRun"], [2, 1, 1, "", "GeneratorRunType"], [2, 3, 1, "", "extract_arm_predictions"]], "ax.core.generator_run.ArmWeight": [[2, 2, 1, "", "arm"], [2, 2, 1, "", "weight"]], "ax.core.generator_run.GeneratorRun": [[2, 5, 1, "", "arm_signatures"], [2, 5, 1, "", "arm_weights"], [2, 5, 1, "", "arms"], [2, 5, 1, "", "best_arm_predictions"], [2, 5, 1, "", "candidate_metadata_by_arm_signature"], [2, 4, 1, "", "clone"], [2, 5, 1, "", "fit_time"], [2, 5, 1, "", "gen_metadata"], [2, 5, 1, "", "gen_time"], [2, 5, 1, "", "generator_run_type"], [2, 5, 1, "", "index"], [2, 5, 1, "", "model_predictions"], [2, 5, 1, "", "model_predictions_by_arm"], [2, 5, 1, "", "optimization_config"], [2, 5, 1, "", "param_df"], [2, 5, 1, "", "search_space"], [2, 5, 1, "", "time_created"], [2, 5, 1, "", "weights"]], "ax.core.generator_run.GeneratorRunType": [[2, 2, 1, "", "MANUAL"], [2, 2, 1, "", "STATUS_QUO"]], "ax.core.multi_type_experiment": [[2, 1, 1, "", "MultiTypeExperiment"]], "ax.core.multi_type_experiment.MultiTypeExperiment": [[2, 4, 1, "", "add_tracking_metric"], [2, 4, 1, "", "add_trial_type"], [2, 5, 1, "", "default_trial_type"], [2, 5, 1, "", "default_trials"], [2, 2, 1, "", "description"], [2, 4, 1, "", "fetch_data"], [2, 5, 1, "", "metric_to_trial_type"], [2, 2, 1, "", "name"], [2, 4, 1, "", "remove_tracking_metric"], [2, 4, 1, "", "reset_runners"], [2, 4, 1, "", "runner_for_trial"], [2, 4, 1, "", "supports_trial_type"], [2, 4, 1, "", "update_runner"], [2, 4, 1, "", "update_tracking_metric"]], "ax.core.observation": [[2, 1, 1, "", "Observation"], [2, 1, 1, "", "ObservationData"], [2, 1, 1, "", "ObservationFeatures"], [2, 3, 1, "", "get_feature_cols"], [2, 3, 1, "", "get_feature_cols_from_map_data"], [2, 3, 1, "", "observations_from_data"], [2, 3, 1, "", "observations_from_map_data"], [2, 3, 1, "", "recombine_observations"], [2, 3, 1, "", "separate_observations"]], "ax.core.observation.Observation": [[2, 2, 1, "", "arm_name"], [2, 2, 1, "", "data"], [2, 2, 1, "", "features"]], "ax.core.observation.ObservationData": [[2, 2, 1, "", "covariance"], [2, 5, 1, "", "covariance_matrix"], [2, 2, 1, "", "means"], [2, 5, 1, "", "means_dict"], [2, 2, 1, "", "metric_names"]], "ax.core.observation.ObservationFeatures": [[2, 4, 1, "", "clone"], [2, 2, 1, "", "end_time"], [2, 4, 1, "", "from_arm"], [2, 2, 1, "", "parameters"], [2, 2, 1, "", "random_split"], [2, 2, 1, "", "start_time"], [2, 2, 1, "", "trial_index"], [2, 4, 1, "", "update_features"]], "ax.core.optimization_config": [[2, 1, 1, "", "MultiObjectiveOptimizationConfig"], [2, 1, 1, "", "OptimizationConfig"], [2, 3, 1, "", "check_objective_thresholds_match_objectives"]], "ax.core.optimization_config.MultiObjectiveOptimizationConfig": [[2, 5, 1, "", "all_constraints"], [2, 4, 1, "", "clone_with_args"], [2, 5, 1, "", "metrics"], [2, 5, 1, "", "objective"], [2, 5, 1, "", "objective_thresholds"], [2, 5, 1, "", "objective_thresholds_dict"]], "ax.core.optimization_config.OptimizationConfig": [[2, 5, 1, "", "all_constraints"], [2, 4, 1, "", "clone"], [2, 4, 1, "", "clone_with_args"], [2, 5, 1, "", "is_moo_problem"], [2, 5, 1, "", "metrics"], [2, 5, 1, "", "objective"], [2, 5, 1, "", "outcome_constraints"]], "ax.core.parameter": [[2, 1, 1, "", "ChoiceParameter"], [2, 1, 1, "", "FixedParameter"], [2, 1, 1, "", "Parameter"], [2, 1, 1, "", "ParameterType"], [2, 1, 1, "", "RangeParameter"]], "ax.core.parameter.ChoiceParameter": [[2, 4, 1, "", "add_values"], [2, 5, 1, "", "available_flags"], [2, 4, 1, "", "cardinality"], [2, 4, 1, "", "clone"], [2, 5, 1, "", "dependents"], [2, 5, 1, "", "domain_repr"], [2, 5, 1, "", "is_ordered"], [2, 5, 1, "", "is_task"], [2, 4, 1, "", "set_values"], [2, 5, 1, "", "sort_values"], [2, 4, 1, "", "validate"], [2, 5, 1, "", "values"]], "ax.core.parameter.FixedParameter": [[2, 5, 1, "", "available_flags"], [2, 4, 1, "", "cardinality"], [2, 4, 1, "", "clone"], [2, 5, 1, "", "dependents"], [2, 5, 1, "", "domain_repr"], [2, 4, 1, "", "set_value"], [2, 4, 1, "", "validate"], [2, 5, 1, "", "value"]], "ax.core.parameter.Parameter": [[2, 5, 1, "", "available_flags"], [2, 4, 1, "", "cardinality"], [2, 4, 1, "", "cast"], [2, 4, 1, "", "clone"], [2, 5, 1, "", "dependents"], [2, 5, 1, "", "domain_repr"], [2, 5, 1, "", "is_fidelity"], [2, 5, 1, "", "is_hierarchical"], [2, 5, 1, "", "is_numeric"], [2, 4, 1, "", "is_valid_type"], [2, 5, 1, "", "name"], [2, 5, 1, "", "parameter_type"], [2, 5, 1, "", "python_type"], [2, 5, 1, "", "summary_dict"], [2, 5, 1, "", "target_value"], [2, 4, 1, "", "validate"]], "ax.core.parameter.ParameterType": [[2, 2, 1, "", "BOOL"], [2, 2, 1, "", "FLOAT"], [2, 2, 1, "", "INT"], [2, 2, 1, "", "STRING"], [2, 5, 1, "", "is_numeric"]], "ax.core.parameter.RangeParameter": [[2, 5, 1, "", "available_flags"], [2, 4, 1, "", "cardinality"], [2, 4, 1, "", "cast"], [2, 4, 1, "", "clone"], [2, 5, 1, "", "digits"], [2, 5, 1, "", "domain_repr"], [2, 4, 1, "", "is_valid_type"], [2, 5, 1, "", "log_scale"], [2, 5, 1, "", "logit_scale"], [2, 5, 1, "", "lower"], [2, 4, 1, "", "set_digits"], [2, 4, 1, "", "set_log_scale"], [2, 4, 1, "", "set_logit_scale"], [2, 4, 1, "", "update_range"], [2, 5, 1, "", "upper"], [2, 4, 1, "", "validate"]], "ax.core.parameter_constraint": [[2, 1, 1, "", "OrderConstraint"], [2, 1, 1, "", "ParameterConstraint"], [2, 1, 1, "", "SumConstraint"], [2, 3, 1, "", "validate_constraint_parameters"]], "ax.core.parameter_constraint.OrderConstraint": [[2, 4, 1, "", "clone"], [2, 4, 1, "", "clone_with_transformed_parameters"], [2, 5, 1, "", "constraint_dict"], [2, 5, 1, "", "lower_parameter"], [2, 5, 1, "", "parameters"], [2, 5, 1, "", "upper_parameter"]], "ax.core.parameter_constraint.ParameterConstraint": [[2, 5, 1, "", "bound"], [2, 4, 1, "", "check"], [2, 4, 1, "", "clone"], [2, 4, 1, "", "clone_with_transformed_parameters"], [2, 5, 1, "", "constraint_dict"]], "ax.core.parameter_constraint.SumConstraint": [[2, 4, 1, "", "clone"], [2, 4, 1, "", "clone_with_transformed_parameters"], [2, 5, 1, "", "constraint_dict"], [2, 5, 1, "", "is_upper_bound"], [2, 5, 1, "", "op"], [2, 5, 1, "", "parameters"]], "ax.core.parameter_distribution": [[2, 1, 1, "", "ParameterDistribution"]], "ax.core.parameter_distribution.ParameterDistribution": [[2, 4, 1, "", "clone"], [2, 5, 1, "", "distribution"], [2, 5, 1, "", "distribution_class"], [2, 5, 1, "", "distribution_parameters"], [2, 4, 1, "", "is_environmental"]], "ax.core.risk_measures": [[2, 1, 1, "", "RiskMeasure"]], "ax.core.risk_measures.RiskMeasure": [[2, 4, 1, "", "clone"]], "ax.core.runner": [[2, 1, 1, "", "Runner"]], "ax.core.runner.Runner": [[2, 4, 1, "", "clone"], [2, 4, 1, "", "poll_available_capacity"], [2, 4, 1, "", "poll_exception"], [2, 4, 1, "", "poll_trial_status"], [2, 4, 1, "", "run"], [2, 5, 1, "", "run_metadata_report_keys"], [2, 4, 1, "", "run_multiple"], [2, 5, 1, "", "staging_required"], [2, 4, 1, "", "stop"]], "ax.core.trial": [[2, 1, 1, "", "Trial"]], "ax.core.trial.Trial": [[2, 5, 1, "", "abandoned_arms"], [2, 4, 1, "", "add_arm"], [2, 4, 1, "", "add_generator_run"], [2, 5, 1, "", "arm"], [2, 5, 1, "", "arms"], [2, 5, 1, "", "arms_by_name"], [2, 4, 1, "", "clone_to"], [2, 5, 1, "", "generator_run"], [2, 5, 1, "", "generator_runs"], [2, 4, 1, "", "get_metric_mean"], [2, 5, 1, "", "objective_mean"], [2, 4, 1, "", "update_trial_data"], [2, 4, 1, "", "validate_data_for_trial"]], "ax.core.types": [[2, 1, 1, "", "ComparisonOp"], [2, 3, 1, "", "merge_model_predict"], [2, 3, 1, "", "validate_evaluation_outcome"], [2, 3, 1, "", "validate_fidelity_trial_evaluation"], [2, 3, 1, "", "validate_floatlike"], [2, 3, 1, "", "validate_map_dict"], [2, 3, 1, "", "validate_map_trial_evaluation"], [2, 3, 1, "", "validate_param_value"], [2, 3, 1, "", "validate_parameterization"], [2, 3, 1, "", "validate_single_metric_data"], [2, 3, 1, "", "validate_trial_evaluation"]], "ax.core.types.ComparisonOp": [[2, 2, 1, "", "GEQ"], [2, 2, 1, "", "LEQ"]], "ax.core.utils": [[2, 1, 1, "", "MissingMetrics"], [2, 3, 1, "", "best_feasible_objective"], [2, 3, 1, "", "extend_pending_observations"], [2, 3, 1, "", "extract_pending_observations"], [2, 3, 1, "", "get_missing_metrics"], [2, 3, 1, "", "get_missing_metrics_by_name"], [2, 3, 1, "", "get_model_times"], [2, 3, 1, "", "get_model_trace_of_times"], [2, 3, 1, "", "get_pending_observation_features"], [2, 3, 1, "", "get_pending_observation_features_based_on_trial_status"]], "ax.core.utils.MissingMetrics": [[2, 2, 1, "", "objective"], [2, 2, 1, "", "outcome_constraints"], [2, 2, 1, "", "tracking_metrics"]], "ax.early_stopping.strategies": [[3, 0, 0, "-", "base"], [3, 0, 0, "-", "logical"], [3, 0, 0, "-", "percentile"], [3, 0, 0, "-", "threshold"]], "ax.early_stopping.strategies.base": [[3, 1, 1, "", "BaseEarlyStoppingStrategy"], [3, 1, 1, "", "EarlyStoppingTrainingData"], [3, 1, 1, "", "ModelBasedEarlyStoppingStrategy"], [3, 3, 1, "", "get_transform_helper_model"]], "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy": [[3, 4, 1, "", "is_eligible"], [3, 4, 1, "", "is_eligible_any"], [3, 4, 1, "", "should_stop_trials_early"]], "ax.early_stopping.strategies.base.EarlyStoppingTrainingData": [[3, 2, 1, "", "X"], [3, 2, 1, "", "Y"], [3, 2, 1, "", "Yvar"], [3, 2, 1, "", "arm_names"]], "ax.early_stopping.strategies.base.ModelBasedEarlyStoppingStrategy": [[3, 4, 1, "", "get_training_data"]], "ax.early_stopping.strategies.logical": [[3, 1, 1, "", "AndEarlyStoppingStrategy"], [3, 1, 1, "", "LogicalEarlyStoppingStrategy"], [3, 1, 1, "", "OrEarlyStoppingStrategy"]], "ax.early_stopping.strategies.logical.AndEarlyStoppingStrategy": [[3, 4, 1, "", "should_stop_trials_early"]], "ax.early_stopping.strategies.logical.OrEarlyStoppingStrategy": [[3, 4, 1, "", "from_early_stopping_strategies"], [3, 4, 1, "", "should_stop_trials_early"]], "ax.early_stopping.strategies.percentile": [[3, 1, 1, "", "PercentileEarlyStoppingStrategy"]], "ax.early_stopping.strategies.percentile.PercentileEarlyStoppingStrategy": [[3, 4, 1, "", "should_stop_trials_early"]], "ax.early_stopping.strategies.threshold": [[3, 1, 1, "", "ThresholdEarlyStoppingStrategy"]], "ax.early_stopping.strategies.threshold.ThresholdEarlyStoppingStrategy": [[3, 4, 1, "", "should_stop_trials_early"]], "ax.early_stopping": [[3, 0, 0, "-", "utils"]], "ax.early_stopping.utils": [[3, 3, 1, "", "align_partial_results"], [3, 3, 1, "", "estimate_early_stopping_savings"]], "ax.exceptions": [[4, 0, 0, "-", "constants"], [4, 0, 0, "-", "core"], [4, 0, 0, "-", "data_provider"], [4, 0, 0, "-", "generation_strategy"], [4, 0, 0, "-", "model"], [4, 0, 0, "-", "storage"]], "ax.exceptions.core": [[4, 6, 1, "", "AxError"], [4, 6, 1, "", "AxStorageWarning"], [4, 6, 1, "", "AxWarning"], [4, 6, 1, "", "DataRequiredError"], [4, 6, 1, "", "ExperimentNotFoundError"], [4, 6, 1, "", "ExperimentNotReadyError"], [4, 6, 1, "", "IncompatibleDependencyVersion"], [4, 6, 1, "", "MisconfiguredExperiment"], [4, 6, 1, "", "NoDataError"], [4, 6, 1, "", "ObjectNotFoundError"], [4, 6, 1, "", "OptimizationComplete"], [4, 6, 1, "", "OptimizationShouldStop"], [4, 6, 1, "", "SearchSpaceExhausted"], [4, 6, 1, "", "UnsupportedError"], [4, 6, 1, "", "UnsupportedPlotError"], [4, 6, 1, "", "UserInputError"]], "ax.exceptions.data_provider": [[4, 6, 1, "", "DataProviderError"], [4, 6, 1, "", "MissingDataError"]], "ax.exceptions.generation_strategy": [[4, 6, 1, "", "GenerationStrategyCompleted"], [4, 6, 1, "", "GenerationStrategyMisconfiguredException"], [4, 6, 1, "", "GenerationStrategyRepeatedPoints"], [4, 6, 1, "", "MaxParallelismReachedException"]], "ax.exceptions.model": [[4, 6, 1, "", "CVNotSupportedError"], [4, 6, 1, "", "ModelError"]], "ax.exceptions.storage": [[4, 6, 1, "", "ImmutabilityError"], [4, 6, 1, "", "IncorrectDBConfigurationError"], [4, 6, 1, "", "JSONDecodeError"], [4, 6, 1, "", "JSONEncodeError"], [4, 6, 1, "", "SQADecodeError"], [4, 6, 1, "", "SQAEncodeError"]], "ax.global_stopping.strategies": [[5, 0, 0, "-", "base"], [5, 0, 0, "-", "improvement"]], "ax.global_stopping.strategies.base": [[5, 1, 1, "", "BaseGlobalStoppingStrategy"]], "ax.global_stopping.strategies.base.BaseGlobalStoppingStrategy": [[5, 4, 1, "", "should_stop_optimization"]], "ax.global_stopping.strategies.improvement": [[5, 1, 1, "", "ImprovementGlobalStoppingStrategy"], [5, 3, 1, "", "constraint_satisfaction"]], "ax.metrics": [[7, 0, 0, "-", "botorch_test_problem"], [7, 0, 0, "-", "branin"], [7, 0, 0, "-", "branin_map"], [7, 0, 0, "-", "chemistry"], [7, 0, 0, "-", "curve"], [7, 0, 0, "-", "dict_lookup"], [7, 0, 0, "-", "factorial"], [7, 0, 0, "-", "hartmann6"], [7, 0, 0, "-", "jenatton"], [7, 0, 0, "-", "l2norm"], [7, 0, 0, "-", "noisy_function"], [7, 0, 0, "-", "noisy_function_map"], [7, 0, 0, "-", "sklearn"], [7, 0, 0, "-", "tensorboard"], [7, 0, 0, "-", "torchx"]], "ax.metrics.botorch_test_problem": [[7, 1, 1, "", "BotorchTestProblemMetric"]], "ax.metrics.botorch_test_problem.BotorchTestProblemMetric": [[7, 4, 1, "", "fetch_trial_data"]], "ax.metrics.branin": [[7, 1, 1, "", "AugmentedBraninMetric"], [7, 1, 1, "", "BraninMetric"], [7, 1, 1, "", "NegativeBraninMetric"]], "ax.metrics.branin.AugmentedBraninMetric": [[7, 4, 1, "", "f"]], "ax.metrics.branin.BraninMetric": [[7, 4, 1, "", "f"]], "ax.metrics.branin.NegativeBraninMetric": [[7, 4, 1, "", "f"]], "ax.metrics.branin_map": [[7, 1, 1, "", "BraninFidelityMapMetric"], [7, 1, 1, "", "BraninTimestampMapMetric"], [7, 3, 1, "", "random"]], "ax.metrics.branin_map.BraninFidelityMapMetric": [[7, 4, 1, "", "f"], [7, 4, 1, "", "fetch_trial_data"], [7, 2, 1, "", "map_key_info"]], "ax.metrics.branin_map.BraninTimestampMapMetric": [[7, 4, 1, "", "f"], [7, 4, 1, "", "fetch_trial_data"]], "ax.metrics.chemistry": [[7, 1, 1, "", "ChemistryData"], [7, 1, 1, "", "ChemistryMetric"], [7, 1, 1, "", "ChemistryProblemType"]], "ax.metrics.chemistry.ChemistryData": [[7, 4, 1, "", "evaluate"], [7, 2, 1, "", "objective_dict"], [7, 2, 1, "", "param_names"]], "ax.metrics.chemistry.ChemistryMetric": [[7, 4, 1, "", "clone"], [7, 4, 1, "", "fetch_trial_data"], [7, 2, 1, "", "lower_is_better"], [7, 2, 1, "", "noiseless"]], "ax.metrics.chemistry.ChemistryProblemType": [[7, 2, 1, "", "DIRECT_ARYLATION"], [7, 2, 1, "", "SUZUKI"]], "ax.metrics.curve": [[7, 1, 1, "", "AbstractCurveMetric"], [7, 1, 1, "", "AbstractScalarizedCurveMetric"], [7, 3, 1, "", "get_df_from_curve_series"], [7, 3, 1, "", "get_df_from_scalarized_curve_series"]], "ax.metrics.curve.AbstractCurveMetric": [[7, 4, 1, "", "bulk_fetch_experiment_data"], [7, 4, 1, "", "bulk_fetch_trial_data"], [7, 5, 1, "", "curve_names"], [7, 4, 1, "", "fetch_trial_data"], [7, 4, 1, "", "get_curves_from_ids"], [7, 4, 1, "", "get_df_from_curve_series"], [7, 4, 1, "", "get_ids_from_trials"], [7, 4, 1, "", "is_available_while_running"], [7, 2, 1, "", "map_key_info"]], "ax.metrics.curve.AbstractScalarizedCurveMetric": [[7, 5, 1, "", "curve_names"], [7, 4, 1, "", "get_df_from_curve_series"], [7, 2, 1, "", "properties"]], "ax.metrics.dict_lookup": [[7, 1, 1, "", "DictLookupMetric"]], "ax.metrics.dict_lookup.DictLookupMetric": [[7, 4, 1, "", "clone"], [7, 4, 1, "", "fetch_trial_data"], [7, 4, 1, "", "is_available_while_running"]], "ax.metrics.factorial": [[7, 1, 1, "", "FactorialMetric"], [7, 3, 1, "", "evaluation_function"]], "ax.metrics.factorial.FactorialMetric": [[7, 4, 1, "", "fetch_trial_data"], [7, 4, 1, "", "is_available_while_running"]], "ax.metrics.hartmann6": [[7, 1, 1, "", "AugmentedHartmann6Metric"], [7, 1, 1, "", "Hartmann6Metric"]], "ax.metrics.hartmann6.AugmentedHartmann6Metric": [[7, 4, 1, "", "f"]], "ax.metrics.hartmann6.Hartmann6Metric": [[7, 4, 1, "", "f"]], "ax.metrics.jenatton": [[7, 1, 1, "", "JenattonMetric"]], "ax.metrics.jenatton.JenattonMetric": [[7, 4, 1, "", "fetch_trial_data"]], "ax.metrics.l2norm": [[7, 1, 1, "", "L2NormMetric"]], "ax.metrics.l2norm.L2NormMetric": [[7, 4, 1, "", "f"]], "ax.metrics.noisy_function": [[7, 1, 1, "", "GenericNoisyFunctionMetric"], [7, 1, 1, "", "NoisyFunctionMetric"]], "ax.metrics.noisy_function.GenericNoisyFunctionMetric": [[7, 4, 1, "", "clone"], [7, 5, 1, "", "param_names"]], "ax.metrics.noisy_function.NoisyFunctionMetric": [[7, 4, 1, "", "clone"], [7, 4, 1, "", "f"], [7, 4, 1, "", "fetch_trial_data"], [7, 4, 1, "", "is_available_while_running"]], "ax.metrics.noisy_function_map": [[7, 1, 1, "", "NoisyFunctionMapMetric"]], "ax.metrics.noisy_function_map.NoisyFunctionMapMetric": [[7, 4, 1, "", "clone"], [7, 4, 1, "", "f"], [7, 4, 1, "", "fetch_trial_data"], [7, 4, 1, "", "is_available_while_running"], [7, 2, 1, "", "map_key_info"], [7, 4, 1, "", "overwrite_existing_data"]], "ax.metrics.sklearn": [[7, 1, 1, "", "SklearnDataset"], [7, 1, 1, "", "SklearnMetric"], [7, 1, 1, "", "SklearnModelType"]], "ax.metrics.sklearn.SklearnDataset": [[7, 2, 1, "", "BOSTON"], [7, 2, 1, "", "CANCER"], [7, 2, 1, "", "DIGITS"]], "ax.metrics.sklearn.SklearnMetric": [[7, 4, 1, "", "clone"], [7, 4, 1, "", "fetch_trial_data"], [7, 4, 1, "", "train_eval"]], "ax.metrics.sklearn.SklearnModelType": [[7, 2, 1, "", "NN"], [7, 2, 1, "", "RF"]], "ax.metrics.tensorboard": [[7, 1, 1, "", "TensorboardCurveMetric"], [7, 3, 1, "", "get_tb_from_posix"]], "ax.metrics.tensorboard.TensorboardCurveMetric": [[7, 4, 1, "", "get_curves_from_ids"], [7, 2, 1, "", "map_key_info"]], "ax.metrics.torchx": [[7, 1, 1, "", "TorchXMetric"]], "ax.metrics.torchx.TorchXMetric": [[7, 4, 1, "", "fetch_trial_data"]], "ax.modelbridge": [[8, 0, 0, "-", "base"], [8, 0, 0, "-", "cross_validation"], [8, 0, 0, "-", "discrete"], [8, 0, 0, "-", "dispatch_utils"], [8, 0, 0, "-", "factory"], [8, 0, 0, "-", "generation_node"], [8, 0, 0, "-", "generation_strategy"], [8, 0, 0, "-", "map_torch"], [8, 0, 0, "-", "model_spec"], [8, 0, 0, "-", "modelbridge_utils"], [8, 0, 0, "-", "pairwise"], [8, 0, 0, "-", "prediction_utils"], [8, 0, 0, "-", "registry"], [8, 0, 0, "-", "torch"]], "ax.modelbridge.base": [[8, 1, 1, "", "BaseGenArgs"], [8, 1, 1, "", "GenResults"], [8, 1, 1, "", "ModelBridge"], [8, 3, 1, "", "clamp_observation_features"], [8, 3, 1, "", "gen_arms"], [8, 3, 1, "", "unwrap_observation_data"]], "ax.modelbridge.base.BaseGenArgs": [[8, 2, 1, "", "fixed_features"], [8, 2, 1, "", "optimization_config"], [8, 2, 1, "", "pending_observations"], [8, 2, 1, "", "search_space"]], "ax.modelbridge.base.GenResults": [[8, 2, 1, "", "best_observation_features"], [8, 2, 1, "", "gen_metadata"], [8, 2, 1, "", "observation_features"], [8, 2, 1, "", "weights"]], "ax.modelbridge.base.ModelBridge": [[8, 4, 1, "", "cross_validate"], [8, 4, 1, "", "feature_importances"], [8, 4, 1, "", "gen"], [8, 4, 1, "", "get_training_data"], [8, 5, 1, "", "metric_names"], [8, 5, 1, "", "model_space"], [8, 4, 1, "", "predict"], [8, 5, 1, "", "status_quo"], [8, 5, 1, "", "status_quo_data_by_trial"], [8, 5, 1, "", "training_in_design"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "transform_observations"], [8, 4, 1, "", "update"]], "ax.modelbridge.cross_validation": [[8, 1, 1, "", "AssessModelFitResult"], [8, 1, 1, "", "BestModelSelector"], [8, 1, 1, "", "CVResult"], [8, 1, 1, "", "CallableEnum"], [8, 1, 1, "", "DiagnosticCriterion"], [8, 1, 1, "", "MetricAggregation"], [8, 1, 1, "", "SingleDiagnosticBestModelSelector"], [8, 3, 1, "", "assess_model_fit"], [8, 3, 1, "", "compute_diagnostics"], [8, 3, 1, "", "compute_model_fit_metrics_from_modelbridge"], [8, 3, 1, "", "cross_validate"], [8, 3, 1, "", "cross_validate_by_trial"], [8, 3, 1, "", "has_good_opt_config_model_fit"]], "ax.modelbridge.cross_validation.AssessModelFitResult": [[8, 2, 1, "", "bad_fit_metrics_to_fisher_score"], [8, 2, 1, "", "good_fit_metrics_to_fisher_score"]], "ax.modelbridge.cross_validation.BestModelSelector": [[8, 4, 1, "", "best_diagnostic"]], "ax.modelbridge.cross_validation.CVResult": [[8, 2, 1, "", "observed"], [8, 2, 1, "", "predicted"]], "ax.modelbridge.cross_validation.DiagnosticCriterion": [[8, 2, 1, "", "MIN"]], "ax.modelbridge.cross_validation.MetricAggregation": [[8, 2, 1, "", "MEAN"]], "ax.modelbridge.cross_validation.SingleDiagnosticBestModelSelector": [[8, 4, 1, "", "best_diagnostic"]], "ax.modelbridge.discrete": [[8, 1, 1, "", "DiscreteModelBridge"]], "ax.modelbridge.discrete.DiscreteModelBridge": [[8, 2, 1, "", "model"], [8, 2, 1, "", "outcomes"], [8, 2, 1, "", "parameters"], [8, 2, 1, "", "search_space"]], "ax.modelbridge.dispatch_utils": [[8, 3, 1, "", "calculate_num_initialization_trials"], [8, 3, 1, "", "choose_generation_strategy"], [8, 3, 1, "", "is_saasbo"]], "ax.modelbridge.factory": [[8, 7, 1, "", "DEFAULT_EHVI_BATCH_LIMIT"], [8, 3, 1, "", "get_GPEI"], [8, 3, 1, "", "get_GPKG"], [8, 3, 1, "", "get_GPMES"], [8, 3, 1, "", "get_MOO_EHVI"], [8, 3, 1, "", "get_MOO_NEHVI"], [8, 3, 1, "", "get_MOO_PAREGO"], [8, 3, 1, "", "get_MOO_RS"], [8, 3, 1, "", "get_MTGP_LEGACY"], [8, 3, 1, "", "get_MTGP_NEHVI"], [8, 3, 1, "", "get_MTGP_PAREGO"], [8, 3, 1, "", "get_botorch"], [8, 3, 1, "", "get_empirical_bayes_thompson"], [8, 3, 1, "", "get_factorial"], [8, 3, 1, "", "get_sobol"], [8, 3, 1, "", "get_thompson"], [8, 3, 1, "", "get_uniform"]], "ax.modelbridge.generation_node": [[8, 1, 1, "", "GenerationNode"], [8, 1, 1, "", "GenerationStep"]], "ax.modelbridge.generation_node.GenerationNode": [[8, 5, 1, "", "cv_results"], [8, 5, 1, "", "diagnostics"], [8, 5, 1, "", "experiment"], [8, 4, 1, "", "fit"], [8, 5, 1, "", "fitted_model"], [8, 5, 1, "", "fixed_features"], [8, 4, 1, "", "gen"], [8, 5, 1, "", "gen_unlimited_trials"], [8, 5, 1, "", "generation_strategy"], [8, 4, 1, "", "generator_run_limit"], [8, 5, 1, "", "is_completed"], [8, 5, 1, "", "model_cv_kwargs"], [8, 5, 1, "", "model_enum"], [8, 5, 1, "", "model_gen_kwargs"], [8, 5, 1, "", "model_kwargs"], [8, 5, 1, "", "model_spec_to_gen_from"], [8, 2, 1, "", "model_specs"], [8, 5, 1, "", "model_to_gen_from_name"], [8, 5, 1, "", "node_name"], [8, 2, 1, "", "should_deduplicate"], [8, 4, 1, "", "should_transition_to_next_node"], [8, 5, 1, "", "transition_criteria"], [8, 5, 1, "", "trials_from_node"]], "ax.modelbridge.generation_node.GenerationStep": [[8, 2, 1, "", "completion_criteria"], [8, 2, 1, "", "enforce_num_trials"], [8, 4, 1, "", "gen"], [8, 2, 1, "", "index"], [8, 2, 1, "", "max_parallelism"], [8, 2, 1, "", "min_trials_observed"], [8, 2, 1, "", "model"], [8, 2, 1, "", "model_gen_kwargs"], [8, 2, 1, "", "model_kwargs"], [8, 2, 1, "", "model_name"], [8, 5, 1, "", "model_spec"], [8, 2, 1, "", "num_trials"], [8, 2, 1, "", "should_deduplicate"], [8, 2, 1, "", "use_update"]], "ax.modelbridge.generation_strategy": [[8, 1, 1, "", "GenerationStrategy"], [8, 3, 1, "", "step_based_gs_only"]], "ax.modelbridge.generation_strategy.GenerationStrategy": [[8, 4, 1, "", "clone_reset"], [8, 4, 1, "", "current_generator_run_limit"], [8, 5, 1, "", "current_node"], [8, 5, 1, "", "current_node_name"], [8, 5, 1, "", "current_step"], [8, 5, 1, "", "current_step_index"], [8, 5, 1, "", "experiment"], [8, 4, 1, "", "gen"], [8, 4, 1, "", "gen_for_multiple_trials_with_multiple_models"], [8, 5, 1, "", "is_node_based"], [8, 5, 1, "", "model"], [8, 5, 1, "", "model_transitions"], [8, 5, 1, "", "name"], [8, 5, 1, "", "optimization_complete"], [8, 5, 1, "", "trials_as_df"], [8, 5, 1, "", "uses_non_registered_models"]], "ax.modelbridge.map_torch": [[8, 1, 1, "", "MapTorchModelBridge"]], "ax.modelbridge.map_torch.MapTorchModelBridge": [[8, 2, 1, "", "dtype"], [8, 2, 1, "", "fit_time"], [8, 2, 1, "", "fit_time_since_gen"], [8, 2, 1, "", "is_moo_problem"], [8, 2, 1, "", "outcomes"], [8, 2, 1, "", "parameters"], [8, 5, 1, "", "parameters_with_map_keys"], [8, 2, 1, "", "transforms"]], "ax.modelbridge.model_spec": [[8, 1, 1, "", "FactoryFunctionModelSpec"], [8, 1, 1, "", "ModelSpec"], [8, 1, 1, "", "ModelSpecJSONEncoder"]], "ax.modelbridge.model_spec.FactoryFunctionModelSpec": [[8, 2, 1, "", "factory_function"], [8, 4, 1, "", "fit"], [8, 2, 1, "", "model_enum"], [8, 5, 1, "", "model_key"]], "ax.modelbridge.model_spec.ModelSpec": [[8, 4, 1, "", "copy"], [8, 4, 1, "", "cross_validate"], [8, 5, 1, "", "cv_results"], [8, 5, 1, "", "diagnostics"], [8, 4, 1, "", "fit"], [8, 5, 1, "", "fitted_model"], [8, 5, 1, "", "fixed_features"], [8, 4, 1, "", "gen"], [8, 2, 1, "", "model_cv_kwargs"], [8, 2, 1, "", "model_enum"], [8, 2, 1, "", "model_gen_kwargs"], [8, 5, 1, "", "model_key"], [8, 2, 1, "", "model_kwargs"]], "ax.modelbridge.model_spec.ModelSpecJSONEncoder": [[8, 4, 1, "", "default"]], "ax.modelbridge.modelbridge_utils": [[8, 3, 1, "", "array_to_observation_data"], [8, 3, 1, "", "check_has_multi_objective_and_data"], [8, 3, 1, "", "extract_objective_thresholds"], [8, 3, 1, "", "extract_objective_weights"], [8, 3, 1, "", "extract_outcome_constraints"], [8, 3, 1, "", "extract_parameter_constraints"], [8, 3, 1, "", "extract_risk_measure"], [8, 3, 1, "", "extract_robust_digest"], [8, 3, 1, "", "extract_search_space_digest"], [8, 3, 1, "", "feasible_hypervolume"], [8, 3, 1, "", "get_fixed_features"], [8, 3, 1, "", "get_fixed_features_from_experiment"], [8, 3, 1, "", "get_pareto_frontier_and_configs"], [8, 3, 1, "", "hypervolume"], [8, 3, 1, "", "observation_data_to_array"], [8, 3, 1, "", "observation_features_to_array"], [8, 3, 1, "", "observed_hypervolume"], [8, 3, 1, "", "observed_pareto_frontier"], [8, 3, 1, "", "pareto_frontier"], [8, 3, 1, "", "parse_observation_features"], [8, 3, 1, "", "pending_observations_as_array_list"], [8, 3, 1, "", "predicted_hypervolume"], [8, 3, 1, "", "predicted_pareto_frontier"], [8, 3, 1, "", "process_contextual_datasets"], [8, 3, 1, "", "transform_callback"], [8, 3, 1, "", "transform_search_space"], [8, 3, 1, "", "validate_and_apply_final_transform"]], "ax.modelbridge.pairwise": [[8, 1, 1, "", "PairwiseModelBridge"]], "ax.modelbridge.pairwise.PairwiseModelBridge": [[8, 2, 1, "", "dtype"], [8, 2, 1, "", "fit_time"], [8, 2, 1, "", "fit_time_since_gen"], [8, 2, 1, "", "is_moo_problem"], [8, 2, 1, "", "outcomes"], [8, 2, 1, "", "parameters"], [8, 2, 1, "", "transforms"]], "ax.modelbridge.prediction_utils": [[8, 3, 1, "", "predict_at_point"], [8, 3, 1, "", "predict_by_features"]], "ax.modelbridge.registry": [[8, 1, 1, "", "ModelRegistryBase"], [8, 1, 1, "", "ModelSetup"], [8, 1, 1, "", "Models"], [8, 3, 1, "", "get_model_from_generator_run"]], "ax.modelbridge.registry.ModelRegistryBase": [[8, 5, 1, "", "model_bridge_class"], [8, 5, 1, "", "model_class"], [8, 4, 1, "", "view_defaults"], [8, 4, 1, "", "view_kwargs"]], "ax.modelbridge.registry.ModelSetup": [[8, 2, 1, "", "bridge_class"], [8, 2, 1, "", "default_model_kwargs"], [8, 2, 1, "", "model_class"], [8, 2, 1, "", "not_saved_model_kwargs"], [8, 2, 1, "", "standard_bridge_kwargs"], [8, 2, 1, "", "transforms"]], "ax.modelbridge.registry.Models": [[8, 2, 1, "", "ALEBO"], [8, 2, 1, "", "ALEBO_INITIALIZER"], [8, 5, 1, "", "BOTORCH"], [8, 2, 1, "", "BOTORCH_MODULAR"], [8, 2, 1, "", "BO_MIXED"], [8, 2, 1, "", "CONTEXT_SACBO"], [8, 2, 1, "", "EMPIRICAL_BAYES_THOMPSON"], [8, 2, 1, "", "FACTORIAL"], [8, 2, 1, "", "FULLYBAYESIAN"], [8, 2, 1, "", "FULLYBAYESIANMOO"], [8, 2, 1, "", "FULLYBAYESIANMOO_MTGP"], [8, 2, 1, "", "FULLYBAYESIAN_MTGP"], [8, 2, 1, "", "GPEI"], [8, 2, 1, "", "GPKG"], [8, 2, 1, "", "GPMES"], [8, 2, 1, "", "LEGACY_BOTORCH"], [8, 2, 1, "", "MOO"], [8, 2, 1, "", "SAASBO"], [8, 2, 1, "", "SAAS_MTGP"], [8, 2, 1, "", "SOBOL"], [8, 2, 1, "", "ST_MTGP"], [8, 2, 1, "", "ST_MTGP_LEGACY"], [8, 2, 1, "", "ST_MTGP_NEHVI"], [8, 2, 1, "", "THOMPSON"], [8, 2, 1, "", "UNIFORM"]], "ax.modelbridge.strategies": [[8, 0, 0, "-", "alebo"], [8, 0, 0, "-", "rembo"]], "ax.modelbridge.strategies.alebo": [[8, 1, 1, "", "ALEBOStrategy"], [8, 3, 1, "", "get_ALEBO"], [8, 3, 1, "", "get_ALEBOInitializer"]], "ax.modelbridge.strategies.alebo.ALEBOStrategy": [[8, 4, 1, "", "clone_reset"], [8, 4, 1, "", "gen_projection"]], "ax.modelbridge.strategies.rembo": [[8, 1, 1, "", "HeSBOStrategy"], [8, 1, 1, "", "REMBOStrategy"], [8, 3, 1, "", "get_REMBO"], [8, 3, 1, "", "get_rembo_initializer"]], "ax.modelbridge.strategies.rembo.HeSBOStrategy": [[8, 4, 1, "", "get_projection"]], "ax.modelbridge.strategies.rembo.REMBOStrategy": [[8, 4, 1, "", "clone_reset"], [8, 4, 1, "", "gen"], [8, 4, 1, "", "get_projection"], [8, 5, 1, "", "model_transitions"]], "ax.modelbridge.torch": [[8, 1, 1, "", "TorchModelBridge"], [8, 3, 1, "", "validate_optimization_config"]], "ax.modelbridge.torch.TorchModelBridge": [[8, 4, 1, "", "evaluate_acquisition_function"], [8, 4, 1, "", "feature_importances"], [8, 4, 1, "", "infer_objective_thresholds"], [8, 2, 1, "", "model"], [8, 4, 1, "", "model_best_point"], [8, 2, 1, "", "outcomes"], [8, 2, 1, "", "parameters"]], "ax.modelbridge.transforms": [[8, 0, 0, "-", "base"], [8, 0, 0, "-", "cap_parameter"], [8, 0, 0, "-", "cast"], [8, 0, 0, "-", "centered_unit_x"], [8, 0, 0, "-", "choice_encode"], [8, 0, 0, "-", "convert_metric_names"], [8, 0, 0, "-", "derelativize"], [8, 0, 0, "-", "int_range_to_choice"], [8, 0, 0, "-", "int_to_float"], [8, 0, 0, "-", "inverse_gaussian_cdf_y"], [8, 0, 0, "-", "ivw"], [8, 0, 0, "-", "log"], [8, 0, 0, "-", "log_y"], [8, 0, 0, "-", "logit"], [8, 0, 0, "-", "map_unit_x"], [8, 0, 0, "-", "merge_repeated_measurements"], [8, 0, 0, "-", "metrics_as_task"], [8, 0, 0, "-", "one_hot"], [8, 0, 0, "-", "percentile_y"], [8, 0, 0, "-", "power_transform_y"], [8, 0, 0, "-", "relativize"], [8, 0, 0, "-", "remove_fixed"], [8, 0, 0, "-", "rounding"], [8, 0, 0, "-", "search_space_to_choice"], [8, 0, 0, "-", "standardize_y"], [8, 0, 0, "-", "stratified_standardize_y"], [8, 0, 0, "-", "task_encode"], [8, 0, 0, "-", "trial_as_task"], [8, 0, 0, "-", "unit_x"], [8, 0, 0, "-", "utils"], [8, 0, 0, "-", "winsorize"]], "ax.modelbridge.transforms.base": [[8, 1, 1, "", "Transform"]], "ax.modelbridge.transforms.base.Transform": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "transform_observations"], [8, 4, 1, "", "transform_optimization_config"], [8, 4, 1, "", "transform_search_space"], [8, 4, 1, "", "untransform_observation_features"], [8, 4, 1, "", "untransform_observations"], [8, 4, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.cap_parameter": [[8, 1, 1, "", "CapParameter"]], "ax.modelbridge.transforms.cap_parameter.CapParameter": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"]], "ax.modelbridge.transforms.cast": [[8, 1, 1, "", "Cast"]], "ax.modelbridge.transforms.cast.Cast": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.centered_unit_x": [[8, 1, 1, "", "CenteredUnitX"]], "ax.modelbridge.transforms.centered_unit_x.CenteredUnitX": [[8, 2, 1, "", "target_lb"], [8, 2, 1, "", "target_range"]], "ax.modelbridge.transforms.choice_encode": [[8, 1, 1, "", "ChoiceEncode"], [8, 1, 1, "", "OrderedChoiceEncode"], [8, 3, 1, "", "transform_choice_values"]], "ax.modelbridge.transforms.choice_encode.ChoiceEncode": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.choice_encode.OrderedChoiceEncode": [[8, 2, 1, "", "config"], [8, 2, 1, "", "encoded_parameters"], [8, 2, 1, "", "encoded_parameters_inverse"], [8, 2, 1, "", "modelbridge"]], "ax.modelbridge.transforms.convert_metric_names": [[8, 1, 1, "", "ConvertMetricNames"], [8, 3, 1, "", "convert_mt_observations"], [8, 3, 1, "", "tconfig_from_mt_experiment"]], "ax.modelbridge.transforms.convert_metric_names.ConvertMetricNames": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "untransform_observations"]], "ax.modelbridge.transforms.derelativize": [[8, 1, 1, "", "Derelativize"]], "ax.modelbridge.transforms.derelativize.Derelativize": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_optimization_config"], [8, 4, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.int_range_to_choice": [[8, 1, 1, "", "IntRangeToChoice"]], "ax.modelbridge.transforms.int_range_to_choice.IntRangeToChoice": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"]], "ax.modelbridge.transforms.int_to_float": [[8, 1, 1, "", "IntToFloat"]], "ax.modelbridge.transforms.int_to_float.IntToFloat": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.inverse_gaussian_cdf_y": [[8, 1, 1, "", "InverseGaussianCdfY"]], "ax.modelbridge.transforms.inverse_gaussian_cdf_y.InverseGaussianCdfY": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"]], "ax.modelbridge.transforms.ivw": [[8, 1, 1, "", "IVW"], [8, 3, 1, "", "ivw_metric_merge"]], "ax.modelbridge.transforms.ivw.IVW": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"]], "ax.modelbridge.transforms.log": [[8, 1, 1, "", "Log"]], "ax.modelbridge.transforms.log.Log": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.log_y": [[8, 1, 1, "", "LogY"], [8, 3, 1, "", "lognorm_to_norm"], [8, 3, 1, "", "match_ci_width"], [8, 3, 1, "", "norm_to_lognorm"]], "ax.modelbridge.transforms.log_y.LogY": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_optimization_config"], [8, 4, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.logit": [[8, 1, 1, "", "Logit"]], "ax.modelbridge.transforms.logit.Logit": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.map_unit_x": [[8, 1, 1, "", "MapUnitX"]], "ax.modelbridge.transforms.map_unit_x.MapUnitX": [[8, 2, 1, "", "target_lb"], [8, 2, 1, "", "target_range"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.merge_repeated_measurements": [[8, 1, 1, "", "MergeRepeatedMeasurements"]], "ax.modelbridge.transforms.merge_repeated_measurements.MergeRepeatedMeasurements": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observations"]], "ax.modelbridge.transforms.metrics_as_task": [[8, 1, 1, "", "MetricsAsTask"]], "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "transform_observations"], [8, 4, 1, "", "untransform_observation_features"], [8, 4, 1, "", "untransform_observations"]], "ax.modelbridge.transforms.one_hot": [[8, 1, 1, "", "OneHot"], [8, 1, 1, "", "OneHotEncoder"]], "ax.modelbridge.transforms.one_hot.OneHot": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.one_hot.OneHotEncoder": [[8, 4, 1, "", "inverse_transform"], [8, 4, 1, "", "transform"]], "ax.modelbridge.transforms.percentile_y": [[8, 1, 1, "", "PercentileY"]], "ax.modelbridge.transforms.percentile_y.PercentileY": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"]], "ax.modelbridge.transforms.power_transform_y": [[8, 1, 1, "", "PowerTransformY"]], "ax.modelbridge.transforms.power_transform_y.PowerTransformY": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_optimization_config"], [8, 4, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.relativize": [[8, 1, 1, "", "BaseRelativize"], [8, 1, 1, "", "Relativize"], [8, 1, 1, "", "RelativizeWithConstantControl"]], "ax.modelbridge.transforms.relativize.BaseRelativize": [[8, 2, 1, "", "MISSING_STATUS_QUO_ERROR"], [8, 2, 1, "", "config"], [8, 5, 1, "", "control_as_constant"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observations"], [8, 4, 1, "", "transform_optimization_config"], [8, 4, 1, "", "untransform_observations"], [8, 4, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.relativize.Relativize": [[8, 2, 1, "", "config"], [8, 5, 1, "", "control_as_constant"], [8, 2, 1, "", "modelbridge"]], "ax.modelbridge.transforms.relativize.RelativizeWithConstantControl": [[8, 2, 1, "", "config"], [8, 5, 1, "", "control_as_constant"], [8, 2, 1, "", "modelbridge"]], "ax.modelbridge.transforms.remove_fixed": [[8, 1, 1, "", "RemoveFixed"]], "ax.modelbridge.transforms.remove_fixed.RemoveFixed": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.rounding": [[8, 3, 1, "", "contains_constrained_integer"], [8, 3, 1, "", "randomized_onehot_round"], [8, 3, 1, "", "randomized_round"], [8, 3, 1, "", "randomized_round_parameters"], [8, 3, 1, "", "strict_onehot_round"]], "ax.modelbridge.transforms.search_space_to_choice": [[8, 1, 1, "", "SearchSpaceToChoice"]], "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.standardize_y": [[8, 1, 1, "", "StandardizeY"], [8, 3, 1, "", "compute_standardization_parameters"]], "ax.modelbridge.transforms.standardize_y.StandardizeY": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_optimization_config"], [8, 4, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.stratified_standardize_y": [[8, 1, 1, "", "StratifiedStandardizeY"]], "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observations"], [8, 4, 1, "", "transform_optimization_config"], [8, 4, 1, "", "untransform_observations"], [8, 4, 1, "", "untransform_outcome_constraints"]], "ax.modelbridge.transforms.task_encode": [[8, 1, 1, "", "TaskEncode"]], "ax.modelbridge.transforms.task_encode.TaskEncode": [[8, 2, 1, "", "config"], [8, 2, 1, "", "encoded_parameters"], [8, 2, 1, "", "encoded_parameters_inverse"], [8, 2, 1, "", "modelbridge"]], "ax.modelbridge.transforms.trial_as_task": [[8, 1, 1, "", "TrialAsTask"]], "ax.modelbridge.transforms.trial_as_task.TrialAsTask": [[8, 2, 1, "", "config"], [8, 2, 1, "", "modelbridge"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.unit_x": [[8, 1, 1, "", "UnitX"]], "ax.modelbridge.transforms.unit_x.UnitX": [[8, 2, 1, "", "target_lb"], [8, 2, 1, "", "target_range"], [8, 4, 1, "", "transform_observation_features"], [8, 4, 1, "", "untransform_observation_features"]], "ax.modelbridge.transforms.utils": [[8, 1, 1, "", "ClosestLookupDict"], [8, 3, 1, "", "construct_new_search_space"], [8, 3, 1, "", "derelativize_optimization_config_with_raw_status_quo"], [8, 3, 1, "", "get_data"], [8, 3, 1, "", "match_ci_width_truncated"]], "ax.modelbridge.transforms.winsorize": [[8, 1, 1, "", "Winsorize"]], "ax.modelbridge.transforms.winsorize.Winsorize": [[8, 2, 1, "", "cutoffs"]], "ax.models": [[9, 0, 0, "-", "base"], [9, 0, 0, "-", "discrete_base"], [9, 0, 0, "-", "model_utils"], [9, 0, 0, "-", "torch_base"], [9, 0, 0, "-", "types"], [9, 0, 0, "-", "winsorization_config"]], "ax.models.base": [[9, 1, 1, "", "Model"]], "ax.models.base.Model": [[9, 4, 1, "", "deserialize_state"], [9, 4, 1, "", "feature_importances"], [9, 4, 1, "", "serialize_state"]], "ax.models.discrete": [[9, 0, 0, "-", "eb_thompson"], [9, 0, 0, "-", "full_factorial"], [9, 0, 0, "-", "thompson"]], "ax.models.discrete.eb_thompson": [[9, 1, 1, "", "EmpiricalBayesThompsonSampler"]], "ax.models.discrete.full_factorial": [[9, 1, 1, "", "FullFactorialGenerator"]], "ax.models.discrete.full_factorial.FullFactorialGenerator": [[9, 4, 1, "", "gen"]], "ax.models.discrete.thompson": [[9, 1, 1, "", "ThompsonSampler"]], "ax.models.discrete.thompson.ThompsonSampler": [[9, 4, 1, "", "fit"], [9, 4, 1, "", "gen"], [9, 4, 1, "", "predict"]], "ax.models.discrete_base": [[9, 1, 1, "", "DiscreteModel"]], "ax.models.discrete_base.DiscreteModel": [[9, 4, 1, "", "best_point"], [9, 4, 1, "", "cross_validate"], [9, 4, 1, "", "fit"], [9, 4, 1, "", "gen"], [9, 4, 1, "", "predict"]], "ax.models.model_utils": [[9, 1, 1, "", "TorchModelLike"], [9, 3, 1, "", "add_fixed_features"], [9, 3, 1, "", "as_array"], [9, 3, 1, "", "best_in_sample_point"], [9, 3, 1, "", "best_observed_point"], [9, 3, 1, "", "check_duplicate"], [9, 3, 1, "", "check_param_constraints"], [9, 3, 1, "", "enumerate_discrete_combinations"], [9, 3, 1, "", "filter_constraints_and_fixed_features"], [9, 3, 1, "", "get_observed"], [9, 3, 1, "", "mk_discrete_choices"], [9, 3, 1, "", "rejection_sample"], [9, 3, 1, "", "tunable_feature_indices"], [9, 3, 1, "", "validate_bounds"]], "ax.models.model_utils.TorchModelLike": [[9, 4, 1, "", "predict"]], "ax.models.random": [[9, 0, 0, "-", "alebo_initializer"], [9, 0, 0, "-", "base"], [9, 0, 0, "-", "rembo_initializer"], [9, 0, 0, "-", "sobol"], [9, 0, 0, "-", "uniform"]], "ax.models.random.alebo_initializer": [[9, 1, 1, "", "ALEBOInitializer"]], "ax.models.random.alebo_initializer.ALEBOInitializer": [[9, 4, 1, "", "gen"]], "ax.models.random.base": [[9, 1, 1, "", "RandomModel"]], "ax.models.random.base.RandomModel": [[9, 2, 1, "", "deduplicate"], [9, 2, 1, "", "fallback_to_sample_polytope"], [9, 4, 1, "", "gen"], [9, 2, 1, "", "generated_points"], [9, 2, 1, "", "seed"]], "ax.models.random.rembo_initializer": [[9, 1, 1, "", "REMBOInitializer"]], "ax.models.random.rembo_initializer.REMBOInitializer": [[9, 4, 1, "", "gen"], [9, 4, 1, "", "project_up"]], "ax.models.random.sobol": [[9, 1, 1, "", "SobolGenerator"]], "ax.models.random.sobol.SobolGenerator": [[9, 5, 1, "", "engine"], [9, 4, 1, "", "gen"], [9, 4, 1, "", "init_engine"], [9, 2, 1, "", "init_position"], [9, 2, 1, "", "scramble"]], "ax.models.random.uniform": [[9, 1, 1, "", "UniformGenerator"]], "ax.models.torch": [[9, 0, 0, "-", "alebo"], [9, 0, 0, "-", "botorch"], [9, 0, 0, "-", "botorch_defaults"], [9, 0, 0, "-", "botorch_kg"], [9, 0, 0, "-", "botorch_mes"], [9, 0, 0, "-", "botorch_moo"], [9, 0, 0, "-", "botorch_moo_defaults"], [9, 0, 0, "-", "cbo_lcea"], [9, 0, 0, "-", "cbo_lcem"], [9, 0, 0, "-", "cbo_sac"], [9, 0, 0, "-", "frontier_utils"], [9, 0, 0, "-", "fully_bayesian"], [9, 0, 0, "-", "fully_bayesian_model_utils"], [9, 0, 0, "-", "posterior_mean"], [9, 0, 0, "-", "randomforest"], [9, 0, 0, "-", "rembo"], [9, 0, 0, "-", "utils"]], "ax.models.torch.alebo": [[9, 1, 1, "", "ALEBO"], [9, 1, 1, "", "ALEBOGP"], [9, 1, 1, "", "ALEBOKernel"], [9, 3, 1, "", "alebo_acqf_optimizer"], [9, 3, 1, "", "ei_or_nei"], [9, 3, 1, "", "extract_map_statedict"], [9, 3, 1, "", "get_batch_model"], [9, 3, 1, "", "get_fitted_model"], [9, 3, 1, "", "get_map_model"], [9, 3, 1, "", "laplace_sample_U"], [9, 3, 1, "", "module_to_array"], [9, 3, 1, "", "set_params_with_array"]], "ax.models.torch.alebo.ALEBO": [[9, 2, 1, "", "Xs"], [9, 2, 1, "", "Ys"], [9, 2, 1, "", "Yvars"], [9, 4, 1, "", "best_point"], [9, 4, 1, "", "cross_validate"], [9, 4, 1, "", "fit"], [9, 4, 1, "", "gen"], [9, 4, 1, "", "get_and_fit_model"], [9, 4, 1, "", "predict"]], "ax.models.torch.alebo.ALEBOGP": [[9, 4, 1, "", "posterior"]], "ax.models.torch.alebo.ALEBOKernel": [[9, 4, 1, "", "forward"], [9, 2, 1, "", "training"]], "ax.models.torch.botorch": [[9, 1, 1, "", "BotorchModel"], [9, 3, 1, "", "get_feature_importances_from_botorch_model"], [9, 3, 1, "", "get_rounding_func"]], "ax.models.torch.botorch.BotorchModel": [[9, 2, 1, "", "Xs"], [9, 2, 1, "", "Ys"], [9, 2, 1, "", "Yvars"], [9, 4, 1, "", "best_point"], [9, 4, 1, "", "cross_validate"], [9, 4, 1, "", "feature_importances"], [9, 4, 1, "", "fit"], [9, 4, 1, "", "gen"], [9, 5, 1, "", "model"], [9, 4, 1, "", "predict"], [9, 5, 1, "", "search_space_digest"]], "ax.models.torch.botorch_defaults": [[9, 1, 1, "", "TAcqfConstructor"], [9, 3, 1, "", "get_NEI"], [9, 3, 1, "", "get_acqf"], [9, 3, 1, "", "get_and_fit_model"], [9, 3, 1, "", "get_qEI"], [9, 3, 1, "", "get_qLogEI"], [9, 3, 1, "", "get_qLogNEI"], [9, 3, 1, "", "get_warping_transform"], [9, 3, 1, "", "recommend_best_observed_point"], [9, 3, 1, "", "recommend_best_out_of_sample_point"], [9, 3, 1, "", "scipy_optimizer"]], "ax.models.torch.botorch_kg": [[9, 1, 1, "", "KnowledgeGradient"]], "ax.models.torch.botorch_kg.KnowledgeGradient": [[9, 2, 1, "", "Xs"], [9, 2, 1, "", "Ys"], [9, 2, 1, "", "Yvars"], [9, 2, 1, "", "fidelity_features"], [9, 4, 1, "", "gen"], [9, 2, 1, "", "metric_names"], [9, 2, 1, "", "task_features"]], "ax.models.torch.botorch_mes": [[9, 1, 1, "", "MaxValueEntropySearch"]], "ax.models.torch.botorch_mes.MaxValueEntropySearch": [[9, 2, 1, "", "Xs"], [9, 2, 1, "", "Ys"], [9, 2, 1, "", "Yvars"], [9, 2, 1, "", "fidelity_features"], [9, 4, 1, "", "gen"], [9, 2, 1, "", "metric_names"], [9, 2, 1, "", "task_features"]], "ax.models.torch.botorch_modular": [[9, 0, 0, "-", "acquisition"], [9, 0, 0, "-", "kernels"], [9, 0, 0, "-", "model"], [9, 0, 0, "-", "multi_fidelity"], [9, 0, 0, "-", "optimizer_argparse"], [9, 0, 0, "-", "sebo"], [9, 0, 0, "-", "surrogate"], [9, 0, 0, "-", "utils"]], "ax.models.torch.botorch_modular.acquisition": [[9, 1, 1, "", "Acquisition"]], "ax.models.torch.botorch_modular.acquisition.Acquisition": [[9, 2, 1, "", "acqf"], [9, 5, 1, "", "botorch_acqf_class"], [9, 4, 1, "", "compute_model_dependencies"], [9, 5, 1, "", "device"], [9, 5, 1, "", "dtype"], [9, 4, 1, "", "evaluate"], [9, 4, 1, "", "get_botorch_objective_and_transform"], [9, 5, 1, "", "objective_thresholds"], [9, 5, 1, "", "objective_weights"], [9, 4, 1, "", "optimize"], [9, 2, 1, "", "options"], [9, 2, 1, "", "surrogates"]], "ax.models.torch.botorch_modular.input_constructors": [[9, 0, 0, "-", "covar_modules"], [9, 0, 0, "-", "input_transforms"], [9, 0, 0, "-", "outcome_transform"]], "ax.models.torch.botorch_modular.kernels": [[9, 1, 1, "", "ScaleMaternKernel"], [9, 1, 1, "", "TemporalKernel"]], "ax.models.torch.botorch_modular.kernels.ScaleMaternKernel": [[9, 2, 1, "", "training"]], "ax.models.torch.botorch_modular.kernels.TemporalKernel": [[9, 2, 1, "", "training"]], "ax.models.torch.botorch_modular.model": [[9, 1, 1, "", "BoTorchModel"], [9, 1, 1, "", "SurrogateSpec"], [9, 3, 1, "", "single_surrogate_only"]], "ax.models.torch.botorch_modular.model.BoTorchModel": [[9, 5, 1, "", "Xs"], [9, 2, 1, "", "acquisition_class"], [9, 2, 1, "", "acquisition_options"], [9, 4, 1, "", "best_point"], [9, 5, 1, "", "botorch_acqf_class"], [9, 4, 1, "", "cross_validate"], [9, 5, 1, "", "device"], [9, 5, 1, "", "dtype"], [9, 4, 1, "", "evaluate_acquisition_function"], [9, 4, 1, "", "feature_importances"], [9, 4, 1, "", "fit"], [9, 4, 1, "", "gen"], [9, 5, 1, "", "outcomes_by_surrogate_label"], [9, 5, 1, "", "output_order"], [9, 4, 1, "", "predict"], [9, 4, 1, "", "predict_from_surrogate"], [9, 5, 1, "", "search_space_digest"], [9, 5, 1, "", "surrogate"], [9, 2, 1, "", "surrogate_specs"], [9, 5, 1, "", "surrogates"]], "ax.models.torch.botorch_modular.model.SurrogateSpec": [[9, 2, 1, "", "allow_batched_models"], [9, 2, 1, "", "botorch_model_class"], [9, 2, 1, "", "botorch_model_kwargs"], [9, 2, 1, "", "covar_module_class"], [9, 2, 1, "", "covar_module_kwargs"], [9, 2, 1, "", "input_transform_classes"], [9, 2, 1, "", "input_transform_options"], [9, 2, 1, "", "likelihood_class"], [9, 2, 1, "", "likelihood_kwargs"], [9, 2, 1, "", "mll_class"], [9, 2, 1, "", "mll_kwargs"], [9, 2, 1, "", "outcome_transform_classes"], [9, 2, 1, "", "outcome_transform_options"], [9, 2, 1, "", "outcomes"]], "ax.models.torch.botorch_modular.multi_fidelity": [[9, 1, 1, "", "MultiFidelityAcquisition"]], "ax.models.torch.botorch_modular.multi_fidelity.MultiFidelityAcquisition": [[9, 2, 1, "", "X_observed"], [9, 2, 1, "", "X_pending"], [9, 2, 1, "", "acqf"], [9, 4, 1, "", "compute_model_dependencies"], [9, 2, 1, "", "options"], [9, 2, 1, "", "surrogates"]], "ax.models.torch.botorch_modular.sebo": [[9, 3, 1, "", "L1_norm_func"], [9, 1, 1, "", "SEBOAcquisition"], [9, 3, 1, "", "clamp_candidates"], [9, 3, 1, "", "get_batch_initial_conditions"]], "ax.models.torch.botorch_modular.sebo.SEBOAcquisition": [[9, 2, 1, "", "X_observed"], [9, 2, 1, "", "X_pending"], [9, 2, 1, "", "acqf"], [9, 4, 1, "", "optimize"], [9, 2, 1, "", "options"], [9, 2, 1, "", "surrogates"]], "ax.models.torch.botorch_modular.surrogate": [[9, 1, 1, "", "Surrogate"]], "ax.models.torch.botorch_modular.surrogate.Surrogate": [[9, 5, 1, "", "Xs"], [9, 4, 1, "", "best_in_sample_point"], [9, 4, 1, "", "best_out_of_sample_point"], [9, 4, 1, "", "clone_reset"], [9, 4, 1, "", "compute_diagnostics"], [9, 5, 1, "", "device"], [9, 5, 1, "", "dtype"], [9, 4, 1, "", "fit"], [9, 5, 1, "", "model"], [9, 5, 1, "", "outcomes"], [9, 4, 1, "", "pareto_frontier"], [9, 4, 1, "", "predict"], [9, 5, 1, "", "training_data"]], "ax.models.torch.botorch_modular.utils": [[9, 3, 1, "", "check_outcome_dataset_match"], [9, 3, 1, "", "choose_botorch_acqf_class"], [9, 3, 1, "", "choose_model_class"], [9, 3, 1, "", "construct_acquisition_and_optimizer_options"], [9, 3, 1, "", "convert_to_block_design"], [9, 3, 1, "", "fit_botorch_model"], [9, 3, 1, "", "get_post_processing_func"], [9, 3, 1, "", "get_subset_datasets"], [9, 3, 1, "", "subset_state_dict"], [9, 3, 1, "", "use_model_list"]], "ax.models.torch.botorch_moo": [[9, 1, 1, "", "MultiObjectiveBotorchModel"]], "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel": [[9, 2, 1, "", "Xs"], [9, 2, 1, "", "Ys"], [9, 2, 1, "", "Yvars"], [9, 4, 1, "", "gen"]], "ax.models.torch.botorch_moo_defaults": [[9, 3, 1, "", "get_EHVI"], [9, 3, 1, "", "get_NEHVI"], [9, 3, 1, "", "get_default_frontier_evaluator"], [9, 3, 1, "", "get_qLogEHVI"], [9, 3, 1, "", "get_qLogNEHVI"], [9, 3, 1, "", "get_weighted_mc_objective_and_objective_thresholds"], [9, 3, 1, "", "infer_objective_thresholds"], [9, 3, 1, "", "pareto_frontier_evaluator"], [9, 3, 1, "", "scipy_optimizer_list"]], "ax.models.torch.cbo_lcea": [[9, 1, 1, "", "LCEABO"], [9, 3, 1, "", "get_map_model"]], "ax.models.torch.cbo_lcea.LCEABO": [[9, 2, 1, "", "Xs"], [9, 2, 1, "", "Ys"], [9, 2, 1, "", "Yvars"], [9, 4, 1, "", "best_point"], [9, 2, 1, "", "fidelity_features"], [9, 4, 1, "", "fit"], [9, 4, 1, "", "get_and_fit_model"], [9, 2, 1, "", "metric_names"], [9, 5, 1, "", "model"], [9, 2, 1, "", "task_features"]], "ax.models.torch.cbo_lcem": [[9, 1, 1, "", "LCEMBO"]], "ax.models.torch.cbo_lcem.LCEMBO": [[9, 2, 1, "", "Xs"], [9, 2, 1, "", "Ys"], [9, 2, 1, "", "Yvars"], [9, 2, 1, "", "fidelity_features"], [9, 4, 1, "", "get_and_fit_model"], [9, 2, 1, "", "metric_names"], [9, 2, 1, "", "task_features"]], "ax.models.torch.cbo_sac": [[9, 1, 1, "", "SACBO"], [9, 3, 1, "", "generate_model_space_decomposition"]], "ax.models.torch.cbo_sac.SACBO": [[9, 2, 1, "", "Xs"], [9, 2, 1, "", "Ys"], [9, 2, 1, "", "Yvars"], [9, 2, 1, "", "fidelity_features"], [9, 4, 1, "", "fit"], [9, 4, 1, "", "get_and_fit_model"], [9, 2, 1, "", "metric_names"], [9, 2, 1, "", "task_features"]], "ax.models.torch.frontier_utils": [[9, 3, 1, "", "get_default_frontier_evaluator"], [9, 3, 1, "", "get_weighted_mc_objective_and_objective_thresholds"]], "ax.models.torch.fully_bayesian": [[9, 1, 1, "", "FullyBayesianBotorchModel"], [9, 1, 1, "", "FullyBayesianBotorchModelMixin"], [9, 1, 1, "", "FullyBayesianMOOBotorchModel"], [9, 3, 1, "", "compute_dists"], [9, 3, 1, "", "get_and_fit_model_mcmc"], [9, 3, 1, "", "get_fully_bayesian_acqf"], [9, 3, 1, "", "get_fully_bayesian_acqf_nehvi"], [9, 3, 1, "", "matern_kernel"], [9, 3, 1, "", "predict_from_model_mcmc"], [9, 3, 1, "", "rbf_kernel"], [9, 3, 1, "", "run_inference"], [9, 3, 1, "", "single_task_pyro_model"]], "ax.models.torch.fully_bayesian.FullyBayesianBotorchModelMixin": [[9, 4, 1, "", "feature_importances"]], "ax.models.torch.fully_bayesian_model_utils": [[9, 3, 1, "", "load_mcmc_samples_to_model"], [9, 3, 1, "", "pyro_sample_input_warping"], [9, 3, 1, "", "pyro_sample_mean"], [9, 3, 1, "", "pyro_sample_noise"], [9, 3, 1, "", "pyro_sample_outputscale"], [9, 3, 1, "", "pyro_sample_saas_lengthscales"]], "ax.models.torch.posterior_mean": [[9, 3, 1, "", "get_PosteriorMean"]], "ax.models.torch.randomforest": [[9, 1, 1, "", "RandomForest"]], "ax.models.torch.randomforest.RandomForest": [[9, 4, 1, "", "cross_validate"], [9, 4, 1, "", "fit"], [9, 4, 1, "", "predict"]], "ax.models.torch.rembo": [[9, 1, 1, "", "REMBO"]], "ax.models.torch.rembo.REMBO": [[9, 2, 1, "", "Xs"], [9, 2, 1, "", "Ys"], [9, 2, 1, "", "Yvars"], [9, 4, 1, "", "best_point"], [9, 4, 1, "", "cross_validate"], [9, 2, 1, "", "fidelity_features"], [9, 4, 1, "", "fit"], [9, 4, 1, "", "from_01"], [9, 4, 1, "", "gen"], [9, 2, 1, "", "metric_names"], [9, 4, 1, "", "predict"], [9, 4, 1, "", "project_down"], [9, 4, 1, "", "project_up"], [9, 2, 1, "", "task_features"], [9, 4, 1, "", "to_01"]], "ax.models.torch.utils": [[9, 1, 1, "", "SubsetModelData"], [9, 3, 1, "", "get_botorch_objective_and_transform"], [9, 3, 1, "", "get_out_of_sample_best_point_acqf"], [9, 3, 1, "", "is_noiseless"], [9, 3, 1, "", "normalize_indices"], [9, 3, 1, "", "pick_best_out_of_sample_point_acqf_class"], [9, 3, 1, "", "predict_from_model"], [9, 3, 1, "", "randomize_objective_weights"], [9, 3, 1, "", "subset_model"], [9, 3, 1, "", "tensor_callable_to_array_callable"]], "ax.models.torch.utils.SubsetModelData": [[9, 2, 1, "", "indices"], [9, 2, 1, "", "model"], [9, 2, 1, "", "objective_thresholds"], [9, 2, 1, "", "objective_weights"], [9, 2, 1, "", "outcome_constraints"]], "ax.models.torch_base": [[9, 1, 1, "", "TorchGenResults"], [9, 1, 1, "", "TorchModel"], [9, 1, 1, "", "TorchOptConfig"]], "ax.models.torch_base.TorchGenResults": [[9, 2, 1, "", "candidate_metadata"], [9, 2, 1, "", "gen_metadata"], [9, 2, 1, "", "points"], [9, 2, 1, "", "weights"]], "ax.models.torch_base.TorchModel": [[9, 4, 1, "", "best_point"], [9, 4, 1, "", "cross_validate"], [9, 2, 1, "", "device"], [9, 2, 1, "", "dtype"], [9, 4, 1, "", "evaluate_acquisition_function"], [9, 4, 1, "", "fit"], [9, 4, 1, "", "gen"], [9, 4, 1, "", "predict"], [9, 4, 1, "", "update"]], "ax.models.torch_base.TorchOptConfig": [[9, 2, 1, "id0", "fixed_features"], [9, 2, 1, "id1", "is_moo"], [9, 2, 1, "id2", "linear_constraints"], [9, 2, 1, "id3", "model_gen_options"], [9, 2, 1, "id4", "objective_thresholds"], [9, 2, 1, "id5", "objective_weights"], [9, 2, 1, "id6", "opt_config_metrics"], [9, 2, 1, "id7", "outcome_constraints"], [9, 2, 1, "id8", "pending_observations"], [9, 2, 1, "id9", "risk_measure"], [9, 2, 1, "id10", "rounding_func"]], "ax.models.winsorization_config": [[9, 1, 1, "", "WinsorizationConfig"]], "ax.models.winsorization_config.WinsorizationConfig": [[9, 2, 1, "", "lower_boundary"], [9, 2, 1, "", "lower_quantile_margin"], [9, 2, 1, "", "upper_boundary"], [9, 2, 1, "", "upper_quantile_margin"]], "ax.plot": [[10, 0, 0, "-", "bandit_rollout"], [10, 0, 0, "-", "base"], [10, 0, 0, "-", "color"], [10, 0, 0, "-", "contour"], [10, 0, 0, "-", "diagnostic"], [10, 0, 0, "-", "feature_importances"], [10, 0, 0, "-", "helper"], [10, 0, 0, "-", "marginal_effects"], [10, 0, 0, "-", "pareto_utils"], [10, 0, 0, "-", "render"], [10, 0, 0, "-", "scatter"], [10, 0, 0, "-", "slice"], [10, 0, 0, "-", "table_view"]], "ax.plot.bandit_rollout": [[10, 3, 1, "", "plot_bandit_rollout"]], "ax.plot.base": [[10, 1, 1, "", "AxPlotConfig"], [10, 1, 1, "", "AxPlotTypes"], [10, 1, 1, "", "PlotData"], [10, 1, 1, "", "PlotInSampleArm"], [10, 1, 1, "", "PlotMetric"], [10, 1, 1, "", "PlotOutOfSampleArm"]], "ax.plot.base.AxPlotTypes": [[10, 2, 1, "", "BANDIT_ROLLOUT"], [10, 2, 1, "", "CONTOUR"], [10, 2, 1, "", "GENERIC"], [10, 2, 1, "", "HTML"], [10, 2, 1, "", "INTERACT_CONTOUR"], [10, 2, 1, "", "INTERACT_SLICE"], [10, 2, 1, "", "SLICE"]], "ax.plot.base.PlotData": [[10, 2, 1, "", "in_sample"], [10, 2, 1, "", "metrics"], [10, 2, 1, "", "out_of_sample"], [10, 2, 1, "", "status_quo_name"]], "ax.plot.base.PlotInSampleArm": [[10, 2, 1, "", "context_stratum"], [10, 2, 1, "", "name"], [10, 2, 1, "", "parameters"], [10, 2, 1, "", "se"], [10, 2, 1, "", "se_hat"], [10, 2, 1, "", "y"], [10, 2, 1, "", "y_hat"]], "ax.plot.base.PlotMetric": [[10, 2, 1, "", "metric"], [10, 2, 1, "", "pred"], [10, 2, 1, "", "rel"]], "ax.plot.base.PlotOutOfSampleArm": [[10, 2, 1, "", "context_stratum"], [10, 2, 1, "", "name"], [10, 2, 1, "", "parameters"], [10, 2, 1, "", "se_hat"], [10, 2, 1, "", "y_hat"]], "ax.plot.color": [[10, 1, 1, "", "COLORS"], [10, 3, 1, "", "plotly_color_scale"], [10, 3, 1, "", "rgba"]], "ax.plot.color.COLORS": [[10, 2, 1, "", "CORAL"], [10, 2, 1, "", "LIGHT_PURPLE"], [10, 2, 1, "", "ORANGE"], [10, 2, 1, "", "PINK"], [10, 2, 1, "", "STEELBLUE"], [10, 2, 1, "", "TEAL"]], "ax.plot.contour": [[10, 3, 1, "", "interact_contour"], [10, 3, 1, "", "interact_contour_plotly"], [10, 3, 1, "", "plot_contour"], [10, 3, 1, "", "plot_contour_plotly"], [10, 3, 1, "", "short_name"]], "ax.plot.diagnostic": [[10, 3, 1, "", "interact_batch_comparison"], [10, 3, 1, "", "interact_cross_validation"], [10, 3, 1, "", "interact_cross_validation_plotly"], [10, 3, 1, "", "interact_empirical_model_validation"], [10, 3, 1, "", "tile_cross_validation"]], "ax.plot.feature_importances": [[10, 3, 1, "", "plot_feature_importance"], [10, 3, 1, "", "plot_feature_importance_by_feature"], [10, 3, 1, "", "plot_feature_importance_by_feature_plotly"], [10, 3, 1, "", "plot_feature_importance_by_metric"], [10, 3, 1, "", "plot_feature_importance_by_metric_plotly"], [10, 3, 1, "", "plot_feature_importance_plotly"], [10, 3, 1, "", "plot_relative_feature_importance"], [10, 3, 1, "", "plot_relative_feature_importance_plotly"]], "ax.plot.helper": [[10, 3, 1, "", "arm_name_to_sort_key"], [10, 3, 1, "", "arm_name_to_tuple"], [10, 3, 1, "", "axis_range"], [10, 3, 1, "", "build_filter_trial"], [10, 3, 1, "", "compose_annotation"], [10, 3, 1, "", "contour_config_to_trace"], [10, 3, 1, "", "extend_range"], [10, 3, 1, "", "get_fixed_values"], [10, 3, 1, "", "get_grid_for_parameter"], [10, 3, 1, "", "get_plot_data"], [10, 3, 1, "", "get_range_parameter"], [10, 3, 1, "", "get_range_parameters"], [10, 3, 1, "", "get_range_parameters_from_list"], [10, 3, 1, "", "infer_is_relative"], [10, 3, 1, "", "relativize"], [10, 3, 1, "", "relativize_data"], [10, 3, 1, "", "resize_subtitles"], [10, 3, 1, "", "rgb"], [10, 3, 1, "", "slice_config_to_trace"]], "ax.plot.marginal_effects": [[10, 3, 1, "", "plot_marginal_effects"]], "ax.plot.pareto_utils": [[10, 1, 1, "", "ParetoFrontierResults"], [10, 3, 1, "", "compute_posterior_pareto_frontier"], [10, 3, 1, "", "get_observed_pareto_frontiers"], [10, 3, 1, "", "get_tensor_converter_model"], [10, 3, 1, "", "infer_reference_point_from_experiment"], [10, 3, 1, "", "to_nonrobust_search_space"]], "ax.plot.pareto_utils.ParetoFrontierResults": [[10, 2, 1, "", "absolute_metrics"], [10, 2, 1, "", "arm_names"], [10, 2, 1, "", "means"], [10, 2, 1, "", "objective_thresholds"], [10, 2, 1, "", "param_dicts"], [10, 2, 1, "", "primary_metric"], [10, 2, 1, "", "secondary_metric"], [10, 2, 1, "", "sems"]], "ax.plot.render": [[10, 3, 1, "", "plot_config_to_html"]], "ax.plot.scatter": [[10, 3, 1, "", "interact_fitted"], [10, 3, 1, "", "interact_fitted_plotly"], [10, 3, 1, "", "lattice_multiple_metrics"], [10, 3, 1, "", "plot_fitted"], [10, 3, 1, "", "plot_multiple_metrics"], [10, 3, 1, "", "plot_objective_vs_constraints"], [10, 3, 1, "", "tile_fitted"], [10, 3, 1, "", "tile_observations"]], "ax.plot.slice": [[10, 3, 1, "", "interact_slice"], [10, 3, 1, "", "interact_slice_plotly"], [10, 3, 1, "", "plot_slice"], [10, 3, 1, "", "plot_slice_plotly"]], "ax.plot.table_view": [[10, 3, 1, "", "get_color"], [10, 3, 1, "", "table_view_plot"]], "ax.runners": [[11, 0, 0, "-", "botorch_test_problem"], [11, 0, 0, "-", "simulated_backend"], [11, 0, 0, "-", "single_running_trial_mixin"], [11, 0, 0, "-", "synthetic"], [11, 0, 0, "-", "torchx"]], "ax.runners.botorch_test_problem": [[11, 1, 1, "", "BotorchTestProblemRunner"]], "ax.runners.botorch_test_problem.BotorchTestProblemRunner": [[11, 4, 1, "", "deserialize_init_args"], [11, 4, 1, "", "evaluate_with_original_bounds"], [11, 4, 1, "", "poll_trial_status"], [11, 4, 1, "", "run"], [11, 4, 1, "", "serialize_init_args"], [11, 2, 1, "", "test_problem"]], "ax.runners.simulated_backend": [[11, 1, 1, "", "SimulatedBackendRunner"], [11, 3, 1, "", "sample_runtime_unif"]], "ax.runners.simulated_backend.SimulatedBackendRunner": [[11, 4, 1, "", "poll_trial_status"], [11, 4, 1, "", "run"], [11, 4, 1, "", "stop"]], "ax.runners.single_running_trial_mixin": [[11, 1, 1, "", "SingleRunningTrialMixin"]], "ax.runners.single_running_trial_mixin.SingleRunningTrialMixin": [[11, 4, 1, "", "poll_trial_status"]], "ax.runners.synthetic": [[11, 1, 1, "", "SyntheticRunner"]], "ax.runners.synthetic.SyntheticRunner": [[11, 4, 1, "", "poll_trial_status"], [11, 4, 1, "", "run"], [11, 5, 1, "", "run_metadata_report_keys"]], "ax.runners.torchx": [[11, 1, 1, "", "TorchXRunner"]], "ax.runners.torchx.TorchXRunner": [[11, 4, 1, "", "poll_trial_status"], [11, 4, 1, "", "run"], [11, 4, 1, "", "stop"]], "ax.service": [[12, 0, 0, "-", "managed_loop"]], "ax.service.managed_loop": [[12, 1, 1, "", "OptimizationLoop"], [12, 3, 1, "", "optimize"]], "ax.service.managed_loop.OptimizationLoop": [[12, 4, 1, "", "full_run"], [12, 4, 1, "", "get_best_point"], [12, 4, 1, "", "get_current_model"], [12, 4, 1, "", "run_trial"], [12, 4, 1, "", "with_evaluation_function"], [12, 4, 1, "", "with_runners_and_metrics"]], "ax.service.utils": [[12, 0, 0, "-", "best_point"], [12, 0, 0, "-", "best_point_mixin"], [12, 0, 0, "-", "early_stopping"], [12, 0, 0, "-", "instantiation"], [12, 0, 0, "-", "scheduler_options"]], "ax.service.utils.best_point": [[12, 3, 1, "", "extract_Y_from_data"], [12, 3, 1, "", "fill_missing_thresholds_from_nadir"], [12, 3, 1, "", "get_best_by_raw_objective"], [12, 3, 1, "", "get_best_by_raw_objective_with_trial_index"], [12, 3, 1, "", "get_best_parameters"], [12, 3, 1, "", "get_best_parameters_from_model_predictions"], [12, 3, 1, "", "get_best_parameters_from_model_predictions_with_trial_index"], [12, 3, 1, "", "get_best_parameters_with_trial_index"], [12, 3, 1, "", "get_best_raw_objective_point"], [12, 3, 1, "", "get_best_raw_objective_point_with_trial_index"], [12, 3, 1, "", "get_pareto_optimal_parameters"]], "ax.service.utils.best_point_mixin": [[12, 1, 1, "", "BestPointMixin"]], "ax.service.utils.best_point_mixin.BestPointMixin": [[12, 4, 1, "", "get_best_parameters"], [12, 4, 1, "", "get_best_trial"], [12, 4, 1, "", "get_hypervolume"], [12, 4, 1, "", "get_pareto_optimal_parameters"], [12, 4, 1, "", "get_trace"], [12, 4, 1, "", "get_trace_by_progression"]], "ax.service.utils.early_stopping": [[12, 3, 1, "", "get_early_stopping_metrics"], [12, 3, 1, "", "should_stop_trials_early"]], "ax.service.utils.instantiation": [[12, 1, 1, "", "FixedFeatures"], [12, 1, 1, "", "InstantiationBase"], [12, 1, 1, "", "MetricObjective"], [12, 1, 1, "", "ObjectiveProperties"], [12, 7, 1, "", "logger"]], "ax.service.utils.instantiation.FixedFeatures": [[12, 2, 1, "", "parameters"], [12, 2, 1, "", "trial_index"]], "ax.service.utils.instantiation.InstantiationBase": [[12, 4, 1, "", "build_objective_threshold"], [12, 4, 1, "", "build_objective_thresholds"], [12, 4, 1, "", "constraint_from_str"], [12, 4, 1, "", "make_experiment"], [12, 4, 1, "", "make_fixed_observation_features"], [12, 4, 1, "", "make_objective_thresholds"], [12, 4, 1, "", "make_objectives"], [12, 4, 1, "", "make_optimization_config"], [12, 4, 1, "", "make_optimization_config_from_properties"], [12, 4, 1, "", "make_outcome_constraints"], [12, 4, 1, "", "make_search_space"], [12, 4, 1, "", "objective_threshold_constraint_from_str"], [12, 4, 1, "", "optimization_config_from_objectives"], [12, 4, 1, "", "outcome_constraint_from_str"], [12, 4, 1, "", "parameter_from_json"]], "ax.service.utils.instantiation.MetricObjective": [[12, 2, 1, "", "MAXIMIZE"], [12, 2, 1, "", "MINIMIZE"]], "ax.service.utils.instantiation.ObjectiveProperties": [[12, 2, 1, "", "minimize"], [12, 2, 1, "", "threshold"]], "ax.service.utils.scheduler_options": [[12, 1, 1, "", "SchedulerOptions"], [12, 1, 1, "", "TrialType"]], "ax.service.utils.scheduler_options.SchedulerOptions": [[12, 2, 1, "id0", "batch_size"], [12, 2, 1, "id1", "debug_log_run_metadata"], [12, 2, 1, "id2", "early_stopping_strategy"], [12, 2, 1, "id3", "enforce_immutable_search_space_and_opt_config"], [12, 2, 1, "id4", "fetch_kwargs"], [12, 2, 1, "id5", "global_stopping_strategy"], [12, 2, 1, "id6", "init_seconds_between_polls"], [12, 2, 1, "id7", "log_filepath"], [12, 2, 1, "id8", "logging_level"], [12, 2, 1, "id9", "max_pending_trials"], [12, 2, 1, "id10", "min_failed_trials_for_failure_rate_check"], [12, 2, 1, "id11", "min_seconds_before_poll"], [12, 2, 1, "id12", "run_trials_in_batches"], [12, 2, 1, "id13", "seconds_between_polls_backoff_factor"], [12, 2, 1, "id14", "status_quo_weight"], [12, 2, 1, "id15", "suppress_storage_errors_after_retries"], [12, 2, 1, "id16", "timeout_hours"], [12, 2, 1, "id17", "tolerated_trial_failure_rate"], [12, 2, 1, "id18", "total_trials"], [12, 2, 1, "id19", "trial_type"], [12, 2, 1, "id20", "ttl_seconds_for_trials"], [12, 2, 1, "id21", "validate_metrics"], [12, 2, 1, "id22", "wait_for_running_trials"]], "ax.service.utils.scheduler_options.TrialType": [[12, 2, 1, "", "BATCH_TRIAL"], [12, 2, 1, "", "TRIAL"]], "ax.storage": [[13, 0, 0, "-", "botorch_modular_registry"], [13, 0, 0, "-", "metric_registry"], [13, 0, 0, "-", "registry_bundle"], [13, 0, 0, "-", "runner_registry"], [13, 0, 0, "-", "transform_registry"], [13, 0, 0, "-", "utils"]], "ax.storage.botorch_modular_registry": [[13, 7, 1, "", "ACQUISITION_FUNCTION_REGISTRY"], [13, 7, 1, "", "ACQUISITION_REGISTRY"], [13, 7, 1, "", "CLASS_TO_REGISTRY"], [13, 7, 1, "", "GPYTORCH_COMPONENT_REGISTRY"], [13, 7, 1, "", "INPUT_TRANSFORM_REGISTRY"], [13, 7, 1, "", "MODEL_REGISTRY"], [13, 7, 1, "", "OUTCOME_TRANSFORM_REGISTRY"], [13, 7, 1, "", "REVERSE_OUTCOME_TRANSFORM_REGISTRY"], [13, 3, 1, "", "register_acquisition"], [13, 3, 1, "", "register_acquisition_function"], [13, 3, 1, "", "register_model"]], "ax.storage.json_store": [[13, 0, 0, "-", "decoder"], [13, 0, 0, "-", "decoders"], [13, 0, 0, "-", "encoder"], [13, 0, 0, "-", "encoders"], [13, 0, 0, "-", "load"], [13, 0, 0, "-", "registry"], [13, 0, 0, "-", "save"]], "ax.storage.json_store.decoder": [[13, 3, 1, "", "ax_class_from_json_dict"], [13, 3, 1, "", "data_from_json"], [13, 3, 1, "", "experiment_from_json"], [13, 3, 1, "", "generation_node_from_json"], [13, 3, 1, "", "generation_step_from_json"], [13, 3, 1, "", "generation_strategy_from_json"], [13, 3, 1, "", "generator_run_from_json"], [13, 3, 1, "", "get_input_transform_json_components"], [13, 3, 1, "", "get_outcome_transform_json_components"], [13, 3, 1, "", "model_spec_from_json"], [13, 3, 1, "", "multi_type_experiment_from_json"], [13, 3, 1, "", "object_from_json"], [13, 3, 1, "", "parameter_constraints_from_json"], [13, 3, 1, "", "search_space_from_json"], [13, 3, 1, "", "surrogate_from_list_surrogate_json"], [13, 3, 1, "", "transition_criteria_from_json"], [13, 3, 1, "", "trials_from_json"]], "ax.storage.json_store.decoders": [[13, 3, 1, "", "batch_trial_from_json"], [13, 3, 1, "", "botorch_component_from_json"], [13, 3, 1, "", "class_from_json"], [13, 3, 1, "", "input_transform_type_from_json"], [13, 3, 1, "", "outcome_transform_type_from_json"], [13, 3, 1, "", "pathlib_from_json"], [13, 3, 1, "", "tensor_from_json"], [13, 3, 1, "", "tensor_or_size_from_json"], [13, 3, 1, "", "transform_type_from_json"], [13, 3, 1, "", "trial_from_json"]], "ax.storage.json_store.encoder": [[13, 3, 1, "", "object_to_json"]], "ax.storage.json_store.encoders": [[13, 3, 1, "", "arm_to_dict"], [13, 3, 1, "", "batch_to_dict"], [13, 3, 1, "", "benchmark_problem_to_dict"], [13, 3, 1, "", "botorch_component_to_dict"], [13, 3, 1, "", "botorch_input_transform_to_init_args"], [13, 3, 1, "", "botorch_model_to_dict"], [13, 3, 1, "", "botorch_modular_to_dict"], [13, 3, 1, "", "choice_parameter_to_dict"], [13, 3, 1, "", "data_to_dict"], [13, 3, 1, "", "experiment_to_dict"], [13, 3, 1, "", "fixed_parameter_to_dict"], [13, 3, 1, "", "generation_node_to_dict"], [13, 3, 1, "", "generation_step_to_dict"], [13, 3, 1, "", "generation_strategy_to_dict"], [13, 3, 1, "", "generator_run_to_dict"], [13, 3, 1, "", "improvement_global_stopping_strategy_to_dict"], [13, 3, 1, "", "logical_early_stopping_strategy_to_dict"], [13, 3, 1, "", "map_data_to_dict"], [13, 3, 1, "", "map_key_info_to_dict"], [13, 3, 1, "", "metric_to_dict"], [13, 3, 1, "", "model_spec_to_dict"], [13, 3, 1, "", "multi_objective_benchmark_problem_to_dict"], [13, 3, 1, "", "multi_objective_optimization_config_to_dict"], [13, 3, 1, "", "multi_objective_to_dict"], [13, 3, 1, "", "multi_type_experiment_to_dict"], [13, 3, 1, "", "objective_to_dict"], [13, 3, 1, "", "observation_features_to_dict"], [13, 3, 1, "", "optimization_config_to_dict"], [13, 3, 1, "", "order_parameter_constraint_to_dict"], [13, 3, 1, "", "outcome_constraint_to_dict"], [13, 3, 1, "", "parameter_constraint_to_dict"], [13, 3, 1, "", "parameter_distribution_to_dict"], [13, 3, 1, "", "pathlib_to_dict"], [13, 3, 1, "", "percentile_early_stopping_strategy_to_dict"], [13, 3, 1, "", "pytorch_cnn_torchvision_benchmark_problem_to_dict"], [13, 3, 1, "", "range_parameter_to_dict"], [13, 3, 1, "", "risk_measure_to_dict"], [13, 3, 1, "", "robust_search_space_to_dict"], [13, 3, 1, "", "runner_to_dict"], [13, 3, 1, "", "scalarized_objective_to_dict"], [13, 3, 1, "", "search_space_to_dict"], [13, 3, 1, "", "single_objective_benchmark_problem_to_dict"], [13, 3, 1, "", "sum_parameter_constraint_to_dict"], [13, 3, 1, "", "surrogate_to_dict"], [13, 3, 1, "", "tensor_to_dict"], [13, 3, 1, "", "threshold_early_stopping_strategy_to_dict"], [13, 3, 1, "", "transform_type_to_dict"], [13, 3, 1, "", "transition_criterion_to_dict"], [13, 3, 1, "", "trial_to_dict"], [13, 3, 1, "", "winsorization_config_to_dict"]], "ax.storage.json_store.load": [[13, 3, 1, "", "load_experiment"]], "ax.storage.json_store.save": [[13, 3, 1, "", "save_experiment"]], "ax.storage.metric_registry": [[13, 7, 1, "", "logger"], [13, 3, 1, "", "register_metric"], [13, 3, 1, "", "register_metrics"]], "ax.storage.registry_bundle": [[13, 1, 1, "", "RegistryBundle"], [13, 1, 1, "", "RegistryBundleBase"]], "ax.storage.registry_bundle.RegistryBundle": [[13, 5, 1, "", "decoder"], [13, 5, 1, "", "encoder"], [13, 5, 1, "", "sqa_config"]], "ax.storage.registry_bundle.RegistryBundleBase": [[13, 5, 1, "", "class_decoder_registry"], [13, 5, 1, "", "class_encoder_registry"], [13, 5, 1, "", "decoder"], [13, 5, 1, "", "decoder_registry"], [13, 5, 1, "", "encoder"], [13, 5, 1, "", "encoder_registry"], [13, 4, 1, "", "from_registry_bundles"], [13, 5, 1, "", "metric_registry"], [13, 5, 1, "", "runner_registry"], [13, 5, 1, "", "sqa_config"]], "ax.storage.runner_registry": [[13, 3, 1, "", "register_runner"], [13, 3, 1, "", "register_runners"]], "ax.storage.sqa_store": [[13, 0, 0, "-", "db"], [13, 0, 0, "-", "decoder"], [13, 0, 0, "-", "delete"], [13, 0, 0, "-", "encoder"], [13, 0, 0, "-", "json"], [13, 0, 0, "-", "load"], [13, 0, 0, "-", "reduced_state"], [13, 0, 0, "-", "save"], [13, 0, 0, "-", "sqa_classes"], [13, 0, 0, "-", "sqa_enum"], [13, 0, 0, "-", "structs"], [13, 0, 0, "-", "timestamp"], [13, 0, 0, "-", "utils"], [13, 0, 0, "-", "validation"]], "ax.storage.sqa_store.db": [[13, 1, 1, "", "SQABase"], [13, 3, 1, "", "create_all_tables"], [13, 3, 1, "", "create_mysql_engine_from_creator"], [13, 3, 1, "", "create_mysql_engine_from_url"], [13, 3, 1, "", "create_test_engine"], [13, 3, 1, "", "get_engine"], [13, 3, 1, "", "get_session"], [13, 3, 1, "", "init_engine_and_session_factory"], [13, 3, 1, "", "init_test_engine_and_session_factory"], [13, 3, 1, "", "session_scope"]], "ax.storage.sqa_store.decoder": [[13, 1, 1, "", "Decoder"]], "ax.storage.sqa_store.decoder.Decoder": [[13, 4, 1, "", "abandoned_arm_from_sqa"], [13, 4, 1, "", "arm_from_sqa"], [13, 2, 1, "", "config"], [13, 4, 1, "", "data_from_sqa"], [13, 4, 1, "", "environmental_variable_from_sqa"], [13, 4, 1, "", "experiment_from_sqa"], [13, 4, 1, "", "generation_strategy_from_sqa"], [13, 4, 1, "", "generator_run_from_sqa"], [13, 4, 1, "", "get_enum_name"], [13, 4, 1, "", "metric_from_sqa"], [13, 4, 1, "", "opt_config_and_tracking_metrics_from_sqa"], [13, 4, 1, "", "parameter_constraint_from_sqa"], [13, 4, 1, "", "parameter_distributions_from_sqa"], [13, 4, 1, "", "parameter_from_sqa"], [13, 4, 1, "", "runner_from_sqa"], [13, 4, 1, "", "search_space_from_sqa"], [13, 4, 1, "", "trial_from_sqa"]], "ax.storage.sqa_store.delete": [[13, 3, 1, "", "delete_experiment"], [13, 3, 1, "", "delete_generation_strategy"]], "ax.storage.sqa_store.encoder": [[13, 1, 1, "", "Encoder"]], "ax.storage.sqa_store.encoder.Encoder": [[13, 4, 1, "", "abandoned_arm_to_sqa"], [13, 4, 1, "", "arm_to_sqa"], [13, 2, 1, "", "config"], [13, 4, 1, "", "data_to_sqa"], [13, 4, 1, "", "environmental_variable_to_sqa"], [13, 4, 1, "", "experiment_data_to_sqa"], [13, 4, 1, "", "experiment_to_sqa"], [13, 4, 1, "", "generation_strategy_to_sqa"], [13, 4, 1, "", "generator_run_to_sqa"], [13, 4, 1, "", "get_children_metrics_by_name"], [13, 4, 1, "", "get_enum_value"], [13, 4, 1, "", "get_metric_type_and_properties"], [13, 4, 1, "", "metric_to_sqa"], [13, 4, 1, "", "multi_objective_to_sqa"], [13, 4, 1, "", "objective_threshold_to_sqa"], [13, 4, 1, "", "objective_to_sqa"], [13, 4, 1, "", "optimization_config_to_sqa"], [13, 4, 1, "", "outcome_constraint_to_sqa"], [13, 4, 1, "", "parameter_constraint_to_sqa"], [13, 4, 1, "", "parameter_distribution_to_sqa"], [13, 4, 1, "", "parameter_to_sqa"], [13, 4, 1, "", "risk_measure_to_sqa"], [13, 4, 1, "", "robust_search_space_to_sqa"], [13, 4, 1, "", "runner_to_sqa"], [13, 4, 1, "", "scalarized_objective_to_sqa"], [13, 4, 1, "", "scalarized_outcome_constraint_to_sqa"], [13, 4, 1, "", "search_space_to_sqa"], [13, 4, 1, "", "trial_to_sqa"], [13, 4, 1, "", "validate_experiment_metadata"]], "ax.storage.sqa_store.json": [[13, 2, 1, "", "JSONEncodedDict"], [13, 2, 1, "", "JSONEncodedList"], [13, 1, 1, "", "JSONEncodedLongText"], [13, 2, 1, "", "JSONEncodedLongTextDict"], [13, 1, 1, "", "JSONEncodedMediumText"], [13, 1, 1, "", "JSONEncodedObject"], [13, 1, 1, "", "JSONEncodedText"], [13, 2, 1, "", "JSONEncodedTextDict"]], "ax.storage.sqa_store.json.JSONEncodedLongText": [[13, 2, 1, "", "impl"]], "ax.storage.sqa_store.json.JSONEncodedMediumText": [[13, 2, 1, "", "impl"]], "ax.storage.sqa_store.json.JSONEncodedObject": [[13, 2, 1, "", "cache_ok"], [13, 2, 1, "", "impl"], [13, 4, 1, "", "process_bind_param"], [13, 4, 1, "", "process_result_value"]], "ax.storage.sqa_store.json.JSONEncodedText": [[13, 2, 1, "", "object_pairs_hook"]], "ax.storage.sqa_store.load": [[13, 3, 1, "", "get_generation_strategy_id"], [13, 3, 1, "", "get_generation_strategy_sqa"], [13, 3, 1, "", "get_generation_strategy_sqa_reduced_state"], [13, 3, 1, "", "get_generator_runs_by_id"], [13, 3, 1, "", "load_experiment"], [13, 3, 1, "", "load_generation_strategy_by_experiment_name"], [13, 3, 1, "", "load_generation_strategy_by_id"]], "ax.storage.sqa_store.reduced_state": [[13, 3, 1, "", "get_query_options_to_defer_immutable_duplicates"], [13, 3, 1, "", "get_query_options_to_defer_large_model_cols"]], "ax.storage.sqa_store.save": [[13, 3, 1, "", "save_experiment"], [13, 3, 1, "", "save_generation_strategy"], [13, 3, 1, "", "save_or_update_trial"], [13, 3, 1, "", "save_or_update_trials"], [13, 3, 1, "", "update_generation_strategy"], [13, 3, 1, "", "update_outcome_constraint_on_experiment"], [13, 3, 1, "", "update_properties_on_experiment"], [13, 3, 1, "", "update_properties_on_trial"], [13, 3, 1, "", "update_runner_on_experiment"]], "ax.storage.sqa_store.sqa_classes": [[13, 1, 1, "", "SQAAbandonedArm"], [13, 1, 1, "", "SQAArm"], [13, 1, 1, "", "SQAData"], [13, 1, 1, "", "SQAExperiment"], [13, 1, 1, "", "SQAGenerationStrategy"], [13, 1, 1, "", "SQAGeneratorRun"], [13, 1, 1, "", "SQAMetric"], [13, 1, 1, "", "SQAParameter"], [13, 1, 1, "", "SQAParameterConstraint"], [13, 1, 1, "", "SQARunner"], [13, 1, 1, "", "SQATrial"]], "ax.storage.sqa_store.sqa_classes.SQAAbandonedArm": [[13, 2, 1, "", "time_abandoned"]], "ax.storage.sqa_store.sqa_classes.SQAExperiment": [[13, 2, 1, "", "data"], [13, 2, 1, "", "generation_strategy"], [13, 2, 1, "", "metrics"], [13, 2, 1, "", "parameter_constraints"], [13, 2, 1, "", "parameters"], [13, 2, 1, "", "runners"], [13, 2, 1, "", "time_created"], [13, 2, 1, "", "trials"]], "ax.storage.sqa_store.sqa_classes.SQAGenerationStrategy": [[13, 2, 1, "", "generator_runs"]], "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun": [[13, 2, 1, "", "arms"], [13, 2, 1, "", "metrics"], [13, 2, 1, "", "parameter_constraints"], [13, 2, 1, "", "parameters"], [13, 2, 1, "", "time_created"]], "ax.storage.sqa_store.sqa_classes.SQAMetric": [[13, 2, 1, "", "scalarized_objective_children_metrics"], [13, 2, 1, "", "scalarized_outcome_constraint_children_metrics"]], "ax.storage.sqa_store.sqa_classes.SQAParameter": [[13, 2, 1, "", "dependents"], [13, 2, 1, "", "fixed_value"], [13, 2, 1, "", "target_value"]], "ax.storage.sqa_store.sqa_classes.SQATrial": [[13, 2, 1, "", "abandoned_arms"], [13, 2, 1, "", "generator_runs"], [13, 2, 1, "", "is_batch"], [13, 2, 1, "", "runner"], [13, 2, 1, "", "time_completed"], [13, 2, 1, "", "time_created"], [13, 2, 1, "", "time_run_started"], [13, 2, 1, "", "time_staged"]], "ax.storage.sqa_store.sqa_enum": [[13, 1, 1, "", "BaseNullableEnum"], [13, 1, 1, "", "IntEnum"], [13, 1, 1, "", "StringEnum"]], "ax.storage.sqa_store.sqa_enum.BaseNullableEnum": [[13, 2, 1, "", "cache_ok"], [13, 4, 1, "", "process_bind_param"], [13, 4, 1, "", "process_result_value"]], "ax.storage.sqa_store.sqa_enum.StringEnum": [[13, 2, 1, "", "impl"]], "ax.storage.sqa_store.structs": [[13, 1, 1, "", "DBSettings"]], "ax.storage.sqa_store.structs.DBSettings": [[13, 2, 1, "", "creator"], [13, 2, 1, "", "decoder"], [13, 2, 1, "", "encoder"], [13, 2, 1, "", "url"]], "ax.storage.sqa_store.timestamp": [[13, 1, 1, "", "IntTimestamp"]], "ax.storage.sqa_store.timestamp.IntTimestamp": [[13, 2, 1, "", "cache_ok"], [13, 4, 1, "", "process_bind_param"], [13, 4, 1, "", "process_result_value"]], "ax.storage.sqa_store.utils": [[13, 3, 1, "", "copy_db_ids"], [13, 3, 1, "", "is_foreign_key_field"]], "ax.storage.sqa_store.validation": [[13, 3, 1, "", "consistency_exactly_one"], [13, 3, 1, "", "do_not_set_existing_value_to_null"], [13, 3, 1, "", "listens_for_multiple"]], "ax.storage.utils": [[13, 1, 1, "", "DomainType"], [13, 1, 1, "", "MetricIntent"], [13, 1, 1, "", "ParameterConstraintType"], [13, 3, 1, "", "stable_hash"]], "ax.storage.utils.DomainType": [[13, 2, 1, "", "CHOICE"], [13, 2, 1, "", "ENVIRONMENTAL_RANGE"], [13, 2, 1, "", "FIXED"], [13, 2, 1, "", "RANGE"]], "ax.storage.utils.MetricIntent": [[13, 2, 1, "", "ADDITIONAL_OBJECTIVE"], [13, 2, 1, "", "MULTI_OBJECTIVE"], [13, 2, 1, "", "OBJECTIVE"], [13, 2, 1, "", "OBJECTIVE_THRESHOLD"], [13, 2, 1, "", "OUTCOME_CONSTRAINT"], [13, 2, 1, "", "RISK_MEASURE"], [13, 2, 1, "", "SCALARIZED_OBJECTIVE"], [13, 2, 1, "", "SCALARIZED_OUTCOME_CONSTRAINT"], [13, 2, 1, "", "TRACKING"]], "ax.storage.utils.ParameterConstraintType": [[13, 2, 1, "", "DISTRIBUTION"], [13, 2, 1, "", "LINEAR"], [13, 2, 1, "", "ORDER"], [13, 2, 1, "", "SUM"]], "ax.telemetry": [[14, 0, 0, "-", "experiment"], [14, 0, 0, "-", "generation_strategy"], [14, 0, 0, "-", "scheduler"]], "ax.telemetry.experiment": [[14, 1, 1, "", "ExperimentCompletedRecord"], [14, 1, 1, "", "ExperimentCreatedRecord"]], "ax.telemetry.experiment.ExperimentCompletedRecord": [[14, 4, 1, "", "from_experiment"], [14, 2, 1, "", "num_abandoned_trials"], [14, 2, 1, "", "num_bayesopt_trials"], [14, 2, 1, "", "num_completed_trials"], [14, 2, 1, "", "num_early_stopped_trials"], [14, 2, 1, "", "num_failed_trials"], [14, 2, 1, "", "num_initialization_trials"], [14, 2, 1, "", "num_other_trials"], [14, 2, 1, "", "total_fit_time"], [14, 2, 1, "", "total_gen_time"]], "ax.telemetry.experiment.ExperimentCreatedRecord": [[14, 2, 1, "", "dimensionality"], [14, 2, 1, "", "experiment_name"], [14, 2, 1, "", "experiment_type"], [14, 4, 1, "", "from_experiment"], [14, 2, 1, "", "hierarchical_tree_height"], [14, 2, 1, "", "metric_cls_to_quantity"], [14, 2, 1, "", "num_continuous_range_parameters"], [14, 2, 1, "", "num_fixed_parameters"], [14, 2, 1, "", "num_int_range_parameters_large"], [14, 2, 1, "", "num_int_range_parameters_medium"], [14, 2, 1, "", "num_int_range_parameters_small"], [14, 2, 1, "", "num_log_scale_range_parameters"], [14, 2, 1, "", "num_map_metrics"], [14, 2, 1, "", "num_objectives"], [14, 2, 1, "", "num_outcome_constraints"], [14, 2, 1, "", "num_parameter_constraints"], [14, 2, 1, "", "num_tracking_metrics"], [14, 2, 1, "", "num_unordered_choice_parameters_large"], [14, 2, 1, "", "num_unordered_choice_parameters_medium"], [14, 2, 1, "", "num_unordered_choice_parameters_small"], [14, 2, 1, "", "runner_cls"]], "ax.telemetry.generation_strategy": [[14, 1, 1, "", "GenerationStrategyCreatedRecord"]], "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord": [[14, 4, 1, "", "from_generation_strategy"], [14, 2, 1, "", "generation_strategy_name"], [14, 2, 1, "", "max_parallelism"], [14, 2, 1, "", "num_requested_bayesopt_trials"], [14, 2, 1, "", "num_requested_initialization_trials"], [14, 2, 1, "", "num_requested_other_trials"]], "ax.telemetry.scheduler": [[14, 1, 1, "", "SchedulerCompletedRecord"], [14, 1, 1, "", "SchedulerCreatedRecord"]], "ax.telemetry.scheduler.SchedulerCompletedRecord": [[14, 2, 1, "", "best_point_quality"], [14, 2, 1, "", "experiment_completed_record"], [14, 4, 1, "", "flatten"], [14, 4, 1, "", "from_scheduler"], [14, 2, 1, "", "improvement_over_baseline"], [14, 2, 1, "", "model_fit_generalization"], [14, 2, 1, "", "model_fit_quality"], [14, 2, 1, "", "model_std_generalization"], [14, 2, 1, "", "model_std_quality"], [14, 2, 1, "", "num_metric_fetch_e_encountered"], [14, 2, 1, "", "num_trials_bad_due_to_err"]], "ax.telemetry.scheduler.SchedulerCreatedRecord": [[14, 2, 1, "", "arms_per_trial"], [14, 2, 1, "", "early_stopping_strategy_cls"], [14, 2, 1, "", "experiment_created_record"], [14, 4, 1, "", "flatten"], [14, 4, 1, "", "from_scheduler"], [14, 2, 1, "", "generation_strategy_created_record"], [14, 2, 1, "", "global_stopping_strategy_cls"], [14, 2, 1, "", "scheduler_max_pending_trials"], [14, 2, 1, "", "scheduler_total_trials"], [14, 2, 1, "", "transformed_dimensionality"]], "ax.utils.common": [[15, 0, 0, "-", "base"], [15, 0, 0, "-", "constants"], [15, 0, 0, "-", "decorator"], [15, 0, 0, "-", "docutils"], [15, 0, 0, "-", "equality"], [15, 0, 0, "-", "executils"], [15, 0, 0, "-", "kwargs"], [15, 0, 0, "-", "logger"], [15, 0, 0, "-", "mock"], [15, 0, 0, "-", "result"], [15, 0, 0, "-", "serialization"], [15, 0, 0, "-", "testutils"], [15, 0, 0, "-", "timeutils"], [15, 0, 0, "-", "typeutils"], [15, 0, 0, "-", "typeutils_torch"]], "ax.utils.common.base": [[15, 1, 1, "", "Base"], [15, 1, 1, "", "SortableBase"]], "ax.utils.common.base.Base": [[15, 5, 1, "", "db_id"]], "ax.utils.common.constants": [[15, 1, 1, "", "Keys"]], "ax.utils.common.constants.Keys": [[15, 2, 1, "", "ACQF_KWARGS"], [15, 2, 1, "", "AUTOSET_SURROGATE"], [15, 2, 1, "", "BATCH_INIT_CONDITIONS"], [15, 2, 1, "", "CANDIDATE_SET"], [15, 2, 1, "", "CANDIDATE_SIZE"], [15, 2, 1, "", "COST_AWARE_UTILITY"], [15, 2, 1, "", "COST_INTERCEPT"], [15, 2, 1, "", "CURRENT_VALUE"], [15, 2, 1, "", "EXPAND"], [15, 2, 1, "", "EXPECTED_ACQF_VAL"], [15, 2, 1, "", "FIDELITY_FEATURES"], [15, 2, 1, "", "FIDELITY_WEIGHTS"], [15, 2, 1, "", "FRAC_RANDOM"], [15, 2, 1, "", "FULL_PARAMETERIZATION"], [15, 2, 1, "", "IMMUTABLE_SEARCH_SPACE_AND_OPT_CONF"], [15, 2, 1, "", "MAXIMIZE"], [15, 2, 1, "", "METADATA"], [15, 2, 1, "", "METRIC_NAMES"], [15, 2, 1, "", "NUM_FANTASIES"], [15, 2, 1, "", "NUM_INNER_RESTARTS"], [15, 2, 1, "", "NUM_RESTARTS"], [15, 2, 1, "", "NUM_TRACE_OBSERVATIONS"], [15, 2, 1, "", "OBJECTIVE"], [15, 2, 1, "", "ONLY_SURROGATE"], [15, 2, 1, "", "OPTIMIZER_KWARGS"], [15, 2, 1, "", "PAIRWISE_PREFERENCE_QUERY"], [15, 2, 1, "", "PREFERENCE_DATA"], [15, 2, 1, "", "PRIMARY_SURROGATE"], [15, 2, 1, "", "PROJECT"], [15, 2, 1, "", "QMC"], [15, 2, 1, "", "RAW_INNER_SAMPLES"], [15, 2, 1, "", "RAW_SAMPLES"], [15, 2, 1, "", "REFIT_ON_UPDATE"], [15, 2, 1, "", "SAMPLER"], [15, 2, 1, "", "SEED_INNER"], [15, 2, 1, "", "SEQUENTIAL"], [15, 2, 1, "", "STATE_DICT"], [15, 2, 1, "", "SUBCLASS"], [15, 2, 1, "", "SUBSET_MODEL"], [15, 2, 1, "", "TASK_FEATURES"], [15, 2, 1, "", "TRIAL_COMPLETION_TIMESTAMP"], [15, 2, 1, "", "WARM_START_REFITTING"], [15, 2, 1, "", "X_BASELINE"]], "ax.utils.common.decorator": [[15, 1, 1, "", "ClassDecorator"]], "ax.utils.common.decorator.ClassDecorator": [[15, 2, 1, "", "DECORATE_PRIVATE"], [15, 4, 1, "", "decorate_callable"], [15, 4, 1, "", "decorate_class"]], "ax.utils.common.docutils": [[15, 3, 1, "", "copy_doc"]], "ax.utils.common.equality": [[15, 3, 1, "", "dataframe_equals"], [15, 3, 1, "", "datetime_equals"], [15, 3, 1, "", "equality_typechecker"], [15, 3, 1, "", "object_attribute_dicts_equal"], [15, 3, 1, "", "object_attribute_dicts_find_unequal_fields"], [15, 3, 1, "", "same_elements"]], "ax.utils.common.executils": [[15, 3, 1, "", "handle_exceptions_in_retries"], [15, 3, 1, "", "retry_on_exception"]], "ax.utils.common.kwargs": [[15, 3, 1, "", "consolidate_kwargs"], [15, 3, 1, "", "filter_kwargs"], [15, 3, 1, "", "get_function_argument_names"], [15, 3, 1, "", "get_function_default_arguments"], [15, 3, 1, "", "validate_kwarg_typing"], [15, 3, 1, "", "warn_on_kwargs"]], "ax.utils.common.logger": [[15, 1, 1, "", "AxOutputNameFilter"], [15, 3, 1, "", "build_file_handler"], [15, 3, 1, "", "build_stream_handler"], [15, 1, 1, "", "disable_logger"], [15, 1, 1, "", "disable_loggers"], [15, 3, 1, "", "get_logger"], [15, 3, 1, "", "make_indices_str"], [15, 3, 1, "", "set_stderr_log_level"]], "ax.utils.common.logger.AxOutputNameFilter": [[15, 4, 1, "", "filter"]], "ax.utils.common.logger.disable_logger": [[15, 4, 1, "", "decorate_callable"]], "ax.utils.common.logger.disable_loggers": [[15, 4, 1, "", "decorate_callable"]], "ax.utils.common.mock": [[15, 3, 1, "", "mock_patch_method_original"]], "ax.utils.common.result": [[15, 1, 1, "", "Err"], [15, 1, 1, "", "Ok"], [15, 1, 1, "", "Result"], [15, 6, 1, "", "UnwrapError"]], "ax.utils.common.result.Err": [[15, 5, 1, "", "err"], [15, 4, 1, "", "is_err"], [15, 4, 1, "", "is_ok"], [15, 4, 1, "", "map"], [15, 4, 1, "", "map_err"], [15, 4, 1, "", "map_or"], [15, 4, 1, "", "map_or_else"], [15, 5, 1, "", "ok"], [15, 4, 1, "", "unwrap"], [15, 4, 1, "", "unwrap_err"], [15, 4, 1, "", "unwrap_or"], [15, 4, 1, "", "unwrap_or_else"], [15, 5, 1, "", "value"]], "ax.utils.common.result.Ok": [[15, 5, 1, "", "err"], [15, 4, 1, "", "is_err"], [15, 4, 1, "", "is_ok"], [15, 4, 1, "", "map"], [15, 4, 1, "", "map_err"], [15, 4, 1, "", "map_or"], [15, 4, 1, "", "map_or_else"], [15, 5, 1, "", "ok"], [15, 4, 1, "", "unwrap"], [15, 4, 1, "", "unwrap_err"], [15, 4, 1, "", "unwrap_or"], [15, 4, 1, "", "unwrap_or_else"], [15, 5, 1, "", "value"]], "ax.utils.common.result.Result": [[15, 5, 1, "", "err"], [15, 4, 1, "", "is_err"], [15, 4, 1, "", "is_ok"], [15, 4, 1, "", "map"], [15, 4, 1, "", "map_err"], [15, 4, 1, "", "map_or"], [15, 4, 1, "", "map_or_else"], [15, 5, 1, "", "ok"], [15, 4, 1, "", "unwrap"], [15, 4, 1, "", "unwrap_err"], [15, 4, 1, "", "unwrap_or"], [15, 4, 1, "", "unwrap_or_else"], [15, 5, 1, "", "value"]], "ax.utils.common.serialization": [[15, 1, 1, "", "SerializationMixin"], [15, 3, 1, "", "callable_from_reference"], [15, 3, 1, "", "callable_to_reference"], [15, 3, 1, "", "extract_init_args"], [15, 3, 1, "", "named_tuple_to_dict"], [15, 3, 1, "", "serialize_init_args"]], "ax.utils.common.serialization.SerializationMixin": [[15, 4, 1, "", "deserialize_init_args"], [15, 4, 1, "", "serialize_init_args"]], "ax.utils.common.testutils": [[15, 1, 1, "", "TestCase"], [15, 3, 1, "", "disable_profiler"]], "ax.utils.common.testutils.TestCase": [[15, 4, 1, "", "assertAxBaseEqual"], [15, 4, 1, "", "assertDictsAlmostEqual"], [15, 4, 1, "", "assertEqual"], [15, 4, 1, "", "assertRaisesOn"], [15, 4, 1, "", "setUp"], [15, 4, 1, "", "silence_stderr"]], "ax.utils.common.timeutils": [[15, 3, 1, "", "current_timestamp_in_millis"], [15, 3, 1, "", "timestamps_in_range"], [15, 3, 1, "", "to_ds"], [15, 3, 1, "", "to_ts"]], "ax.utils.common.typeutils": [[15, 3, 1, "", "checked_cast"], [15, 3, 1, "", "checked_cast_dict"], [15, 3, 1, "", "checked_cast_list"], [15, 3, 1, "", "checked_cast_optional"], [15, 3, 1, "", "checked_cast_to_tuple"], [15, 3, 1, "", "not_none"], [15, 3, 1, "", "numpy_type_to_python_type"], [15, 3, 1, "", "version_safe_check_type"]], "ax.utils.common.typeutils_torch": [[15, 3, 1, "", "torch_type_from_str"], [15, 3, 1, "", "torch_type_to_str"]], "ax.utils.flake8_plugins": [[15, 0, 0, "-", "docstring_checker"]], "ax.utils.flake8_plugins.docstring_checker": [[15, 3, 1, "", "A000"], [15, 1, 1, "", "DocstringChecker"], [15, 1, 1, "", "DocstringCheckerVisitor"], [15, 1, 1, "", "Error"], [15, 3, 1, "", "is_copy_doc_call"], [15, 3, 1, "", "new_error"], [15, 3, 1, "", "should_check"]], "ax.utils.flake8_plugins.docstring_checker.DocstringChecker": [[15, 2, 1, "", "fikename"], [15, 2, 1, "", "name"], [15, 4, 1, "", "run"], [15, 2, 1, "", "tree"], [15, 2, 1, "", "version"]], "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor": [[15, 4, 1, "", "check_A000"], [15, 2, 1, "", "errors"], [15, 4, 1, "", "visit_AsyncFunctionDef"], [15, 4, 1, "", "visit_ClassDef"], [15, 4, 1, "", "visit_FunctionDef"]], "ax.utils.flake8_plugins.docstring_checker.Error": [[15, 2, 1, "", "col"], [15, 2, 1, "", "lineno"], [15, 2, 1, "", "message"], [15, 2, 1, "", "type"]], "ax.utils.measurement": [[15, 0, 0, "-", "synthetic_functions"]], "ax.utils.measurement.synthetic_functions": [[15, 1, 1, "", "Aug_Branin"], [15, 1, 1, "", "Aug_Hartmann6"], [15, 1, 1, "", "Branin"], [15, 1, 1, "", "FromBotorch"], [15, 1, 1, "", "Hartmann6"], [15, 1, 1, "", "SyntheticFunction"], [15, 3, 1, "", "from_botorch"], [15, 3, 1, "", "informative_failure_on_none"]], "ax.utils.measurement.synthetic_functions.FromBotorch": [[15, 5, 1, "", "name"]], "ax.utils.measurement.synthetic_functions.SyntheticFunction": [[15, 5, 1, "", "domain"], [15, 4, 1, "", "f"], [15, 5, 1, "", "fmax"], [15, 5, 1, "", "fmin"], [15, 5, 1, "", "maximums"], [15, 5, 1, "", "minimums"], [15, 5, 1, "", "name"], [15, 5, 1, "", "required_dimensionality"]], "ax.utils.notebook": [[15, 0, 0, "-", "plotting"]], "ax.utils.notebook.plotting": [[15, 3, 1, "", "init_notebook_plotting"], [15, 3, 1, "", "render"]], "ax.utils.report": [[15, 0, 0, "-", "render"]], "ax.utils.report.render": [[15, 3, 1, "", "h2_html"], [15, 3, 1, "", "h3_html"], [15, 3, 1, "", "link_html"], [15, 3, 1, "", "list_item_html"], [15, 3, 1, "", "p_html"], [15, 3, 1, "", "render_report_elements"], [15, 3, 1, "", "table_cell_html"], [15, 3, 1, "", "table_heading_cell_html"], [15, 3, 1, "", "table_html"], [15, 3, 1, "", "table_row_html"], [15, 3, 1, "", "unordered_list_html"]], "ax.utils.sensitivity": [[15, 0, 0, "-", "derivative_gp"], [15, 0, 0, "-", "derivative_measures"], [15, 0, 0, "-", "sobol_measures"]], "ax.utils.sensitivity.derivative_gp": [[15, 3, 1, "", "get_KXX_inv"], [15, 3, 1, "", "get_KxX_dx"], [15, 3, 1, "", "get_Kxx_dx2"], [15, 3, 1, "", "posterior_derivative"]], "ax.utils.sensitivity.derivative_measures": [[15, 1, 1, "", "GpDGSMGpMean"], [15, 1, 1, "", "GpDGSMGpSampling"], [15, 3, 1, "", "compute_derivatives_from_model_list"]], "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean": [[15, 4, 1, "", "aggregation"], [15, 2, 1, "", "bootstrap_indices"], [15, 4, 1, "", "gradient_absolute_measure"], [15, 4, 1, "", "gradient_measure"], [15, 4, 1, "", "gradients_square_measure"], [15, 2, 1, "", "mean_gradients"], [15, 2, 1, "", "mean_gradients_btsp"]], "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling": [[15, 4, 1, "", "aggregation"], [15, 2, 1, "", "samples_gradients"], [15, 2, 1, "", "samples_gradients_btsp"]], "ax.utils.sensitivity.sobol_measures": [[15, 3, 1, "", "GaussianLinkMean"], [15, 3, 1, "", "ProbitLinkMean"], [15, 1, 1, "", "SobolSensitivity"], [15, 1, 1, "", "SobolSensitivityGPMean"], [15, 1, 1, "", "SobolSensitivityGPSampling"], [15, 3, 1, "", "ax_parameter_sens"], [15, 3, 1, "", "compute_sobol_indices_from_model_list"]], "ax.utils.sensitivity.sobol_measures.SobolSensitivity": [[15, 4, 1, "", "evalute_function"], [15, 4, 1, "", "first_order_indices"], [15, 4, 1, "", "generate_all_input_matrix"], [15, 4, 1, "", "second_order_indices"], [15, 4, 1, "", "total_order_indices"]], "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean": [[15, 4, 1, "", "first_order_indices"], [15, 4, 1, "", "second_order_indices"], [15, 4, 1, "", "total_order_indices"]], "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling": [[15, 5, 1, "", "dim"], [15, 4, 1, "", "first_order_indices"], [15, 4, 1, "", "second_order_indices"], [15, 4, 1, "", "total_order_indices"]], "ax.utils.stats": [[15, 0, 0, "-", "model_fit_stats"], [15, 0, 0, "-", "statstools"]], "ax.utils.stats.model_fit_stats": [[15, 1, 1, "", "ModelFitMetricProtocol"], [15, 3, 1, "", "coefficient_of_determination"], [15, 3, 1, "", "compute_model_fit_metrics"], [15, 3, 1, "", "mean_of_the_standardized_error"], [15, 3, 1, "", "std_of_the_standardized_error"]], "ax.utils.stats.statstools": [[15, 3, 1, "", "agresti_coull_sem"], [15, 3, 1, "", "inverse_variance_weight"], [15, 3, 1, "", "marginal_effects"], [15, 3, 1, "", "positive_part_james_stein"], [15, 3, 1, "", "relativize"], [15, 3, 1, "", "relativize_data"], [15, 3, 1, "", "total_variance"], [15, 3, 1, "", "unrelativize"]], "ax.utils.testing": [[15, 0, 0, "-", "backend_scheduler"], [15, 0, 0, "-", "backend_simulator"], [15, 0, 0, "-", "benchmark_stubs"], [15, 0, 0, "-", "core_stubs"], [15, 0, 0, "-", "mock"], [15, 0, 0, "-", "modeling_stubs"], [15, 0, 0, "-", "test_init_files"], [15, 0, 0, "-", "torch_stubs"], [15, 0, 0, "-", "utils"]], "ax.utils.testing.backend_scheduler": [[15, 1, 1, "", "AsyncSimulatedBackendScheduler"]], "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler": [[15, 5, 1, "", "backend_simulator"], [15, 2, 1, "", "experiment"], [15, 2, 1, "", "generation_strategy"], [15, 2, 1, "", "logger"], [15, 2, 1, "", "markdown_messages"], [15, 4, 1, "", "should_stop_trials_early"]], "ax.utils.testing.backend_simulator": [[15, 1, 1, "", "BackendSimulator"], [15, 1, 1, "", "BackendSimulatorOptions"], [15, 1, 1, "", "BackendSimulatorState"], [15, 1, 1, "", "SimStatus"], [15, 1, 1, "", "SimTrial"], [15, 3, 1, "", "format"]], "ax.utils.testing.backend_simulator.BackendSimulator": [[15, 5, 1, "", "all_trials"], [15, 4, 1, "", "from_state"], [15, 4, 1, "", "get_sim_trial_by_index"], [15, 4, 1, "", "lookup_trial_index_status"], [15, 4, 1, "", "new_trial"], [15, 5, 1, "", "num_completed"], [15, 5, 1, "", "num_failed"], [15, 5, 1, "", "num_queued"], [15, 5, 1, "", "num_running"], [15, 4, 1, "", "reset"], [15, 4, 1, "", "run_trial"], [15, 4, 1, "", "state"], [15, 4, 1, "", "status"], [15, 4, 1, "", "stop_trial"], [15, 5, 1, "", "time"], [15, 4, 1, "", "update"], [15, 5, 1, "", "use_internal_clock"]], "ax.utils.testing.backend_simulator.BackendSimulatorOptions": [[15, 2, 1, "", "failure_rate"], [15, 2, 1, "", "internal_clock"], [15, 2, 1, "", "max_concurrency"], [15, 2, 1, "", "time_scaling"], [15, 2, 1, "", "use_update_as_start_time"]], "ax.utils.testing.backend_simulator.BackendSimulatorState": [[15, 2, 1, "", "completed"], [15, 2, 1, "", "failed"], [15, 2, 1, "", "options"], [15, 2, 1, "", "queued"], [15, 2, 1, "", "running"], [15, 2, 1, "", "verbose_logging"]], "ax.utils.testing.backend_simulator.SimStatus": [[15, 2, 1, "id0", "completed"], [15, 2, 1, "id2", "failed"], [15, 2, 1, "id3", "queued"], [15, 2, 1, "id4", "running"], [15, 2, 1, "id5", "time_remaining"]], "ax.utils.testing.backend_simulator.SimTrial": [[15, 2, 1, "id6", "sim_completed_time"], [15, 2, 1, "id7", "sim_queued_time"], [15, 2, 1, "id8", "sim_runtime"], [15, 2, 1, "id9", "sim_start_time"], [15, 2, 1, "id10", "trial_index"]], "ax.utils.testing.benchmark_stubs": [[15, 3, 1, "", "get_aggregated_benchmark_result"], [15, 3, 1, "", "get_benchmark_problem"], [15, 3, 1, "", "get_benchmark_result"], [15, 3, 1, "", "get_moo_surrogate"], [15, 3, 1, "", "get_multi_objective_benchmark_problem"], [15, 3, 1, "", "get_single_objective_benchmark_problem"], [15, 3, 1, "", "get_sobol_benchmark_method"], [15, 3, 1, "", "get_sobol_gpei_benchmark_method"], [15, 3, 1, "", "get_soo_surrogate"]], "ax.utils.testing.core_stubs": [[15, 1, 1, "", "CustomTestMetric"], [15, 1, 1, "", "CustomTestRunner"], [15, 1, 1, "", "DummyEarlyStoppingStrategy"], [15, 1, 1, "", "DummyGlobalStoppingStrategy"], [15, 1, 1, "", "SpecialGenerationStrategy"], [15, 1, 1, "", "TestTrial"], [15, 3, 1, "", "get_abandoned_arm"], [15, 3, 1, "", "get_acquisition_function_type"], [15, 3, 1, "", "get_acquisition_type"], [15, 3, 1, "", "get_and_early_stopping_strategy"], [15, 3, 1, "", "get_arm"], [15, 3, 1, "", "get_arm_weights1"], [15, 3, 1, "", "get_arm_weights2"], [15, 3, 1, "", "get_arms"], [15, 3, 1, "", "get_arms_from_dict"], [15, 3, 1, "", "get_augmented_branin_metric"], [15, 3, 1, "", "get_augmented_branin_objective"], [15, 3, 1, "", "get_augmented_branin_optimization_config"], [15, 3, 1, "", "get_augmented_hartmann_metric"], [15, 3, 1, "", "get_augmented_hartmann_objective"], [15, 3, 1, "", "get_augmented_hartmann_optimization_config"], [15, 3, 1, "", "get_batch_trial"], [15, 3, 1, "", "get_batch_trial_with_repeated_arms"], [15, 3, 1, "", "get_botorch_model"], [15, 3, 1, "", "get_botorch_model_with_default_acquisition_class"], [15, 3, 1, "", "get_botorch_model_with_surrogate_specs"], [15, 3, 1, "", "get_branin_arms"], [15, 3, 1, "", "get_branin_data"], [15, 3, 1, "", "get_branin_data_batch"], [15, 3, 1, "", "get_branin_data_multi_objective"], [15, 3, 1, "", "get_branin_experiment"], [15, 3, 1, "", "get_branin_experiment_with_multi_objective"], [15, 3, 1, "", "get_branin_experiment_with_status_quo_trials"], [15, 3, 1, "", "get_branin_experiment_with_timestamp_map_metric"], [15, 3, 1, "", "get_branin_metric"], [15, 3, 1, "", "get_branin_multi_objective"], [15, 3, 1, "", "get_branin_multi_objective_optimization_config"], [15, 3, 1, "", "get_branin_objective"], [15, 3, 1, "", "get_branin_optimization_config"], [15, 3, 1, "", "get_branin_outcome_constraint"], [15, 3, 1, "", "get_branin_search_space"], [15, 3, 1, "", "get_branin_with_multi_task"], [15, 3, 1, "", "get_chained_input_transform"], [15, 3, 1, "", "get_choice_parameter"], [15, 3, 1, "", "get_custom_multi_objective"], [15, 3, 1, "", "get_data"], [15, 3, 1, "", "get_dataset"], [15, 3, 1, "", "get_default_scheduler_options"], [15, 3, 1, "", "get_dict_lookup_metric"], [15, 3, 1, "", "get_discrete_search_space"], [15, 3, 1, "", "get_experiment"], [15, 3, 1, "", "get_experiment_with_batch_and_single_trial"], [15, 3, 1, "", "get_experiment_with_batch_trial"], [15, 3, 1, "", "get_experiment_with_custom_runner_and_metric"], [15, 3, 1, "", "get_experiment_with_data"], [15, 3, 1, "", "get_experiment_with_map_data"], [15, 3, 1, "", "get_experiment_with_map_data_type"], [15, 3, 1, "", "get_experiment_with_multi_objective"], [15, 3, 1, "", "get_experiment_with_observations"], [15, 3, 1, "", "get_experiment_with_repeated_arms"], [15, 3, 1, "", "get_experiment_with_scalarized_objective_and_outcome_constraint"], [15, 3, 1, "", "get_experiment_with_trial"], [15, 3, 1, "", "get_experiment_with_trial_with_ttl"], [15, 3, 1, "", "get_factorial_experiment"], [15, 3, 1, "", "get_factorial_metric"], [15, 3, 1, "", "get_factorial_search_space"], [15, 3, 1, "", "get_fixed_parameter"], [15, 3, 1, "", "get_gamma_prior"], [15, 3, 1, "", "get_generator_run"], [15, 3, 1, "", "get_generator_run2"], [15, 3, 1, "", "get_hartmann_metric"], [15, 3, 1, "", "get_hartmann_objective"], [15, 3, 1, "", "get_hartmann_optimization_config"], [15, 3, 1, "", "get_hartmann_search_space"], [15, 3, 1, "", "get_hierarchical_search_space"], [15, 3, 1, "", "get_hierarchical_search_space_experiment"], [15, 3, 1, "", "get_high_dimensional_branin_experiment"], [15, 3, 1, "", "get_hss_trials_with_fixed_parameter"], [15, 3, 1, "", "get_improvement_global_stopping_strategy"], [15, 3, 1, "", "get_interval"], [15, 3, 1, "", "get_l2_reg_weight_parameter"], [15, 3, 1, "", "get_large_factorial_search_space"], [15, 3, 1, "", "get_large_ordinal_search_space"], [15, 3, 1, "", "get_lr_parameter"], [15, 3, 1, "", "get_many_branin_objective_opt_config"], [15, 3, 1, "", "get_map_data"], [15, 3, 1, "", "get_map_key_info"], [15, 3, 1, "", "get_map_objective"], [15, 3, 1, "", "get_map_optimization_config"], [15, 3, 1, "", "get_metric"], [15, 3, 1, "", "get_mll_type"], [15, 3, 1, "", "get_model_covariance"], [15, 3, 1, "", "get_model_mean"], [15, 3, 1, "", "get_model_parameter"], [15, 3, 1, "", "get_model_predictions"], [15, 3, 1, "", "get_model_predictions_per_arm"], [15, 3, 1, "", "get_model_type"], [15, 3, 1, "", "get_multi_objective"], [15, 3, 1, "", "get_multi_objective_optimization_config"], [15, 3, 1, "", "get_multi_type_experiment"], [15, 3, 1, "", "get_multi_type_experiment_with_multi_objective"], [15, 3, 1, "", "get_non_monolithic_branin_moo_data"], [15, 3, 1, "", "get_num_boost_rounds_parameter"], [15, 3, 1, "", "get_objective"], [15, 3, 1, "", "get_objective_threshold"], [15, 3, 1, "", "get_optimization_config"], [15, 3, 1, "", "get_optimization_config_no_constraints"], [15, 3, 1, "", "get_or_early_stopping_strategy"], [15, 3, 1, "", "get_order_constraint"], [15, 3, 1, "", "get_ordered_choice_parameter"], [15, 3, 1, "", "get_outcome_constraint"], [15, 3, 1, "", "get_parameter_constraint"], [15, 3, 1, "", "get_parameter_distribution"], [15, 3, 1, "", "get_pathlib_path"], [15, 3, 1, "", "get_percentile_early_stopping_strategy"], [15, 3, 1, "", "get_percentile_early_stopping_strategy_with_non_objective_metric_name"], [15, 3, 1, "", "get_percentile_early_stopping_strategy_with_true_objective_metric_name"], [15, 3, 1, "", "get_range_parameter"], [15, 3, 1, "", "get_range_parameter2"], [15, 3, 1, "", "get_risk_measure"], [15, 3, 1, "", "get_robust_branin_experiment"], [15, 3, 1, "", "get_robust_search_space"], [15, 3, 1, "", "get_robust_search_space_environmental"], [15, 3, 1, "", "get_scalarized_objective"], [15, 3, 1, "", "get_scalarized_outcome_constraint"], [15, 3, 1, "", "get_scheduler_options_batch_trial"], [15, 3, 1, "", "get_search_space"], [15, 3, 1, "", "get_search_space_for_range_value"], [15, 3, 1, "", "get_search_space_for_range_values"], [15, 3, 1, "", "get_search_space_for_value"], [15, 3, 1, "", "get_search_space_with_choice_parameters"], [15, 3, 1, "", "get_sebo_acquisition_class"], [15, 3, 1, "", "get_small_discrete_search_space"], [15, 3, 1, "", "get_status_quo"], [15, 3, 1, "", "get_sum_constraint1"], [15, 3, 1, "", "get_sum_constraint2"], [15, 3, 1, "", "get_surrogate"], [15, 3, 1, "", "get_synthetic_runner"], [15, 3, 1, "", "get_task_choice_parameter"], [15, 3, 1, "", "get_test_map_data_experiment"], [15, 3, 1, "", "get_threshold_early_stopping_strategy"], [15, 3, 1, "", "get_trial"], [15, 3, 1, "", "get_weights"], [15, 3, 1, "", "get_weights_from_dict"], [15, 3, 1, "", "get_winsorization_config"], [15, 3, 1, "", "run_branin_experiment_with_generation_strategy"]], "ax.utils.testing.core_stubs.CustomTestRunner": [[15, 4, 1, "", "run"]], "ax.utils.testing.core_stubs.DummyEarlyStoppingStrategy": [[15, 4, 1, "", "should_stop_trials_early"]], "ax.utils.testing.core_stubs.SpecialGenerationStrategy": [[15, 4, 1, "", "gen_for_multiple_trials_with_multiple_models"]], "ax.utils.testing.core_stubs.TestTrial": [[15, 4, 1, "", "abandoned_arms"], [15, 5, 1, "", "arms"], [15, 4, 1, "", "arms_by_name"], [15, 4, 1, "", "generator_runs"]], "ax.utils.testing.metrics": [[15, 0, 0, "-", "backend_simulator_map"], [15, 0, 0, "-", "branin_backend_map"]], "ax.utils.testing.metrics.backend_simulator_map": [[15, 1, 1, "", "BackendSimulatorTimestampMapMetric"]], "ax.utils.testing.metrics.backend_simulator_map.BackendSimulatorTimestampMapMetric": [[15, 4, 1, "", "convert_to_timestamps"], [15, 4, 1, "", "fetch_trial_data"], [15, 2, 1, "", "properties"]], "ax.utils.testing.metrics.branin_backend_map": [[15, 1, 1, "", "BraninBackendMapMetric"]], "ax.utils.testing.metrics.branin_backend_map.BraninBackendMapMetric": [[15, 4, 1, "", "convert_to_timestamps"], [15, 2, 1, "", "properties"]], "ax.utils.testing.mock": [[15, 3, 1, "", "fast_botorch_optimize"], [15, 3, 1, "", "fast_botorch_optimize_context_manager"], [15, 3, 1, "", "skip_fit_gpytorch_mll"], [15, 3, 1, "", "skip_fit_gpytorch_mll_context_manager"]], "ax.utils.testing.modeling_stubs": [[15, 3, 1, "", "get_experiment_for_value"], [15, 3, 1, "", "get_generation_strategy"], [15, 3, 1, "", "get_input_transform_type"], [15, 3, 1, "", "get_legacy_list_surrogate_generation_step_as_dict"], [15, 3, 1, "", "get_observation"], [15, 3, 1, "", "get_observation1"], [15, 3, 1, "", "get_observation1trans"], [15, 3, 1, "", "get_observation2"], [15, 3, 1, "", "get_observation2trans"], [15, 3, 1, "", "get_observation_features"], [15, 3, 1, "", "get_observation_status_quo0"], [15, 3, 1, "", "get_observation_status_quo1"], [15, 3, 1, "", "get_outcome_transfrom_type"], [15, 3, 1, "", "get_surrogate_as_dict"], [15, 3, 1, "", "get_surrogate_generation_step"], [15, 3, 1, "", "get_surrogate_spec_as_dict"], [15, 3, 1, "", "get_transform_type"], [15, 3, 1, "", "sobol_gpei_generation_node_gs"], [15, 1, 1, "", "transform_1"], [15, 1, 1, "", "transform_2"]], "ax.utils.testing.modeling_stubs.transform_1": [[15, 2, 1, "", "config"], [15, 2, 1, "", "modelbridge"], [15, 4, 1, "", "transform_observation_features"], [15, 4, 1, "", "transform_optimization_config"], [15, 4, 1, "", "transform_search_space"], [15, 4, 1, "", "untransform_observation_features"]], "ax.utils.testing.modeling_stubs.transform_2": [[15, 2, 1, "", "config"], [15, 2, 1, "", "modelbridge"], [15, 4, 1, "", "transform_observation_features"], [15, 4, 1, "", "transform_optimization_config"], [15, 4, 1, "", "transform_search_space"], [15, 4, 1, "", "untransform_observation_features"]], "ax.utils.testing.test_init_files": [[15, 1, 1, "", "InitTest"]], "ax.utils.testing.test_init_files.InitTest": [[15, 4, 1, "", "test_InitFiles"]], "ax.utils.testing.torch_stubs": [[15, 3, 1, "", "get_torch_test_data"]], "ax.utils.testing.utils": [[15, 3, 1, "", "generic_equals"]], "ax.utils.tutorials": [[15, 0, 0, "-", "cnn_utils"]], "ax.utils.tutorials.cnn_utils": [[15, 1, 1, "", "CNN"], [15, 3, 1, "", "evaluate"], [15, 3, 1, "", "get_partition_data_loaders"], [15, 3, 1, "", "load_mnist"], [15, 3, 1, "", "split_dataset"], [15, 3, 1, "", "train"]], "ax.utils.tutorials.cnn_utils.CNN": [[15, 4, 1, "", "forward"], [15, 2, 1, "", "training"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:attribute", "3": "py:function", "4": "py:method", "5": "py:property", "6": "py:exception", "7": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "attribute", "Python attribute"], "3": ["py", "function", "Python function"], "4": ["py", "method", "Python method"], "5": ["py", "property", "Python property"], "6": ["py", "exception", "Python exception"], "7": ["py", "data", "Python data"]}, "titleterms": {"ax": [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15], "benchmark": [1, 10, 15], "method": 1, "problem": [1, 7, 11], "result": [1, 15], "score": 1, "gpei": 1, "moo": 1, "modular": 1, "botorch": [1, 7, 9, 11], "saasbo": 1, "choos": 1, "gener": [1, 4, 8, 14], "strategi": [1, 3, 4, 5, 8, 14], "registri": [1, 8, 13], "high": 1, "dimension": 1, "embed": 1, "surrog": [1, 9], "mix": 1, "integ": 1, "synthet": [1, 11, 15], "jenatton": [1, 7], "pytorchcnn": 1, "torchvis": 1, "core": [2, 4, 15], "class": 2, "abstractdata": 2, "arm": 2, "basetri": 2, "batchtrial": 2, "data": [2, 4], "experi": [2, 14], "generationstrategyinterfac": 2, "generatorrun": 2, "mapdata": 2, "mapmetr": 2, "metric": [2, 7, 15], "multitypeexperi": 2, "object": 2, "observ": 2, "optimizationconfig": 2, "outcomeconstraint": 2, "paramet": 2, "parameterconstraint": 2, "parameterdistribut": 2, "riskmeasur": 2, "runner": [2, 11], "searchspac": 2, "trial": 2, "type": [2, 9], "util": [2, 3, 8, 9, 10, 12, 13, 15], "format": 2, "early_stop": 3, "base": [3, 5, 8, 9, 10, 15], "logic": 3, "percentileearlystoppingstrategi": 3, "thresholdearlystoppingstrategi": 3, "except": 4, "constant": [4, 15], "model": [4, 8, 9, 10, 15], "storag": [4, 13, 15], "global_stop": 5, "improvementglobalstoppingstrategi": 5, "api": 6, "refer": 6, "indic": 6, "tabl": [6, 10], "test": [7, 11, 15], "branin": [7, 15], "map": [7, 8, 15], "chemistri": 7, "curv": 7, "dictionari": 7, "lookup": 7, "factori": [7, 8], "hartmann6": 7, "l2": 7, "norm": 7, "noisi": 7, "function": [7, 15], "sklearn": 7, "tensorboard": 7, "torchx": [7, 11], "modelbridg": 8, "node": 8, "modelspec": 8, "bridg": 8, "discret": [8, 9], "random": [8, 9], "torch": [8, 9, 15], "pairwis": 8, "predict": 8, "cross": 8, "valid": [8, 13], "dispatch": 8, "transform": 8, "cast": 8, "cap_paramet": 8, "centered_unit_x": 8, "choice_encod": 8, "convert_metric_nam": 8, "derelativ": 8, "int_range_to_choic": 8, "int_to_float": 8, "ivw": 8, "inverse_gaussian_cdf_i": 8, "log": 8, "log_i": 8, "logit": 8, "map_unit_x": 8, "merge_repeated_measur": 8, "metrics_as_task": 8, "one_hot": 8, "percentile_i": 8, "power_transform_i": 8, "remove_fix": 8, "round": 8, "search_space_to_choic": 8, "search_space_to_float": 8, "stratified_standardize_i": 8, "task_encod": 8, "trial_as_task": 8, "unit_x": 8, "winsor": 8, "relativ": 8, "alebo": [8, 9], "discrete_bas": 9, "modul": [9, 13], "torch_bas": 9, "model_util": 9, "winsorization_config": 9, "eb_thompson": 9, "full_factori": 9, "thompson": 9, "uniform": 9, "sobol": [9, 15], "alebo_initi": 9, "rembo_initi": 9, "botorch_default": 9, "botorch_kg": 9, "botorch_m": 9, "botorch_moo": 9, "botorch_moo_default": 9, "botorch_modular": 9, "acquisit": 9, "default_opt": 9, "list_surrog": 9, "randomforest": 9, "multi_fidel": 9, "optimizer_argpars": 9, "sebo": 9, "kernel": 9, "input_constructor": 9, "covar_modul": 9, "input_transform": 9, "outcome_transform": 9, "cbo_lcea": 9, "cbo_lcem": 9, "cbo_sac": 9, "frontier_util": 9, "fully_bayesian": 9, "fully_bayesian_model_util": 9, "posterior_mean": 9, "rembo": 9, "plot": [10, 15], "render": [10, 15], "bandit": 10, "rollout": 10, "contour": 10, "featur": 10, "import": 10, "margin": 10, "effect": 10, "diagnost": 10, "pareto": 10, "scatter": 10, "slice": 10, "trace": 10, "parallel": 10, "coordin": 10, "singlerunningtrialmixin": 11, "simul": [11, 15], "backend": [11, 15], "servic": 12, "client": 12, "manag": 12, "loop": 12, "interact": 12, "schedul": [12, 14, 15], "best": 12, "point": 12, "identif": 12, "instanti": 12, "report": [12, 15], "withdbsettingsbas": 12, "earlystop": 12, "json": 13, "json_stor": 13, "decod": 13, "encod": 13, "load": 13, "save": 13, "sqlalchemi": 13, "mysql": 13, "sqlite": 13, "sqa_stor": 13, "base_decod": 13, "base_encod": 13, "db": 13, "delet": [13, 15], "struct": 13, "sqa_class": 13, "sqa_config": 13, "sqa_enum": 13, "timestamp": 13, "reduced_st": 13, "telemetri": 14, "common": 15, "decor": 15, "docutil": 15, "equal": 15, "kwarg": 15, "logger": 15, "mock": 15, "serial": 15, "testutil": 15, "timeutil": 15, "typeutil": 15, "flake8": 15, "plugin": 15, "docstr": 15, "checker": 15, "measur": 15, "notebook": 15, "sensit": 15, "deriv": 15, "gp": 15, "stat": 15, "statstool": 15, "fit": 15, "stub": 15, "init": 15, "file": 15, "unittest": 15, "convent": 15, "tutori": 15, "neural": 15, "net": 15}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"ax": [[0, "ax"]], "ax.benchmark": [[1, "module-ax.benchmark"]], "Benchmark": [[1, "benchmark"], [1, "id1"], [10, "benchmark"]], "Benchmark Method": [[1, "module-ax.benchmark.benchmark_method"]], "Benchmark Problem": [[1, "module-ax.benchmark.benchmark_problem"]], "Benchmark Result": [[1, "module-ax.benchmark.benchmark_result"]], "Scored Benchmark": [[1, "scored-benchmark"]], "Benchmark Methods GPEI and MOO": [[1, "benchmark-methods-gpei-and-moo"]], "Benchmark Methods Modular BoTorch": [[1, "benchmark-methods-modular-botorch"]], "Benchmark Methods SAASBO": [[1, "benchmark-methods-saasbo"]], "Benchmark Methods Choose Generation Strategy": [[1, "benchmark-methods-choose-generation-strategy"]], "Benchmark Problems Registry": [[1, "module-ax.benchmark.problems.registry"]], "Benchmark Problems High Dimensional Embedding": [[1, "module-ax.benchmark.problems.hd_embedding"]], "Benchmark Problems Surrogate": [[1, "module-ax.benchmark.problems.surrogate"]], "Benchmark Problems Mixed Integer Synthetic": [[1, "benchmark-problems-mixed-integer-synthetic"]], "Benchmark Problems Jenatton": [[1, "module-ax.benchmark.problems.synthetic.hss.jenatton"]], "Benchmark Problems PyTorchCNN": [[1, "module-ax.benchmark.problems.hpo.pytorch_cnn"]], "Benchmark Problems PyTorchCNN TorchVision": [[1, "benchmark-problems-pytorchcnn-torchvision"]], "ax.core": [[2, "module-ax.core"]], "Core Classes": [[2, "core-classes"]], "AbstractData": [[2, "abstractdata"]], "Arm": [[2, "module-ax.core.arm"]], "BaseTrial": [[2, "module-ax.core.base_trial"]], "BatchTrial": [[2, "module-ax.core.batch_trial"]], "Data": [[2, "data"], [4, "module-ax.exceptions.data_provider"]], "Experiment": [[2, "module-ax.core.experiment"], [14, "module-ax.telemetry.experiment"]], "GenerationStrategyInterface": [[2, "generationstrategyinterface"]], "GeneratorRun": [[2, "module-ax.core.generator_run"]], "MapData": [[2, "mapdata"]], "MapMetric": [[2, "mapmetric"]], "Metric": [[2, "metric"]], "MultiTypeExperiment": [[2, "module-ax.core.multi_type_experiment"]], "Objective": [[2, "objective"]], "Observation": [[2, "module-ax.core.observation"]], "OptimizationConfig": [[2, "module-ax.core.optimization_config"]], "OutcomeConstraint": [[2, "outcomeconstraint"]], "Parameter": [[2, "module-ax.core.parameter"]], "ParameterConstraint": [[2, "module-ax.core.parameter_constraint"]], "ParameterDistribution": [[2, "module-ax.core.parameter_distribution"]], "RiskMeasure": [[2, "module-ax.core.risk_measures"]], "Runner": [[2, "module-ax.core.runner"]], "SearchSpace": [[2, "searchspace"]], "Trial": [[2, "module-ax.core.trial"]], "Core Types": [[2, "module-ax.core.types"]], "Core Utils": [[2, "module-ax.core.utils"]], "Formatting Utils": [[2, "formatting-utils"]], "ax.early_stopping": [[3, "module-ax.early_stopping"]], "Strategies": [[3, "strategies"], [5, "strategies"], [8, "strategies"]], "Base Strategies": [[3, "module-ax.early_stopping.strategies.base"], [5, "module-ax.global_stopping.strategies.base"]], "Logical Strategies": [[3, "module-ax.early_stopping.strategies.logical"]], "PercentileEarlyStoppingStrategy": [[3, "module-ax.early_stopping.strategies.percentile"]], "ThresholdEarlyStoppingStrategy": [[3, "module-ax.early_stopping.strategies.threshold"]], "Utils": [[3, "module-ax.early_stopping.utils"], [12, "utils"], [15, "module-ax.utils.testing.utils"]], "ax.exceptions": [[4, "module-ax.exceptions"]], "Constants": [[4, "module-ax.exceptions.constants"], [15, "module-ax.utils.common.constants"]], "Core": [[4, "module-ax.exceptions.core"]], "Generation Strategy": [[4, "module-ax.exceptions.generation_strategy"], [8, "module-ax.modelbridge.generation_strategy"], [14, "module-ax.telemetry.generation_strategy"]], "Model": [[4, "module-ax.exceptions.model"]], "Storage": [[4, "module-ax.exceptions.storage"], [15, "storage"]], "ax.global_stopping": [[5, "module-ax.global_stopping"]], "ImprovementGlobalStoppingStrategy": [[5, "improvementglobalstoppingstrategy"]], "API Reference": [[6, "api-reference"]], "Indices and tables": [[6, "indices-and-tables"]], "ax.metrics": [[7, "module-ax.metrics"]], "BoTorch Test Problem": [[7, "botorch-test-problem"], [11, "botorch-test-problem"]], "Branin": [[7, "module-ax.metrics.branin"]], "Branin Map": [[7, "module-ax.metrics.branin_map"]], "Chemistry": [[7, "module-ax.metrics.chemistry"]], "Curve": [[7, "module-ax.metrics.curve"]], "Dictionary Lookup": [[7, "dictionary-lookup"]], "Factorial": [[7, "module-ax.metrics.factorial"]], "Hartmann6": [[7, "module-ax.metrics.hartmann6"]], "Jenatton": [[7, "module-ax.metrics.jenatton"]], "L2 Norm": [[7, "module-ax.metrics.l2norm"]], "Noisy Functions": [[7, "module-ax.metrics.noisy_function"]], "Noisy Function Map": [[7, "module-ax.metrics.noisy_function_map"]], "Sklearn": [[7, "module-ax.metrics.sklearn"]], "Tensorboard": [[7, "module-ax.metrics.tensorboard"]], "TorchX": [[7, "module-ax.metrics.torchx"]], "ax.modelbridge": [[8, "module-ax.modelbridge"]], "Generation Strategy, Registry, and Factory": [[8, "generation-strategy-registry-and-factory"]], "Generation Node": [[8, "module-ax.modelbridge.generation_node"]], "Registry": [[8, "module-ax.modelbridge.registry"]], "Factory": [[8, "module-ax.modelbridge.factory"]], "ModelSpec": [[8, "module-ax.modelbridge.model_spec"]], "Model Bridges": [[8, "model-bridges"]], "Base Model Bridge": [[8, "module-ax.modelbridge.base"]], "Discrete Model Bridge": [[8, "module-ax.modelbridge.discrete"]], "Random Model Bridge": [[8, "random-model-bridge"]], "Torch Model Bridge": [[8, "module-ax.modelbridge.torch"]], "Pairwise Model Bridge": [[8, "pairwise-model-bridge"]], "Map Torch Model Bridge": [[8, "map-torch-model-bridge"]], "Utilities": [[8, "utilities"], [13, "module-ax.storage.utils"]], "General Utilities": [[8, "module-ax.modelbridge.modelbridge_utils"]], "Prediction Utilities": [[8, "prediction-utilities"]], "Cross Validation": [[8, "module-ax.modelbridge.cross_validation"]], "Dispatch Utilities": [[8, "module-ax.modelbridge.dispatch_utils"]], "Transforms": [[8, "transforms"]], "ax.modelbridge.transforms.base": [[8, "module-ax.modelbridge.transforms.base"]], "ax.modelbridge.transforms.cast": [[8, "module-ax.modelbridge.transforms.cast"]], "ax.modelbridge.transforms.cap_parameter": [[8, "module-ax.modelbridge.transforms.cap_parameter"]], "ax.modelbridge.transforms.centered_unit_x": [[8, "module-ax.modelbridge.transforms.centered_unit_x"]], "ax.modelbridge.transforms.choice_encode": [[8, "module-ax.modelbridge.transforms.choice_encode"]], "ax.modelbridge.transforms.convert_metric_names": [[8, "module-ax.modelbridge.transforms.convert_metric_names"]], "ax.modelbridge.transforms.derelativize": [[8, "module-ax.modelbridge.transforms.derelativize"]], "ax.modelbridge.transforms.int_range_to_choice": [[8, "module-ax.modelbridge.transforms.int_range_to_choice"]], "ax.modelbridge.transforms.int_to_float": [[8, "module-ax.modelbridge.transforms.int_to_float"]], "ax.modelbridge.transforms.ivw": [[8, "module-ax.modelbridge.transforms.ivw"]], "ax.modelbridge.transforms.inverse_gaussian_cdf_y": [[8, "module-ax.modelbridge.transforms.inverse_gaussian_cdf_y"]], "ax.modelbridge.transforms.log": [[8, "module-ax.modelbridge.transforms.log"]], "ax.modelbridge.transforms.log_y": [[8, "module-ax.modelbridge.transforms.log_y"]], "ax.modelbridge.transforms.logit": [[8, "module-ax.modelbridge.transforms.logit"]], "ax.modelbridge.transforms.map_unit_x": [[8, "module-ax.modelbridge.transforms.map_unit_x"]], "ax.modelbridge.transforms.merge_repeated_measurements": [[8, "ax-modelbridge-transforms-merge-repeated-measurements"]], "ax.modelbridge.transforms.metrics_as_task": [[8, "ax-modelbridge-transforms-metrics-as-task"]], "ax.modelbridge.transforms.one_hot": [[8, "module-ax.modelbridge.transforms.one_hot"]], "ax.modelbridge.transforms.percentile_y": [[8, "module-ax.modelbridge.transforms.percentile_y"]], "ax.modelbridge.transforms.power_transform_y": [[8, "module-ax.modelbridge.transforms.power_transform_y"]], "ax.modelbridge.transforms.remove_fixed": [[8, "module-ax.modelbridge.transforms.remove_fixed"]], "ax.modelbridge.transforms.rounding": [[8, "module-ax.modelbridge.transforms.rounding"]], "ax.modelbridge.transforms.search_space_to_choice": [[8, "module-ax.modelbridge.transforms.search_space_to_choice"]], "ax.modelbridge.transforms.search_space_to_float": [[8, "ax-modelbridge-transforms-search-space-to-float"]], "ax.modelbridge.transforms.stratified_standardize_y": [[8, "module-ax.modelbridge.transforms.stratified_standardize_y"]], "ax.modelbridge.transforms.task_encode": [[8, "module-ax.modelbridge.transforms.task_encode"]], "ax.modelbridge.transforms.trial_as_task": [[8, "module-ax.modelbridge.transforms.trial_as_task"]], "ax.modelbridge.transforms.unit_x": [[8, "module-ax.modelbridge.transforms.unit_x"]], "ax.modelbridge.transforms.utils": [[8, "module-ax.modelbridge.transforms.utils"]], "ax.modelbridge.winsorize": [[8, "module-ax.modelbridge.transforms.winsorize"]], "}": [[8, "id9"], [11, "id1"]], "ax.modelbridge.transforms.relativize": [[8, "module-ax.modelbridge.transforms.relativize"]], "ax.modelbridge.strategies.alebo": [[8, "module-ax.modelbridge.strategies.alebo"]], "ax.models": [[9, "module-ax.models"]], "Base Models & Utilities": [[9, "base-models-utilities"]], "ax.models.base": [[9, "module-ax.models.base"]], "ax.models.discrete_base module": [[9, "module-ax.models.discrete_base"]], "ax.models.torch_base module": [[9, "module-ax.models.torch_base"]], "ax.models.model_utils module": [[9, "module-ax.models.model_utils"]], "ax.models.types": [[9, "module-ax.models.types"]], "ax.models.winsorization_config module": [[9, "ax-models-winsorization-config-module"]], "Discrete Models": [[9, "discrete-models"]], "ax.models.discrete.eb_thompson module": [[9, "module-ax.models.discrete.eb_thompson"]], "ax.models.discrete.full_factorial module": [[9, "module-ax.models.discrete.full_factorial"]], "ax.models.discrete.thompson module": [[9, "module-ax.models.discrete.thompson"]], "Random Models": [[9, "random-models"]], "ax.models.random.base module": [[9, "module-ax.models.random.base"]], "ax.models.random.uniform module": [[9, "module-ax.models.random.uniform"]], "ax.models.random.sobol module": [[9, "module-ax.models.random.sobol"]], "ax.models.random.alebo_initializer module": [[9, "module-ax.models.random.alebo_initializer"]], "ax.models.random.rembo_initializer module": [[9, "module-ax.models.random.rembo_initializer"]], "Torch Models & Utilities": [[9, "torch-models-utilities"]], "ax.models.torch.alebo module": [[9, "module-ax.models.torch.alebo"]], "ax.models.torch.botorch module": [[9, "module-ax.models.torch.botorch"]], "ax.models.torch.botorch_defaults module": [[9, "module-ax.models.torch.botorch_defaults"]], "ax.models.torch.botorch_kg module": [[9, "module-ax.models.torch.botorch_kg"]], "ax.models.torch.botorch_mes module": [[9, "module-ax.models.torch.botorch_mes"]], "ax.models.torch.botorch_moo module": [[9, "module-ax.models.torch.botorch_moo"]], "ax.models.torch.botorch_moo_defaults module": [[9, "module-ax.models.torch.botorch_moo_defaults"]], "ax.models.torch.botorch_modular.acquisition module": [[9, "module-ax.models.torch.botorch_modular.acquisition"]], "ax.models.torch.botorch_modular.default_options module": [[9, "ax-models-torch-botorch-modular-default-options-module"]], "ax.models.torch.botorch_modular.list_surrogate module": [[9, "ax-models-torch-botorch-modular-list-surrogate-module"]], "ax.models.torch.randomforest module": [[9, "module-ax.models.torch.randomforest"]], "ax.models.torch.botorch_modular.model module": [[9, "module-ax.models.torch.botorch_modular.model"]], "ax.models.torch.botorch_modular.multi_fidelity module": [[9, "module-ax.models.torch.botorch_modular.multi_fidelity"]], "ax.models.torch.botorch_modular.optimizer_argparse module": [[9, "ax-models-torch-botorch-modular-optimizer-argparse-module"]], "ax.models.torch.botorch_modular.sebo module": [[9, "module-ax.models.torch.botorch_modular.sebo"]], "ax.models.torch.botorch_modular.surrogate module": [[9, "module-ax.models.torch.botorch_modular.surrogate"]], "ax.models.torch.botorch_modular.utils module": [[9, "module-ax.models.torch.botorch_modular.utils"]], "ax.models.torch.botorch_modular.kernels module": [[9, "module-ax.models.torch.botorch_modular.kernels"]], "ax.models.torch.botorch_modular.input_constructors.covar_modules module": [[9, "ax-models-torch-botorch-modular-input-constructors-covar-modules-module"]], "ax.models.torch.botorch_modular.input_constructors.input_transforms module": [[9, "ax-models-torch-botorch-modular-input-constructors-input-transforms-module"]], "ax.models.torch.botorch_modular.input_constructors.outcome_transform module": [[9, "ax-models-torch-botorch-modular-input-constructors-outcome-transform-module"]], "ax.models.torch.cbo_lcea module": [[9, "module-ax.models.torch.cbo_lcea"]], "ax.models.torch.cbo_lcem module": [[9, "module-ax.models.torch.cbo_lcem"]], "ax.models.torch.cbo_sac module": [[9, "module-ax.models.torch.cbo_sac"]], "ax.models.torch.frontier_utils module": [[9, "module-ax.models.torch.frontier_utils"]], "ax.models.torch.fully_bayesian module": [[9, "module-ax.models.torch.fully_bayesian"]], "ax.models.torch.fully_bayesian_model_utils module": [[9, "ax-models-torch-fully-bayesian-model-utils-module"]], "ax.models.torch.posterior_mean module": [[9, "module-ax.models.torch.posterior_mean"]], "ax.models.torch.rembo module": [[9, "module-ax.models.torch.rembo"]], "ax.models.torch.utils module": [[9, "module-ax.models.torch.utils"]], "ax.plot": [[10, "module-ax.plot"]], "Rendering": [[10, "module-ax.plot.render"]], "Plots": [[10, "plots"]], "Base": [[10, "module-ax.plot.base"], [15, "module-ax.utils.common.base"]], "Bandit Rollout": [[10, "module-ax.plot.bandit_rollout"]], "Contour Plot": [[10, "module-ax.plot.contour"]], "Feature Importances": [[10, "module-ax.plot.feature_importances"]], "Marginal Effects": [[10, "module-ax.plot.marginal_effects"]], "Model Diagnostics": [[10, "module-ax.plot.diagnostic"]], "Pareto Plots": [[10, "module-ax.plot.pareto_utils"]], "Scatter Plots": [[10, "module-ax.plot.scatter"]], "Slice Plot": [[10, "module-ax.plot.slice"]], "Table": [[10, "module-ax.plot.table_view"]], "Trace Plots": [[10, "trace-plots"]], "Parallel Coordinates": [[10, "parallel-coordinates"]], "Plotting Utilities": [[10, "module-ax.plot.color"]], "ax.runners": [[11, "module-ax.runners"]], "SingleRunningTrialMixin": [[11, "singlerunningtrialmixin"]], "Synthetic Runner": [[11, "module-ax.runners.synthetic"]], "Simulated Backend Runner": [[11, "simulated-backend-runner"]], "TorchX Runner": [[11, "module-ax.runners.torchx"]], "ax.service": [[12, "module-ax.service"]], "Ax Client": [[12, "ax-client"]], "Managed Loop": [[12, "module-ax.service.managed_loop"]], "Interactive Loop": [[12, "interactive-loop"]], "Scheduler": [[12, "module-ax.service.utils.scheduler_options"], [14, "module-ax.telemetry.scheduler"]], "Best Point Identification": [[12, "module-ax.service.utils.best_point_mixin"]], "Instantiation": [[12, "module-ax.service.utils.instantiation"]], "Reporting": [[12, "reporting"]], "WithDBSettingsBase": [[12, "withdbsettingsbase"]], "EarlyStopping": [[12, "module-ax.service.utils.early_stopping"]], "ax.storage": [[13, "module-ax.storage"]], "JSON": [[13, "json"]], "ax.storage.json_store.decoder module": [[13, "module-ax.storage.json_store.decoder"]], "ax.storage.json_store.decoders module": [[13, "module-ax.storage.json_store.decoders"]], "ax.storage.json_store.encoder module": [[13, "module-ax.storage.json_store.encoder"]], "ax.storage.json_store.encoders module": [[13, "module-ax.storage.json_store.encoders"]], "ax.storage.json_store.load module": [[13, "module-ax.storage.json_store.load"]], "ax.storage.json_store.registry module": [[13, "module-ax.storage.json_store.registry"]], "ax.storage.json_store.save module": [[13, "module-ax.storage.json_store.save"]], "SQLAlchemy (MySQL / SQLite)": [[13, "sqlalchemy-mysql-sqlite"]], "ax.storage.sqa_store.base_decoder module": [[13, "module-ax.storage.sqa_store.decoder"]], "ax.storage.sqa_store.base_encoder module": [[13, "module-ax.storage.sqa_store.encoder"]], "ax.storage.sqa_store.db module": [[13, "module-ax.storage.sqa_store.db"]], "ax.storage.sqa_store.delete module": [[13, "module-ax.storage.sqa_store.delete"]], "ax.storage.sqa_store.json module": [[13, "module-ax.storage.sqa_store.json"]], "ax.storage.sqa_store.load module": [[13, "module-ax.storage.sqa_store.load"]], "ax.storage.sqa_store.save module": [[13, "module-ax.storage.sqa_store.save"]], "ax.storage.sqa_store.structs module": [[13, "module-ax.storage.sqa_store.structs"]], "ax.storage.sqa_store.sqa_classes module": [[13, "module-ax.storage.sqa_store.sqa_classes"]], "ax.storage.sqa_store.sqa_config module": [[13, "ax-storage-sqa-store-sqa-config-module"]], "ax.storage.sqa_store.sqa_enum module": [[13, "module-ax.storage.sqa_store.sqa_enum"]], "ax.storage.sqa_store.timestamp module": [[13, "module-ax.storage.sqa_store.timestamp"]], "ax.storage.sqa_store.utils module": [[13, "module-ax.storage.sqa_store.utils"]], "ax.storage.sqa_store.validation module": [[13, "module-ax.storage.sqa_store.validation"]], "ax.storage.sqa_store.reduced_state module": [[13, "module-ax.storage.sqa_store.reduced_state"]], "Registries": [[13, "module-ax.storage.botorch_modular_registry"]], "ax.telemetry": [[14, "module-ax.telemetry"]], "ax.utils": [[15, "module-ax.utils"]], "Common": [[15, "common"]], "Decorator": [[15, "module-ax.utils.common.decorator"]], "Docutils": [[15, "module-ax.utils.common.docutils"]], "Equality": [[15, "module-ax.utils.common.equality"], [15, "id1"]], "Kwargs": [[15, "module-ax.utils.common.kwargs"]], "Logger": [[15, "module-ax.utils.common.logger"]], "Mock Torch": [[15, "module-ax.utils.common.mock"]], "Result": [[15, "module-ax.utils.common.result"]], "Serialization": [[15, "module-ax.utils.common.serialization"]], "Testutils": [[15, "module-ax.utils.common.testutils"]], "Timeutils": [[15, "module-ax.utils.common.timeutils"]], "Typeutils": [[15, "module-ax.utils.common.typeutils"]], "Typeutils Torch": [[15, "module-ax.utils.common.typeutils_torch"]], "Flake8 Plugins": [[15, "flake8-plugins"]], "Docstring Checker": [[15, "module-ax.utils.flake8_plugins.docstring_checker"]], "Measurement": [[15, "measurement"]], "Synthetic Functions": [[15, "module-ax.utils.measurement.synthetic_functions"]], "Notebook": [[15, "notebook"]], "Plotting": [[15, "module-ax.utils.notebook.plotting"]], "Report": [[15, "report"]], "Render": [[15, "module-ax.utils.report.render"]], "Sensitivity": [[15, "sensitivity"]], "Derivative GP": [[15, "module-ax.utils.sensitivity.derivative_gp"]], "Derivative Measures": [[15, "module-ax.utils.sensitivity.derivative_measures"]], "Sobol Measures": [[15, "module-ax.utils.sensitivity.sobol_measures"]], "Stats": [[15, "stats"]], "Statstools": [[15, "module-ax.utils.stats.statstools"]], "Model Fit Metrics": [[15, "module-ax.utils.stats.model_fit_stats"]], "Deletion": [[15, "deletion"]], "Testing": [[15, "testing"]], "Backend Scheduler": [[15, "module-ax.utils.testing.backend_scheduler"]], "Backend Simulator": [[15, "module-ax.utils.testing.backend_simulator"]], "Benchmark Stubs": [[15, "module-ax.utils.testing.benchmark_stubs"]], "Core Stubs": [[15, "module-ax.utils.testing.core_stubs"]], "Modeling Stubs": [[15, "module-ax.utils.testing.modeling_stubs"]], "Mocking": [[15, "module-ax.utils.testing.mock"]], "Test Init Files": [[15, "module-ax.utils.testing.test_init_files"]], "Torch Stubs": [[15, "module-ax.utils.testing.torch_stubs"]], "Unittest Conventions": [[15, "unittest-conventions"]], "Test Metrics": [[15, "test-metrics"]], "Backend Simulator Map": [[15, "module-ax.utils.testing.metrics.backend_simulator_map"]], "Branin Backend Map": [[15, "module-ax.utils.testing.metrics.branin_backend_map"]], "Tutorials": [[15, "tutorials"]], "Neural Net": [[15, "module-ax.utils.tutorials.cnn_utils"]]}, "indexentries": {"aggregatedbenchmarkresult (class in ax.benchmark.benchmark_result)": [[1, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult"]], "benchmarkmethod (class in ax.benchmark.benchmark_method)": [[1, "ax.benchmark.benchmark_method.BenchmarkMethod"]], "benchmarkproblem (class in ax.benchmark.benchmark_problem)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblem"]], "benchmarkproblembase (class in ax.benchmark.benchmark_problem)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemBase"]], "benchmarkproblemregistryentry (class in ax.benchmark.problems.registry)": [[1, "ax.benchmark.problems.registry.BenchmarkProblemRegistryEntry"]], "benchmarkproblemwithknownoptimum (class in ax.benchmark.benchmark_problem)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemWithKnownOptimum"]], "benchmarkresult (class in ax.benchmark.benchmark_result)": [[1, "ax.benchmark.benchmark_result.BenchmarkResult"]], "moosurrogatebenchmarkproblem (class in ax.benchmark.problems.surrogate)": [[1, "ax.benchmark.problems.surrogate.MOOSurrogateBenchmarkProblem"]], "multiobjectivebenchmarkproblem (class in ax.benchmark.benchmark_problem)": [[1, "ax.benchmark.benchmark_problem.MultiObjectiveBenchmarkProblem"]], "pytorchcnnbenchmarkproblem (class in ax.benchmark.problems.hpo.pytorch_cnn)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNBenchmarkProblem"]], "pytorchcnnmetric (class in ax.benchmark.problems.hpo.pytorch_cnn)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNMetric"]], "pytorchcnnrunner (class in ax.benchmark.problems.hpo.pytorch_cnn)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner"]], "pytorchcnnrunner.cnn (class in ax.benchmark.problems.hpo.pytorch_cnn)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.CNN"]], "pytorchcnntorchvisionbenchmarkproblem (class in ax.benchmark.problems.hpo.torchvision)": [[1, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionBenchmarkProblem"]], "pytorchcnntorchvisionrunner (class in ax.benchmark.problems.hpo.torchvision)": [[1, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionRunner"]], "soosurrogatebenchmarkproblem (class in ax.benchmark.problems.surrogate)": [[1, "ax.benchmark.problems.surrogate.SOOSurrogateBenchmarkProblem"]], "singleobjectivebenchmarkproblem (class in ax.benchmark.benchmark_problem)": [[1, "ax.benchmark.benchmark_problem.SingleObjectiveBenchmarkProblem"]], "surrogatebenchmarkproblembase (class in ax.benchmark.problems.surrogate)": [[1, "ax.benchmark.problems.surrogate.SurrogateBenchmarkProblemBase"]], "surrogatemetric (class in ax.benchmark.problems.surrogate)": [[1, "ax.benchmark.problems.surrogate.SurrogateMetric"]], "surrogaterunner (class in ax.benchmark.problems.surrogate)": [[1, "ax.benchmark.problems.surrogate.SurrogateRunner"]], "ax.benchmark": [[1, "module-ax.benchmark"]], "ax.benchmark.benchmark_method": [[1, "module-ax.benchmark.benchmark_method"]], "ax.benchmark.benchmark_problem": [[1, "module-ax.benchmark.benchmark_problem"]], "ax.benchmark.benchmark_result": [[1, "module-ax.benchmark.benchmark_result"]], "ax.benchmark.problems.hd_embedding": [[1, "module-ax.benchmark.problems.hd_embedding"]], "ax.benchmark.problems.hpo.pytorch_cnn": [[1, "module-ax.benchmark.problems.hpo.pytorch_cnn"]], "ax.benchmark.problems.hpo.torchvision": [[1, "module-ax.benchmark.problems.hpo.torchvision"]], "ax.benchmark.problems.registry": [[1, "module-ax.benchmark.problems.registry"]], "ax.benchmark.problems.surrogate": [[1, "module-ax.benchmark.problems.surrogate"]], "ax.benchmark.problems.synthetic.discretized.mixed_integer": [[1, "module-ax.benchmark.problems.synthetic.discretized.mixed_integer"]], "ax.benchmark.problems.synthetic.hss.jenatton": [[1, "module-ax.benchmark.problems.synthetic.hss.jenatton"]], "deserialize_init_args() (ax.benchmark.problems.hpo.torchvision.pytorchcnntorchvisionrunner class method)": [[1, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionRunner.deserialize_init_args"]], "deserialize_init_args() (ax.benchmark.problems.surrogate.surrogaterunner class method)": [[1, "ax.benchmark.problems.surrogate.SurrogateRunner.deserialize_init_args"]], "distribute_replications (ax.benchmark.benchmark_method.benchmarkmethod attribute)": [[1, "ax.benchmark.benchmark_method.BenchmarkMethod.distribute_replications"]], "embed_higher_dimension() (in module ax.benchmark.problems.hd_embedding)": [[1, "ax.benchmark.problems.hd_embedding.embed_higher_dimension"]], "experiment (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.BenchmarkResult.experiment"]], "experiment_storage_id (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.BenchmarkResult.experiment_storage_id"]], "factory_fn (ax.benchmark.problems.registry.benchmarkproblemregistryentry attribute)": [[1, "ax.benchmark.problems.registry.BenchmarkProblemRegistryEntry.factory_fn"]], "factory_kwargs (ax.benchmark.problems.registry.benchmarkproblemregistryentry attribute)": [[1, "ax.benchmark.problems.registry.BenchmarkProblemRegistryEntry.factory_kwargs"]], "fetch_trial_data() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnmetric method)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNMetric.fetch_trial_data"]], "fetch_trial_data() (ax.benchmark.problems.surrogate.surrogatemetric method)": [[1, "ax.benchmark.problems.surrogate.SurrogateMetric.fetch_trial_data"]], "fit_time (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.fit_time"]], "fit_time (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.BenchmarkResult.fit_time"]], "forward() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnrunner.cnn method)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.CNN.forward"]], "from_benchmark_results() (ax.benchmark.benchmark_result.aggregatedbenchmarkresult class method)": [[1, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.from_benchmark_results"]], "from_botorch() (ax.benchmark.benchmark_problem.benchmarkproblem class method)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblem.from_botorch"]], "from_botorch_multi_objective() (ax.benchmark.benchmark_problem.multiobjectivebenchmarkproblem class method)": [[1, "ax.benchmark.benchmark_problem.MultiObjectiveBenchmarkProblem.from_botorch_multi_objective"]], "from_botorch_synthetic() (ax.benchmark.benchmark_problem.singleobjectivebenchmarkproblem class method)": [[1, "ax.benchmark.benchmark_problem.SingleObjectiveBenchmarkProblem.from_botorch_synthetic"]], "from_dataset_name() (ax.benchmark.problems.hpo.torchvision.pytorchcnntorchvisionbenchmarkproblem class method)": [[1, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionBenchmarkProblem.from_dataset_name"]], "from_datasets() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnbenchmarkproblem class method)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNBenchmarkProblem.from_datasets"]], "gen_time (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.gen_time"]], "gen_time (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.BenchmarkResult.gen_time"]], "generation_strategy (ax.benchmark.benchmark_method.benchmarkmethod attribute)": [[1, "ax.benchmark.benchmark_method.BenchmarkMethod.generation_strategy"]], "get_discrete_ackley() (in module ax.benchmark.problems.synthetic.discretized.mixed_integer)": [[1, "ax.benchmark.problems.synthetic.discretized.mixed_integer.get_discrete_ackley"]], "get_discrete_hartmann() (in module ax.benchmark.problems.synthetic.discretized.mixed_integer)": [[1, "ax.benchmark.problems.synthetic.discretized.mixed_integer.get_discrete_hartmann"]], "get_discrete_rosenbrock() (in module ax.benchmark.problems.synthetic.discretized.mixed_integer)": [[1, "ax.benchmark.problems.synthetic.discretized.mixed_integer.get_discrete_rosenbrock"]], "get_jenatton_benchmark_problem() (in module ax.benchmark.problems.synthetic.hss.jenatton)": [[1, "ax.benchmark.problems.synthetic.hss.jenatton.get_jenatton_benchmark_problem"]], "get_problem() (in module ax.benchmark.problems.registry)": [[1, "ax.benchmark.problems.registry.get_problem"]], "get_sequential_optimization_scheduler_options() (in module ax.benchmark.benchmark_method)": [[1, "ax.benchmark.benchmark_method.get_sequential_optimization_scheduler_options"]], "infer_noise (ax.benchmark.benchmark_problem.benchmarkproblembase attribute)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemBase.infer_noise"]], "module": [[1, "module-ax.benchmark"], [1, "module-ax.benchmark.benchmark_method"], [1, "module-ax.benchmark.benchmark_problem"], [1, "module-ax.benchmark.benchmark_result"], [1, "module-ax.benchmark.problems.hd_embedding"], [1, "module-ax.benchmark.problems.hpo.pytorch_cnn"], [1, "module-ax.benchmark.problems.hpo.torchvision"], [1, "module-ax.benchmark.problems.registry"], [1, "module-ax.benchmark.problems.surrogate"], [1, "module-ax.benchmark.problems.synthetic.discretized.mixed_integer"], [1, "module-ax.benchmark.problems.synthetic.hss.jenatton"], [2, "module-ax.core"], [2, "module-ax.core.arm"], [2, "module-ax.core.base_trial"], [2, "module-ax.core.batch_trial"], [2, "module-ax.core.experiment"], [2, "module-ax.core.formatting_utils"], [2, "module-ax.core.generation_strategy_interface"], [2, "module-ax.core.generator_run"], [2, "module-ax.core.multi_type_experiment"], [2, "module-ax.core.observation"], [2, "module-ax.core.optimization_config"], [2, "module-ax.core.parameter"], [2, "module-ax.core.parameter_constraint"], [2, "module-ax.core.parameter_distribution"], [2, "module-ax.core.risk_measures"], [2, "module-ax.core.runner"], [2, "module-ax.core.trial"], [2, "module-ax.core.types"], [2, "module-ax.core.utils"], [3, "module-ax.early_stopping"], [3, "module-ax.early_stopping.strategies.base"], [3, "module-ax.early_stopping.strategies.logical"], [3, "module-ax.early_stopping.strategies.percentile"], [3, "module-ax.early_stopping.strategies.threshold"], [3, "module-ax.early_stopping.utils"], [4, "module-ax.exceptions"], [4, "module-ax.exceptions.constants"], [4, "module-ax.exceptions.core"], [4, "module-ax.exceptions.data_provider"], [4, "module-ax.exceptions.generation_strategy"], [4, "module-ax.exceptions.model"], [4, "module-ax.exceptions.storage"], [5, "module-ax.global_stopping"], [5, "module-ax.global_stopping.strategies.base"], [5, "module-ax.global_stopping.strategies.improvement"], [7, "module-ax.metrics"], [7, "module-ax.metrics.botorch_test_problem"], [7, "module-ax.metrics.branin"], [7, "module-ax.metrics.branin_map"], [7, "module-ax.metrics.chemistry"], [7, "module-ax.metrics.curve"], [7, "module-ax.metrics.dict_lookup"], [7, "module-ax.metrics.factorial"], [7, "module-ax.metrics.hartmann6"], [7, "module-ax.metrics.jenatton"], [7, "module-ax.metrics.l2norm"], [7, "module-ax.metrics.noisy_function"], [7, "module-ax.metrics.noisy_function_map"], [7, "module-ax.metrics.sklearn"], [7, "module-ax.metrics.tensorboard"], [7, "module-ax.metrics.torchx"], [8, "module-ax.modelbridge"], [8, "module-ax.modelbridge.base"], [8, "module-ax.modelbridge.cross_validation"], [8, "module-ax.modelbridge.discrete"], [8, "module-ax.modelbridge.dispatch_utils"], [8, "module-ax.modelbridge.factory"], [8, "module-ax.modelbridge.generation_node"], [8, "module-ax.modelbridge.generation_strategy"], [8, "module-ax.modelbridge.map_torch"], [8, "module-ax.modelbridge.model_spec"], [8, "module-ax.modelbridge.modelbridge_utils"], [8, "module-ax.modelbridge.pairwise"], [8, "module-ax.modelbridge.prediction_utils"], [8, "module-ax.modelbridge.registry"], [8, "module-ax.modelbridge.strategies.alebo"], [8, "module-ax.modelbridge.strategies.rembo"], [8, "module-ax.modelbridge.torch"], [8, "module-ax.modelbridge.transforms.base"], [8, "module-ax.modelbridge.transforms.cap_parameter"], [8, "module-ax.modelbridge.transforms.cast"], [8, "module-ax.modelbridge.transforms.centered_unit_x"], [8, "module-ax.modelbridge.transforms.choice_encode"], [8, "module-ax.modelbridge.transforms.convert_metric_names"], [8, "module-ax.modelbridge.transforms.derelativize"], [8, "module-ax.modelbridge.transforms.int_range_to_choice"], [8, "module-ax.modelbridge.transforms.int_to_float"], [8, "module-ax.modelbridge.transforms.inverse_gaussian_cdf_y"], [8, "module-ax.modelbridge.transforms.ivw"], [8, "module-ax.modelbridge.transforms.log"], [8, "module-ax.modelbridge.transforms.log_y"], [8, "module-ax.modelbridge.transforms.logit"], [8, "module-ax.modelbridge.transforms.map_unit_x"], [8, "module-ax.modelbridge.transforms.merge_repeated_measurements"], [8, "module-ax.modelbridge.transforms.metrics_as_task"], [8, "module-ax.modelbridge.transforms.one_hot"], [8, "module-ax.modelbridge.transforms.percentile_y"], [8, "module-ax.modelbridge.transforms.power_transform_y"], [8, "module-ax.modelbridge.transforms.relativize"], [8, "module-ax.modelbridge.transforms.remove_fixed"], [8, "module-ax.modelbridge.transforms.rounding"], [8, "module-ax.modelbridge.transforms.search_space_to_choice"], [8, "module-ax.modelbridge.transforms.standardize_y"], [8, "module-ax.modelbridge.transforms.stratified_standardize_y"], [8, "module-ax.modelbridge.transforms.task_encode"], [8, "module-ax.modelbridge.transforms.trial_as_task"], [8, "module-ax.modelbridge.transforms.unit_x"], [8, "module-ax.modelbridge.transforms.utils"], [8, "module-ax.modelbridge.transforms.winsorize"], [9, "module-ax.models"], [9, "module-ax.models.base"], [9, "module-ax.models.discrete.eb_thompson"], [9, "module-ax.models.discrete.full_factorial"], [9, "module-ax.models.discrete.thompson"], [9, "module-ax.models.discrete_base"], [9, "module-ax.models.model_utils"], [9, "module-ax.models.random.alebo_initializer"], [9, "module-ax.models.random.base"], [9, "module-ax.models.random.rembo_initializer"], [9, "module-ax.models.random.sobol"], [9, "module-ax.models.random.uniform"], [9, "module-ax.models.torch.alebo"], [9, "module-ax.models.torch.botorch"], [9, "module-ax.models.torch.botorch_defaults"], [9, "module-ax.models.torch.botorch_kg"], [9, "module-ax.models.torch.botorch_mes"], [9, "module-ax.models.torch.botorch_modular.acquisition"], [9, "module-ax.models.torch.botorch_modular.input_constructors.covar_modules"], [9, "module-ax.models.torch.botorch_modular.input_constructors.input_transforms"], [9, "module-ax.models.torch.botorch_modular.input_constructors.outcome_transform"], [9, "module-ax.models.torch.botorch_modular.kernels"], [9, "module-ax.models.torch.botorch_modular.model"], [9, "module-ax.models.torch.botorch_modular.multi_fidelity"], [9, "module-ax.models.torch.botorch_modular.optimizer_argparse"], [9, "module-ax.models.torch.botorch_modular.sebo"], [9, "module-ax.models.torch.botorch_modular.surrogate"], [9, "module-ax.models.torch.botorch_modular.utils"], [9, "module-ax.models.torch.botorch_moo"], [9, "module-ax.models.torch.botorch_moo_defaults"], [9, "module-ax.models.torch.cbo_lcea"], [9, "module-ax.models.torch.cbo_lcem"], [9, "module-ax.models.torch.cbo_sac"], [9, "module-ax.models.torch.frontier_utils"], [9, "module-ax.models.torch.fully_bayesian"], [9, "module-ax.models.torch.fully_bayesian_model_utils"], [9, "module-ax.models.torch.posterior_mean"], [9, "module-ax.models.torch.randomforest"], [9, "module-ax.models.torch.rembo"], [9, "module-ax.models.torch.utils"], [9, "module-ax.models.torch_base"], [9, "module-ax.models.types"], [9, "module-ax.models.winsorization_config"], [10, "module-ax.plot"], [10, "module-ax.plot.bandit_rollout"], [10, "module-ax.plot.base"], [10, "module-ax.plot.color"], [10, "module-ax.plot.contour"], [10, "module-ax.plot.diagnostic"], [10, "module-ax.plot.feature_importances"], [10, "module-ax.plot.helper"], [10, "module-ax.plot.marginal_effects"], [10, "module-ax.plot.pareto_utils"], [10, "module-ax.plot.render"], [10, "module-ax.plot.scatter"], [10, "module-ax.plot.slice"], [10, "module-ax.plot.table_view"], [11, "module-ax.runners"], [11, "module-ax.runners.botorch_test_problem"], [11, "module-ax.runners.simulated_backend"], [11, "module-ax.runners.single_running_trial_mixin"], [11, "module-ax.runners.synthetic"], [11, "module-ax.runners.torchx"], [12, "module-ax.service"], [12, "module-ax.service.managed_loop"], [12, "module-ax.service.utils.best_point"], [12, "module-ax.service.utils.best_point_mixin"], [12, "module-ax.service.utils.early_stopping"], [12, "module-ax.service.utils.instantiation"], [12, "module-ax.service.utils.scheduler_options"], [13, "module-ax.storage"], [13, "module-ax.storage.botorch_modular_registry"], [13, "module-ax.storage.json_store.decoder"], [13, "module-ax.storage.json_store.decoders"], [13, "module-ax.storage.json_store.encoder"], [13, "module-ax.storage.json_store.encoders"], [13, "module-ax.storage.json_store.load"], [13, "module-ax.storage.json_store.registry"], [13, "module-ax.storage.json_store.save"], [13, "module-ax.storage.metric_registry"], [13, "module-ax.storage.registry_bundle"], [13, "module-ax.storage.runner_registry"], [13, "module-ax.storage.sqa_store.db"], [13, "module-ax.storage.sqa_store.decoder"], [13, "module-ax.storage.sqa_store.delete"], [13, "module-ax.storage.sqa_store.encoder"], [13, "module-ax.storage.sqa_store.json"], [13, "module-ax.storage.sqa_store.load"], [13, "module-ax.storage.sqa_store.reduced_state"], [13, "module-ax.storage.sqa_store.save"], [13, "module-ax.storage.sqa_store.sqa_classes"], [13, "module-ax.storage.sqa_store.sqa_enum"], [13, "module-ax.storage.sqa_store.structs"], [13, "module-ax.storage.sqa_store.timestamp"], [13, "module-ax.storage.sqa_store.utils"], [13, "module-ax.storage.sqa_store.validation"], [13, "module-ax.storage.transform_registry"], [13, "module-ax.storage.utils"], [14, "module-ax.telemetry"], [14, "module-ax.telemetry.experiment"], [14, "module-ax.telemetry.generation_strategy"], [14, "module-ax.telemetry.scheduler"], [15, "module-ax.utils"], [15, "module-ax.utils.common.base"], [15, "module-ax.utils.common.constants"], [15, "module-ax.utils.common.decorator"], [15, "module-ax.utils.common.docutils"], [15, "module-ax.utils.common.equality"], [15, "module-ax.utils.common.executils"], [15, "module-ax.utils.common.kwargs"], [15, "module-ax.utils.common.logger"], [15, "module-ax.utils.common.mock"], [15, "module-ax.utils.common.result"], [15, "module-ax.utils.common.serialization"], [15, "module-ax.utils.common.testutils"], [15, "module-ax.utils.common.timeutils"], [15, "module-ax.utils.common.typeutils"], [15, "module-ax.utils.common.typeutils_torch"], [15, "module-ax.utils.flake8_plugins.docstring_checker"], [15, "module-ax.utils.measurement.synthetic_functions"], [15, "module-ax.utils.notebook.plotting"], [15, "module-ax.utils.report.render"], [15, "module-ax.utils.sensitivity.derivative_gp"], [15, "module-ax.utils.sensitivity.derivative_measures"], [15, "module-ax.utils.sensitivity.sobol_measures"], [15, "module-ax.utils.stats.model_fit_stats"], [15, "module-ax.utils.stats.statstools"], [15, "module-ax.utils.testing.backend_scheduler"], [15, "module-ax.utils.testing.backend_simulator"], [15, "module-ax.utils.testing.benchmark_stubs"], [15, "module-ax.utils.testing.core_stubs"], [15, "module-ax.utils.testing.metrics.backend_simulator_map"], [15, "module-ax.utils.testing.metrics.branin_backend_map"], [15, "module-ax.utils.testing.mock"], [15, "module-ax.utils.testing.modeling_stubs"], [15, "module-ax.utils.testing.test_init_files"], [15, "module-ax.utils.testing.torch_stubs"], [15, "module-ax.utils.testing.utils"], [15, "module-ax.utils.tutorials.cnn_utils"]], "name (ax.benchmark.benchmark_method.benchmarkmethod attribute)": [[1, "ax.benchmark.benchmark_method.BenchmarkMethod.name"]], "name (ax.benchmark.benchmark_problem.benchmarkproblembase attribute)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemBase.name"]], "name (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.name"]], "name (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.BenchmarkResult.name"]], "num_trials (ax.benchmark.benchmark_problem.benchmarkproblembase attribute)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemBase.num_trials"]], "optimal_value (ax.benchmark.benchmark_problem.benchmarkproblemwithknownoptimum attribute)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemWithKnownOptimum.optimal_value"]], "optimal_value (ax.benchmark.benchmark_problem.multiobjectivebenchmarkproblem property)": [[1, "ax.benchmark.benchmark_problem.MultiObjectiveBenchmarkProblem.optimal_value"]], "optimal_value (ax.benchmark.problems.surrogate.moosurrogatebenchmarkproblem property)": [[1, "ax.benchmark.problems.surrogate.MOOSurrogateBenchmarkProblem.optimal_value"]], "optimization_config (ax.benchmark.benchmark_problem.benchmarkproblembase attribute)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemBase.optimization_config"]], "optimization_config (ax.benchmark.problems.surrogate.moosurrogatebenchmarkproblem attribute)": [[1, "ax.benchmark.problems.surrogate.MOOSurrogateBenchmarkProblem.optimization_config"]], "optimization_trace (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.optimization_trace"]], "optimization_trace (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.BenchmarkResult.optimization_trace"]], "poll_trial_status() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnrunner method)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.poll_trial_status"]], "poll_trial_status() (ax.benchmark.problems.surrogate.surrogaterunner method)": [[1, "ax.benchmark.problems.surrogate.SurrogateRunner.poll_trial_status"]], "results (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.results"]], "run() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnrunner method)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.run"]], "run() (ax.benchmark.problems.surrogate.surrogaterunner method)": [[1, "ax.benchmark.problems.surrogate.SurrogateRunner.run"]], "runner (ax.benchmark.benchmark_problem.benchmarkproblem property)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblem.runner"]], "runner (ax.benchmark.benchmark_problem.benchmarkproblembase property)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemBase.runner"]], "runner (ax.benchmark.problems.surrogate.surrogatebenchmarkproblembase property)": [[1, "ax.benchmark.problems.surrogate.SurrogateBenchmarkProblemBase.runner"]], "scheduler_options (ax.benchmark.benchmark_method.benchmarkmethod attribute)": [[1, "ax.benchmark.benchmark_method.BenchmarkMethod.scheduler_options"]], "score_trace (ax.benchmark.benchmark_result.aggregatedbenchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.AggregatedBenchmarkResult.score_trace"]], "score_trace (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.BenchmarkResult.score_trace"]], "search_space (ax.benchmark.benchmark_problem.benchmarkproblembase attribute)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemBase.search_space"]], "seed (ax.benchmark.benchmark_result.benchmarkresult attribute)": [[1, "ax.benchmark.benchmark_result.BenchmarkResult.seed"]], "serialize_init_args() (ax.benchmark.problems.hpo.torchvision.pytorchcnntorchvisionrunner class method)": [[1, "ax.benchmark.problems.hpo.torchvision.PyTorchCNNTorchvisionRunner.serialize_init_args"]], "serialize_init_args() (ax.benchmark.problems.surrogate.surrogaterunner class method)": [[1, "ax.benchmark.problems.surrogate.SurrogateRunner.serialize_init_args"]], "set_runner() (ax.benchmark.problems.surrogate.surrogatebenchmarkproblembase method)": [[1, "ax.benchmark.problems.surrogate.SurrogateBenchmarkProblemBase.set_runner"]], "tracking_metrics (ax.benchmark.benchmark_problem.benchmarkproblembase attribute)": [[1, "ax.benchmark.benchmark_problem.BenchmarkProblemBase.tracking_metrics"]], "train_and_evaluate() (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnrunner method)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.train_and_evaluate"]], "training (ax.benchmark.problems.hpo.pytorch_cnn.pytorchcnnrunner.cnn attribute)": [[1, "ax.benchmark.problems.hpo.pytorch_cnn.PyTorchCNNRunner.CNN.training"]], "abandoned (ax.core.base_trial.trialstatus attribute)": [[2, "ax.core.base_trial.TrialStatus.ABANDONED"]], "abandonedarm (class in ax.core.batch_trial)": [[2, "ax.core.batch_trial.AbandonedArm"]], "arm (class in ax.core.arm)": [[2, "ax.core.arm.Arm"]], "armweight (class in ax.core.generator_run)": [[2, "ax.core.generator_run.ArmWeight"]], "bakeoff (ax.core.batch_trial.lifecyclestage attribute)": [[2, "ax.core.batch_trial.LifecycleStage.BAKEOFF"]], "bool (ax.core.parameter.parametertype attribute)": [[2, "ax.core.parameter.ParameterType.BOOL"]], "basetrial (class in ax.core.base_trial)": [[2, "ax.core.base_trial.BaseTrial"]], "batchtrial (class in ax.core.batch_trial)": [[2, "ax.core.batch_trial.BatchTrial"]], "candidate (ax.core.base_trial.trialstatus attribute)": [[2, "ax.core.base_trial.TrialStatus.CANDIDATE"]], "completed (ax.core.base_trial.trialstatus attribute)": [[2, "ax.core.base_trial.TrialStatus.COMPLETED"]], "choiceparameter (class in ax.core.parameter)": [[2, "ax.core.parameter.ChoiceParameter"]], "comparisonop (class in ax.core.types)": [[2, "ax.core.types.ComparisonOp"]], "data (ax.core.formatting_utils.datatype attribute)": [[2, "ax.core.formatting_utils.DataType.DATA"]], "dispatched (ax.core.base_trial.trialstatus attribute)": [[2, "ax.core.base_trial.TrialStatus.DISPATCHED"]], "datatype (class in ax.core.formatting_utils)": [[2, "ax.core.formatting_utils.DataType"]], "early_stopped (ax.core.base_trial.trialstatus attribute)": [[2, "ax.core.base_trial.TrialStatus.EARLY_STOPPED"]], "exploration (ax.core.batch_trial.lifecyclestage attribute)": [[2, "ax.core.batch_trial.LifecycleStage.EXPLORATION"]], "exploration_concurrent (ax.core.batch_trial.lifecyclestage attribute)": [[2, "ax.core.batch_trial.LifecycleStage.EXPLORATION_CONCURRENT"]], "experiment (class in ax.core.experiment)": [[2, "ax.core.experiment.Experiment"]], "failed (ax.core.base_trial.trialstatus attribute)": [[2, "ax.core.base_trial.TrialStatus.FAILED"]], "float (ax.core.parameter.parametertype attribute)": [[2, "ax.core.parameter.ParameterType.FLOAT"]], "fixedparameter (class in ax.core.parameter)": [[2, "ax.core.parameter.FixedParameter"]], "geq (ax.core.types.comparisonop attribute)": [[2, "ax.core.types.ComparisonOp.GEQ"]], "generationstrategyinterface (class in ax.core.generation_strategy_interface)": [[2, "ax.core.generation_strategy_interface.GenerationStrategyInterface"]], "generatorrun (class in ax.core.generator_run)": [[2, "ax.core.generator_run.GeneratorRun"]], "generatorrunstruct (class in ax.core.batch_trial)": [[2, "ax.core.batch_trial.GeneratorRunStruct"]], "generatorruntype (class in ax.core.generator_run)": [[2, "ax.core.generator_run.GeneratorRunType"]], "int (ax.core.parameter.parametertype attribute)": [[2, "ax.core.parameter.ParameterType.INT"]], "iteration (ax.core.batch_trial.lifecyclestage attribute)": [[2, "ax.core.batch_trial.LifecycleStage.ITERATION"]], "leq (ax.core.types.comparisonop attribute)": [[2, "ax.core.types.ComparisonOp.LEQ"]], "lifecyclestage (class in ax.core.batch_trial)": [[2, "ax.core.batch_trial.LifecycleStage"]], "manual (ax.core.generator_run.generatorruntype attribute)": [[2, "ax.core.generator_run.GeneratorRunType.MANUAL"]], "map_data (ax.core.formatting_utils.datatype attribute)": [[2, "ax.core.formatting_utils.DataType.MAP_DATA"]], "missingmetrics (class in ax.core.utils)": [[2, "ax.core.utils.MissingMetrics"]], "multiobjectiveoptimizationconfig (class in ax.core.optimization_config)": [[2, "ax.core.optimization_config.MultiObjectiveOptimizationConfig"]], "multitypeexperiment (class in ax.core.multi_type_experiment)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment"]], "offline_optimized (ax.core.batch_trial.lifecyclestage attribute)": [[2, "ax.core.batch_trial.LifecycleStage.OFFLINE_OPTIMIZED"]], "observation (class in ax.core.observation)": [[2, "ax.core.observation.Observation"]], "observationdata (class in ax.core.observation)": [[2, "ax.core.observation.ObservationData"]], "observationfeatures (class in ax.core.observation)": [[2, "ax.core.observation.ObservationFeatures"]], "optimizationconfig (class in ax.core.optimization_config)": [[2, "ax.core.optimization_config.OptimizationConfig"]], "orderconstraint (class in ax.core.parameter_constraint)": [[2, "ax.core.parameter_constraint.OrderConstraint"]], "parameter (class in ax.core.parameter)": [[2, "ax.core.parameter.Parameter"]], "parameterconstraint (class in ax.core.parameter_constraint)": [[2, "ax.core.parameter_constraint.ParameterConstraint"]], "parameterdistribution (class in ax.core.parameter_distribution)": [[2, "ax.core.parameter_distribution.ParameterDistribution"]], "parametertype (class in ax.core.parameter)": [[2, "ax.core.parameter.ParameterType"]], "running (ax.core.base_trial.trialstatus attribute)": [[2, "ax.core.base_trial.TrialStatus.RUNNING"]], "rangeparameter (class in ax.core.parameter)": [[2, "ax.core.parameter.RangeParameter"]], "riskmeasure (class in ax.core.risk_measures)": [[2, "ax.core.risk_measures.RiskMeasure"]], "runner (class in ax.core.runner)": [[2, "ax.core.runner.Runner"]], "staged (ax.core.base_trial.trialstatus attribute)": [[2, "ax.core.base_trial.TrialStatus.STAGED"]], "status_quo (ax.core.generator_run.generatorruntype attribute)": [[2, "ax.core.generator_run.GeneratorRunType.STATUS_QUO"]], "string (ax.core.parameter.parametertype attribute)": [[2, "ax.core.parameter.ParameterType.STRING"]], "sumconstraint (class in ax.core.parameter_constraint)": [[2, "ax.core.parameter_constraint.SumConstraint"]], "trial (class in ax.core.trial)": [[2, "ax.core.trial.Trial"]], "trialstatus (class in ax.core.base_trial)": [[2, "ax.core.base_trial.TrialStatus"]], "abandoned_arm_names (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.abandoned_arm_names"]], "abandoned_arms (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.abandoned_arms"]], "abandoned_arms (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.abandoned_arms"]], "abandoned_arms (ax.core.trial.trial property)": [[2, "ax.core.trial.Trial.abandoned_arms"]], "abandoned_arms_metadata (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.abandoned_arms_metadata"]], "abandoned_reason (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.abandoned_reason"]], "add_arm() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.add_arm"]], "add_arm() (ax.core.trial.trial method)": [[2, "ax.core.trial.Trial.add_arm"]], "add_arm_and_prevent_naming_collision() (in module ax.core.experiment)": [[2, "ax.core.experiment.add_arm_and_prevent_naming_collision"]], "add_arms_and_weights() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.add_arms_and_weights"]], "add_generator_run() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.add_generator_run"]], "add_generator_run() (ax.core.trial.trial method)": [[2, "ax.core.trial.Trial.add_generator_run"]], "add_tracking_metric() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.add_tracking_metric"]], "add_tracking_metric() (ax.core.multi_type_experiment.multitypeexperiment method)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.add_tracking_metric"]], "add_tracking_metrics() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.add_tracking_metrics"]], "add_trial_type() (ax.core.multi_type_experiment.multitypeexperiment method)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.add_trial_type"]], "add_values() (ax.core.parameter.choiceparameter method)": [[2, "ax.core.parameter.ChoiceParameter.add_values"]], "all_constraints (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[2, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.all_constraints"]], "all_constraints (ax.core.optimization_config.optimizationconfig property)": [[2, "ax.core.optimization_config.OptimizationConfig.all_constraints"]], "arm (ax.core.generator_run.armweight attribute)": [[2, "ax.core.generator_run.ArmWeight.arm"]], "arm (ax.core.trial.trial property)": [[2, "ax.core.trial.Trial.arm"]], "arm_name (ax.core.observation.observation attribute)": [[2, "ax.core.observation.Observation.arm_name"]], "arm_signatures (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.arm_signatures"]], "arm_weights (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.arm_weights"]], "arm_weights (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.arm_weights"]], "arms (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.arms"]], "arms (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.arms"]], "arms (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.arms"]], "arms (ax.core.trial.trial property)": [[2, "ax.core.trial.Trial.arms"]], "arms_by_name (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.arms_by_name"]], "arms_by_name (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.arms_by_name"]], "arms_by_name (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.arms_by_name"]], "arms_by_name (ax.core.trial.trial property)": [[2, "ax.core.trial.Trial.arms_by_name"]], "arms_by_signature (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.arms_by_signature"]], "assign_runner() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.assign_runner"]], "attach_batch_trial_data() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.attach_batch_trial_data"]], "attach_data() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.attach_data"]], "attach_fetch_results() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.attach_fetch_results"]], "attach_trial() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.attach_trial"]], "available_flags (ax.core.parameter.choiceparameter property)": [[2, "ax.core.parameter.ChoiceParameter.available_flags"]], "available_flags (ax.core.parameter.fixedparameter property)": [[2, "ax.core.parameter.FixedParameter.available_flags"]], "available_flags (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.available_flags"]], "available_flags (ax.core.parameter.rangeparameter property)": [[2, "ax.core.parameter.RangeParameter.available_flags"]], "ax.core": [[2, "module-ax.core"]], "ax.core.arm": [[2, "module-ax.core.arm"]], "ax.core.base_trial": [[2, "module-ax.core.base_trial"]], "ax.core.batch_trial": [[2, "module-ax.core.batch_trial"]], "ax.core.experiment": [[2, "module-ax.core.experiment"]], "ax.core.formatting_utils": [[2, "module-ax.core.formatting_utils"]], "ax.core.generation_strategy_interface": [[2, "module-ax.core.generation_strategy_interface"]], "ax.core.generator_run": [[2, "module-ax.core.generator_run"]], "ax.core.multi_type_experiment": [[2, "module-ax.core.multi_type_experiment"]], "ax.core.observation": [[2, "module-ax.core.observation"]], "ax.core.optimization_config": [[2, "module-ax.core.optimization_config"]], "ax.core.parameter": [[2, "module-ax.core.parameter"]], "ax.core.parameter_constraint": [[2, "module-ax.core.parameter_constraint"]], "ax.core.parameter_distribution": [[2, "module-ax.core.parameter_distribution"]], "ax.core.risk_measures": [[2, "module-ax.core.risk_measures"]], "ax.core.runner": [[2, "module-ax.core.runner"]], "ax.core.trial": [[2, "module-ax.core.trial"]], "ax.core.types": [[2, "module-ax.core.types"]], "ax.core.utils": [[2, "module-ax.core.utils"]], "best_arm_predictions (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.best_arm_predictions"]], "best_feasible_objective() (in module ax.core.utils)": [[2, "ax.core.utils.best_feasible_objective"]], "bound (ax.core.parameter_constraint.parameterconstraint property)": [[2, "ax.core.parameter_constraint.ParameterConstraint.bound"]], "candidate_metadata_by_arm_signature (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.candidate_metadata_by_arm_signature"]], "cardinality() (ax.core.parameter.choiceparameter method)": [[2, "ax.core.parameter.ChoiceParameter.cardinality"]], "cardinality() (ax.core.parameter.fixedparameter method)": [[2, "ax.core.parameter.FixedParameter.cardinality"]], "cardinality() (ax.core.parameter.parameter method)": [[2, "ax.core.parameter.Parameter.cardinality"]], "cardinality() (ax.core.parameter.rangeparameter method)": [[2, "ax.core.parameter.RangeParameter.cardinality"]], "cast() (ax.core.parameter.parameter method)": [[2, "ax.core.parameter.Parameter.cast"]], "cast() (ax.core.parameter.rangeparameter method)": [[2, "ax.core.parameter.RangeParameter.cast"]], "check() (ax.core.parameter_constraint.parameterconstraint method)": [[2, "ax.core.parameter_constraint.ParameterConstraint.check"]], "check_objective_thresholds_match_objectives() (in module ax.core.optimization_config)": [[2, "ax.core.optimization_config.check_objective_thresholds_match_objectives"]], "clone() (ax.core.arm.arm method)": [[2, "ax.core.arm.Arm.clone"]], "clone() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.clone"]], "clone() (ax.core.generator_run.generatorrun method)": [[2, "ax.core.generator_run.GeneratorRun.clone"]], "clone() (ax.core.observation.observationfeatures method)": [[2, "ax.core.observation.ObservationFeatures.clone"]], "clone() (ax.core.optimization_config.optimizationconfig method)": [[2, "ax.core.optimization_config.OptimizationConfig.clone"]], "clone() (ax.core.parameter.choiceparameter method)": [[2, "ax.core.parameter.ChoiceParameter.clone"]], "clone() (ax.core.parameter.fixedparameter method)": [[2, "ax.core.parameter.FixedParameter.clone"]], "clone() (ax.core.parameter.parameter method)": [[2, "ax.core.parameter.Parameter.clone"]], "clone() (ax.core.parameter.rangeparameter method)": [[2, "ax.core.parameter.RangeParameter.clone"]], "clone() (ax.core.parameter_constraint.orderconstraint method)": [[2, "ax.core.parameter_constraint.OrderConstraint.clone"]], "clone() (ax.core.parameter_constraint.parameterconstraint method)": [[2, "ax.core.parameter_constraint.ParameterConstraint.clone"]], "clone() (ax.core.parameter_constraint.sumconstraint method)": [[2, "ax.core.parameter_constraint.SumConstraint.clone"]], "clone() (ax.core.parameter_distribution.parameterdistribution method)": [[2, "ax.core.parameter_distribution.ParameterDistribution.clone"]], "clone() (ax.core.risk_measures.riskmeasure method)": [[2, "ax.core.risk_measures.RiskMeasure.clone"]], "clone() (ax.core.runner.runner method)": [[2, "ax.core.runner.Runner.clone"]], "clone_to() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.clone_to"]], "clone_to() (ax.core.trial.trial method)": [[2, "ax.core.trial.Trial.clone_to"]], "clone_with() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.clone_with"]], "clone_with_args() (ax.core.optimization_config.multiobjectiveoptimizationconfig method)": [[2, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.clone_with_args"]], "clone_with_args() (ax.core.optimization_config.optimizationconfig method)": [[2, "ax.core.optimization_config.OptimizationConfig.clone_with_args"]], "clone_with_transformed_parameters() (ax.core.parameter_constraint.orderconstraint method)": [[2, "ax.core.parameter_constraint.OrderConstraint.clone_with_transformed_parameters"]], "clone_with_transformed_parameters() (ax.core.parameter_constraint.parameterconstraint method)": [[2, "ax.core.parameter_constraint.ParameterConstraint.clone_with_transformed_parameters"]], "clone_with_transformed_parameters() (ax.core.parameter_constraint.sumconstraint method)": [[2, "ax.core.parameter_constraint.SumConstraint.clone_with_transformed_parameters"]], "complete() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.complete"]], "completed_successfully (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.completed_successfully"]], "completed_trials (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.completed_trials"]], "constraint_dict (ax.core.parameter_constraint.orderconstraint property)": [[2, "ax.core.parameter_constraint.OrderConstraint.constraint_dict"]], "constraint_dict (ax.core.parameter_constraint.parameterconstraint property)": [[2, "ax.core.parameter_constraint.ParameterConstraint.constraint_dict"]], "constraint_dict (ax.core.parameter_constraint.sumconstraint property)": [[2, "ax.core.parameter_constraint.SumConstraint.constraint_dict"]], "covariance (ax.core.observation.observationdata attribute)": [[2, "ax.core.observation.ObservationData.covariance"]], "covariance_matrix (ax.core.observation.observationdata property)": [[2, "ax.core.observation.ObservationData.covariance_matrix"]], "data (ax.core.observation.observation attribute)": [[2, "ax.core.observation.Observation.data"]], "data_and_evaluations_from_raw_data() (in module ax.core.formatting_utils)": [[2, "ax.core.formatting_utils.data_and_evaluations_from_raw_data"]], "data_by_trial (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.data_by_trial"]], "default_data_constructor (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.default_data_constructor"]], "default_data_type (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.default_data_type"]], "default_trial_type (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.default_trial_type"]], "default_trial_type (ax.core.multi_type_experiment.multitypeexperiment property)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.default_trial_type"]], "default_trials (ax.core.multi_type_experiment.multitypeexperiment property)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.default_trials"]], "dependents (ax.core.parameter.choiceparameter property)": [[2, "ax.core.parameter.ChoiceParameter.dependents"]], "dependents (ax.core.parameter.fixedparameter property)": [[2, "ax.core.parameter.FixedParameter.dependents"]], "dependents (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.dependents"]], "deployed_name (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.deployed_name"]], "description (ax.core.multi_type_experiment.multitypeexperiment attribute)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.description"]], "did_not_complete (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.did_not_complete"]], "digits (ax.core.parameter.rangeparameter property)": [[2, "ax.core.parameter.RangeParameter.digits"]], "distribution (ax.core.parameter_distribution.parameterdistribution property)": [[2, "ax.core.parameter_distribution.ParameterDistribution.distribution"]], "distribution_class (ax.core.parameter_distribution.parameterdistribution property)": [[2, "ax.core.parameter_distribution.ParameterDistribution.distribution_class"]], "distribution_parameters (ax.core.parameter_distribution.parameterdistribution property)": [[2, "ax.core.parameter_distribution.ParameterDistribution.distribution_parameters"]], "domain_repr (ax.core.parameter.choiceparameter property)": [[2, "ax.core.parameter.ChoiceParameter.domain_repr"]], "domain_repr (ax.core.parameter.fixedparameter property)": [[2, "ax.core.parameter.FixedParameter.domain_repr"]], "domain_repr (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.domain_repr"]], "domain_repr (ax.core.parameter.rangeparameter property)": [[2, "ax.core.parameter.RangeParameter.domain_repr"]], "end_time (ax.core.observation.observationfeatures attribute)": [[2, "ax.core.observation.ObservationFeatures.end_time"]], "expecting_data (ax.core.base_trial.trialstatus property)": [[2, "ax.core.base_trial.TrialStatus.expecting_data"]], "experiment (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.experiment"]], "experiment (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.experiment"]], "experiment (ax.core.generation_strategy_interface.generationstrategyinterface property)": [[2, "ax.core.generation_strategy_interface.GenerationStrategyInterface.experiment"]], "experiment_type (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.experiment_type"]], "extend_pending_observations() (in module ax.core.utils)": [[2, "ax.core.utils.extend_pending_observations"]], "extract_arm_predictions() (in module ax.core.generator_run)": [[2, "ax.core.generator_run.extract_arm_predictions"]], "extract_pending_observations() (in module ax.core.utils)": [[2, "ax.core.utils.extract_pending_observations"]], "failed_reason (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.failed_reason"]], "features (ax.core.observation.observation attribute)": [[2, "ax.core.observation.Observation.features"]], "fetch_data() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.fetch_data"]], "fetch_data() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.fetch_data"]], "fetch_data() (ax.core.multi_type_experiment.multitypeexperiment method)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.fetch_data"]], "fetch_data_results() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.fetch_data_results"]], "fetch_data_results() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.fetch_data_results"]], "fetch_trials_data() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.fetch_trials_data"]], "fetch_trials_data_results() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.fetch_trials_data_results"]], "fit_time (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.fit_time"]], "from_arm() (ax.core.observation.observationfeatures static method)": [[2, "ax.core.observation.ObservationFeatures.from_arm"]], "gen_for_multiple_trials_with_multiple_models() (ax.core.generation_strategy_interface.generationstrategyinterface method)": [[2, "ax.core.generation_strategy_interface.GenerationStrategyInterface.gen_for_multiple_trials_with_multiple_models"]], "gen_metadata (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.gen_metadata"]], "gen_time (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.gen_time"]], "generator_run (ax.core.batch_trial.generatorrunstruct attribute)": [[2, "ax.core.batch_trial.GeneratorRunStruct.generator_run"]], "generator_run (ax.core.trial.trial property)": [[2, "ax.core.trial.Trial.generator_run"]], "generator_run_structs (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.generator_run_structs"]], "generator_run_type (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.generator_run_type"]], "generator_runs (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.generator_runs"]], "generator_runs (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.generator_runs"]], "generator_runs (ax.core.trial.trial property)": [[2, "ax.core.trial.Trial.generator_runs"]], "get_feature_cols() (in module ax.core.observation)": [[2, "ax.core.observation.get_feature_cols"]], "get_feature_cols_from_map_data() (in module ax.core.observation)": [[2, "ax.core.observation.get_feature_cols_from_map_data"]], "get_metric_mean() (ax.core.trial.trial method)": [[2, "ax.core.trial.Trial.get_metric_mean"]], "get_missing_metrics() (in module ax.core.utils)": [[2, "ax.core.utils.get_missing_metrics"]], "get_missing_metrics_by_name() (in module ax.core.utils)": [[2, "ax.core.utils.get_missing_metrics_by_name"]], "get_model_times() (in module ax.core.utils)": [[2, "ax.core.utils.get_model_times"]], "get_model_trace_of_times() (in module ax.core.utils)": [[2, "ax.core.utils.get_model_trace_of_times"]], "get_pending_observation_features() (in module ax.core.utils)": [[2, "ax.core.utils.get_pending_observation_features"]], "get_pending_observation_features_based_on_trial_status() (in module ax.core.utils)": [[2, "ax.core.utils.get_pending_observation_features_based_on_trial_status"]], "get_trials_by_indices() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.get_trials_by_indices"]], "has_name (ax.core.arm.arm property)": [[2, "ax.core.arm.Arm.has_name"]], "has_name (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.has_name"]], "immutable_once_run() (in module ax.core.base_trial)": [[2, "ax.core.base_trial.immutable_once_run"]], "immutable_search_space_and_opt_config (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.immutable_search_space_and_opt_config"]], "in_design_arms (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.in_design_arms"]], "index (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.index"]], "index (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.index"]], "index (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.index"]], "is_abandoned (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.is_abandoned"]], "is_abandoned (ax.core.base_trial.trialstatus property)": [[2, "ax.core.base_trial.TrialStatus.is_abandoned"]], "is_candidate (ax.core.base_trial.trialstatus property)": [[2, "ax.core.base_trial.TrialStatus.is_candidate"]], "is_completed (ax.core.base_trial.trialstatus property)": [[2, "ax.core.base_trial.TrialStatus.is_completed"]], "is_deployed (ax.core.base_trial.trialstatus property)": [[2, "ax.core.base_trial.TrialStatus.is_deployed"]], "is_early_stopped (ax.core.base_trial.trialstatus property)": [[2, "ax.core.base_trial.TrialStatus.is_early_stopped"]], "is_environmental() (ax.core.parameter_distribution.parameterdistribution method)": [[2, "ax.core.parameter_distribution.ParameterDistribution.is_environmental"]], "is_factorial (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.is_factorial"]], "is_failed (ax.core.base_trial.trialstatus property)": [[2, "ax.core.base_trial.TrialStatus.is_failed"]], "is_fidelity (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.is_fidelity"]], "is_hierarchical (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.is_hierarchical"]], "is_moo_problem (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.is_moo_problem"]], "is_moo_problem (ax.core.optimization_config.optimizationconfig property)": [[2, "ax.core.optimization_config.OptimizationConfig.is_moo_problem"]], "is_numeric (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.is_numeric"]], "is_numeric (ax.core.parameter.parametertype property)": [[2, "ax.core.parameter.ParameterType.is_numeric"]], "is_ordered (ax.core.parameter.choiceparameter property)": [[2, "ax.core.parameter.ChoiceParameter.is_ordered"]], "is_running (ax.core.base_trial.trialstatus property)": [[2, "ax.core.base_trial.TrialStatus.is_running"]], "is_task (ax.core.parameter.choiceparameter property)": [[2, "ax.core.parameter.ChoiceParameter.is_task"]], "is_terminal (ax.core.base_trial.trialstatus property)": [[2, "ax.core.base_trial.TrialStatus.is_terminal"]], "is_test (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.is_test"]], "is_upper_bound (ax.core.parameter_constraint.sumconstraint property)": [[2, "ax.core.parameter_constraint.SumConstraint.is_upper_bound"]], "is_valid_type() (ax.core.parameter.parameter method)": [[2, "ax.core.parameter.Parameter.is_valid_type"]], "is_valid_type() (ax.core.parameter.rangeparameter method)": [[2, "ax.core.parameter.RangeParameter.is_valid_type"]], "last_generator_run (ax.core.generation_strategy_interface.generationstrategyinterface property)": [[2, "ax.core.generation_strategy_interface.GenerationStrategyInterface.last_generator_run"]], "lifecycle_stage (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.lifecycle_stage"]], "log_scale (ax.core.parameter.rangeparameter property)": [[2, "ax.core.parameter.RangeParameter.log_scale"]], "logit_scale (ax.core.parameter.rangeparameter property)": [[2, "ax.core.parameter.RangeParameter.logit_scale"]], "lookup_data() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.lookup_data"]], "lookup_data() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.lookup_data"]], "lookup_data_for_trial() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.lookup_data_for_trial"]], "lookup_data_for_ts() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.lookup_data_for_ts"]], "lower (ax.core.parameter.rangeparameter property)": [[2, "ax.core.parameter.RangeParameter.lower"]], "lower_parameter (ax.core.parameter_constraint.orderconstraint property)": [[2, "ax.core.parameter_constraint.OrderConstraint.lower_parameter"]], "mark_abandoned() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.mark_abandoned"]], "mark_arm_abandoned() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.mark_arm_abandoned"]], "mark_arm_abandoned() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.mark_arm_abandoned"]], "mark_as() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.mark_as"]], "mark_completed() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.mark_completed"]], "mark_early_stopped() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.mark_early_stopped"]], "mark_failed() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.mark_failed"]], "mark_running() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.mark_running"]], "mark_staged() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.mark_staged"]], "md5hash() (ax.core.arm.arm static method)": [[2, "ax.core.arm.Arm.md5hash"]], "means (ax.core.observation.observationdata attribute)": [[2, "ax.core.observation.ObservationData.means"]], "means_dict (ax.core.observation.observationdata property)": [[2, "ax.core.observation.ObservationData.means_dict"]], "merge_model_predict() (in module ax.core.types)": [[2, "ax.core.types.merge_model_predict"]], "metric_config_summary_df (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.metric_config_summary_df"]], "metric_names (ax.core.observation.observationdata attribute)": [[2, "ax.core.observation.ObservationData.metric_names"]], "metric_to_trial_type (ax.core.multi_type_experiment.multitypeexperiment property)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.metric_to_trial_type"]], "metrics (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.metrics"]], "metrics (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[2, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.metrics"]], "metrics (ax.core.optimization_config.optimizationconfig property)": [[2, "ax.core.optimization_config.OptimizationConfig.metrics"]], "model_predictions (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.model_predictions"]], "model_predictions_by_arm (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.model_predictions_by_arm"]], "name (ax.core.arm.arm property)": [[2, "ax.core.arm.Arm.name"]], "name (ax.core.batch_trial.abandonedarm attribute)": [[2, "ax.core.batch_trial.AbandonedArm.name"]], "name (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.name"]], "name (ax.core.generation_strategy_interface.generationstrategyinterface property)": [[2, "ax.core.generation_strategy_interface.GenerationStrategyInterface.name"]], "name (ax.core.multi_type_experiment.multitypeexperiment attribute)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.name"]], "name (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.name"]], "name_or_short_signature (ax.core.arm.arm property)": [[2, "ax.core.arm.Arm.name_or_short_signature"]], "new_batch_trial() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.new_batch_trial"]], "new_trial() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.new_trial"]], "normalized_arm_weights() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.normalized_arm_weights"]], "num_abandoned_arms (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.num_abandoned_arms"]], "num_trials (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.num_trials"]], "objective (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[2, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.objective"]], "objective (ax.core.optimization_config.optimizationconfig property)": [[2, "ax.core.optimization_config.OptimizationConfig.objective"]], "objective (ax.core.utils.missingmetrics attribute)": [[2, "ax.core.utils.MissingMetrics.objective"]], "objective_mean (ax.core.trial.trial property)": [[2, "ax.core.trial.Trial.objective_mean"]], "objective_thresholds (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[2, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.objective_thresholds"]], "objective_thresholds_dict (ax.core.optimization_config.multiobjectiveoptimizationconfig property)": [[2, "ax.core.optimization_config.MultiObjectiveOptimizationConfig.objective_thresholds_dict"]], "observations_from_data() (in module ax.core.observation)": [[2, "ax.core.observation.observations_from_data"]], "observations_from_map_data() (in module ax.core.observation)": [[2, "ax.core.observation.observations_from_map_data"]], "op (ax.core.parameter_constraint.sumconstraint property)": [[2, "ax.core.parameter_constraint.SumConstraint.op"]], "optimization_config (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.optimization_config"]], "optimization_config (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.optimization_config"]], "outcome_constraints (ax.core.optimization_config.optimizationconfig property)": [[2, "ax.core.optimization_config.OptimizationConfig.outcome_constraints"]], "outcome_constraints (ax.core.utils.missingmetrics attribute)": [[2, "ax.core.utils.MissingMetrics.outcome_constraints"]], "param_df (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.param_df"]], "parameter_type (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.parameter_type"]], "parameters (ax.core.arm.arm property)": [[2, "ax.core.arm.Arm.parameters"]], "parameters (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.parameters"]], "parameters (ax.core.observation.observationfeatures attribute)": [[2, "ax.core.observation.ObservationFeatures.parameters"]], "parameters (ax.core.parameter_constraint.orderconstraint property)": [[2, "ax.core.parameter_constraint.OrderConstraint.parameters"]], "parameters (ax.core.parameter_constraint.sumconstraint property)": [[2, "ax.core.parameter_constraint.SumConstraint.parameters"]], "poll_available_capacity() (ax.core.runner.runner method)": [[2, "ax.core.runner.Runner.poll_available_capacity"]], "poll_exception() (ax.core.runner.runner method)": [[2, "ax.core.runner.Runner.poll_exception"]], "poll_trial_status() (ax.core.runner.runner method)": [[2, "ax.core.runner.Runner.poll_trial_status"]], "python_type (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.python_type"]], "random_split (ax.core.observation.observationfeatures attribute)": [[2, "ax.core.observation.ObservationFeatures.random_split"]], "raw_data_to_evaluation() (in module ax.core.formatting_utils)": [[2, "ax.core.formatting_utils.raw_data_to_evaluation"]], "reason (ax.core.batch_trial.abandonedarm attribute)": [[2, "ax.core.batch_trial.AbandonedArm.reason"]], "recombine_observations() (in module ax.core.observation)": [[2, "ax.core.observation.recombine_observations"]], "remove_tracking_metric() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.remove_tracking_metric"]], "remove_tracking_metric() (ax.core.multi_type_experiment.multitypeexperiment method)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.remove_tracking_metric"]], "reset_runners() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.reset_runners"]], "reset_runners() (ax.core.multi_type_experiment.multitypeexperiment method)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.reset_runners"]], "run() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.run"]], "run() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.run"]], "run() (ax.core.runner.runner method)": [[2, "ax.core.runner.Runner.run"]], "run_metadata (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.run_metadata"]], "run_metadata_report_keys (ax.core.runner.runner property)": [[2, "ax.core.runner.Runner.run_metadata_report_keys"]], "run_multiple() (ax.core.runner.runner method)": [[2, "ax.core.runner.Runner.run_multiple"]], "runner (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.runner"]], "runner_for_trial() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.runner_for_trial"]], "runner_for_trial() (ax.core.multi_type_experiment.multitypeexperiment method)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.runner_for_trial"]], "running_trial_indices (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.running_trial_indices"]], "search_space (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.search_space"]], "search_space (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.search_space"]], "separate_observations() (in module ax.core.observation)": [[2, "ax.core.observation.separate_observations"]], "set_digits() (ax.core.parameter.rangeparameter method)": [[2, "ax.core.parameter.RangeParameter.set_digits"]], "set_log_scale() (ax.core.parameter.rangeparameter method)": [[2, "ax.core.parameter.RangeParameter.set_log_scale"]], "set_logit_scale() (ax.core.parameter.rangeparameter method)": [[2, "ax.core.parameter.RangeParameter.set_logit_scale"]], "set_status_quo_and_optimize_power() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.set_status_quo_and_optimize_power"]], "set_status_quo_with_weight() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.set_status_quo_with_weight"]], "set_value() (ax.core.parameter.fixedparameter method)": [[2, "ax.core.parameter.FixedParameter.set_value"]], "set_values() (ax.core.parameter.choiceparameter method)": [[2, "ax.core.parameter.ChoiceParameter.set_values"]], "signature (ax.core.arm.arm property)": [[2, "ax.core.arm.Arm.signature"]], "sort_values (ax.core.parameter.choiceparameter property)": [[2, "ax.core.parameter.ChoiceParameter.sort_values"]], "staging_required (ax.core.runner.runner property)": [[2, "ax.core.runner.Runner.staging_required"]], "start_time (ax.core.observation.observationfeatures attribute)": [[2, "ax.core.observation.ObservationFeatures.start_time"]], "status (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.status"]], "status_quo (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.status_quo"]], "status_quo (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.status_quo"]], "stop() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.stop"]], "stop() (ax.core.runner.runner method)": [[2, "ax.core.runner.Runner.stop"]], "stop_metadata (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.stop_metadata"]], "sum_trial_sizes (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.sum_trial_sizes"]], "summary_dict (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.summary_dict"]], "supports_trial_type() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.supports_trial_type"]], "supports_trial_type() (ax.core.multi_type_experiment.multitypeexperiment method)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.supports_trial_type"]], "target_value (ax.core.parameter.parameter property)": [[2, "ax.core.parameter.Parameter.target_value"]], "time (ax.core.batch_trial.abandonedarm attribute)": [[2, "ax.core.batch_trial.AbandonedArm.time"]], "time_completed (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.time_completed"]], "time_created (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.time_created"]], "time_created (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.time_created"]], "time_created (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.time_created"]], "time_run_started (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.time_run_started"]], "time_staged (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.time_staged"]], "tracking_metrics (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.tracking_metrics"]], "tracking_metrics (ax.core.utils.missingmetrics attribute)": [[2, "ax.core.utils.MissingMetrics.tracking_metrics"]], "trial_index (ax.core.observation.observationfeatures attribute)": [[2, "ax.core.observation.ObservationFeatures.trial_index"]], "trial_indices_by_status (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.trial_indices_by_status"]], "trial_type (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.trial_type"]], "trials (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.trials"]], "trials_by_status (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.trials_by_status"]], "trials_expecting_data (ax.core.experiment.experiment property)": [[2, "ax.core.experiment.Experiment.trials_expecting_data"]], "ttl_seconds (ax.core.base_trial.basetrial property)": [[2, "ax.core.base_trial.BaseTrial.ttl_seconds"]], "unset_status_quo() (ax.core.batch_trial.batchtrial method)": [[2, "ax.core.batch_trial.BatchTrial.unset_status_quo"]], "update_features() (ax.core.observation.observationfeatures method)": [[2, "ax.core.observation.ObservationFeatures.update_features"]], "update_range() (ax.core.parameter.rangeparameter method)": [[2, "ax.core.parameter.RangeParameter.update_range"]], "update_run_metadata() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.update_run_metadata"]], "update_runner() (ax.core.multi_type_experiment.multitypeexperiment method)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.update_runner"]], "update_stop_metadata() (ax.core.base_trial.basetrial method)": [[2, "ax.core.base_trial.BaseTrial.update_stop_metadata"]], "update_tracking_metric() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.update_tracking_metric"]], "update_tracking_metric() (ax.core.multi_type_experiment.multitypeexperiment method)": [[2, "ax.core.multi_type_experiment.MultiTypeExperiment.update_tracking_metric"]], "update_trial_data() (ax.core.trial.trial method)": [[2, "ax.core.trial.Trial.update_trial_data"]], "upper (ax.core.parameter.rangeparameter property)": [[2, "ax.core.parameter.RangeParameter.upper"]], "upper_parameter (ax.core.parameter_constraint.orderconstraint property)": [[2, "ax.core.parameter_constraint.OrderConstraint.upper_parameter"]], "validate() (ax.core.parameter.choiceparameter method)": [[2, "ax.core.parameter.ChoiceParameter.validate"]], "validate() (ax.core.parameter.fixedparameter method)": [[2, "ax.core.parameter.FixedParameter.validate"]], "validate() (ax.core.parameter.parameter method)": [[2, "ax.core.parameter.Parameter.validate"]], "validate() (ax.core.parameter.rangeparameter method)": [[2, "ax.core.parameter.RangeParameter.validate"]], "validate_constraint_parameters() (in module ax.core.parameter_constraint)": [[2, "ax.core.parameter_constraint.validate_constraint_parameters"]], "validate_data_for_trial() (ax.core.trial.trial method)": [[2, "ax.core.trial.Trial.validate_data_for_trial"]], "validate_evaluation_outcome() (in module ax.core.types)": [[2, "ax.core.types.validate_evaluation_outcome"]], "validate_fidelity_trial_evaluation() (in module ax.core.types)": [[2, "ax.core.types.validate_fidelity_trial_evaluation"]], "validate_floatlike() (in module ax.core.types)": [[2, "ax.core.types.validate_floatlike"]], "validate_map_dict() (in module ax.core.types)": [[2, "ax.core.types.validate_map_dict"]], "validate_map_trial_evaluation() (in module ax.core.types)": [[2, "ax.core.types.validate_map_trial_evaluation"]], "validate_param_value() (in module ax.core.types)": [[2, "ax.core.types.validate_param_value"]], "validate_parameterization() (in module ax.core.types)": [[2, "ax.core.types.validate_parameterization"]], "validate_single_metric_data() (in module ax.core.types)": [[2, "ax.core.types.validate_single_metric_data"]], "validate_trial_evaluation() (in module ax.core.types)": [[2, "ax.core.types.validate_trial_evaluation"]], "validate_trials() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.validate_trials"]], "value (ax.core.parameter.fixedparameter property)": [[2, "ax.core.parameter.FixedParameter.value"]], "values (ax.core.parameter.choiceparameter property)": [[2, "ax.core.parameter.ChoiceParameter.values"]], "warm_start_from_old_experiment() (ax.core.experiment.experiment method)": [[2, "ax.core.experiment.Experiment.warm_start_from_old_experiment"]], "weight (ax.core.batch_trial.generatorrunstruct attribute)": [[2, "ax.core.batch_trial.GeneratorRunStruct.weight"]], "weight (ax.core.generator_run.armweight attribute)": [[2, "ax.core.generator_run.ArmWeight.weight"]], "weights (ax.core.batch_trial.batchtrial property)": [[2, "ax.core.batch_trial.BatchTrial.weights"]], "weights (ax.core.generator_run.generatorrun property)": [[2, "ax.core.generator_run.GeneratorRun.weights"]], "andearlystoppingstrategy (class in ax.early_stopping.strategies.logical)": [[3, "ax.early_stopping.strategies.logical.AndEarlyStoppingStrategy"]], "baseearlystoppingstrategy (class in ax.early_stopping.strategies.base)": [[3, "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy"]], "earlystoppingtrainingdata (class in ax.early_stopping.strategies.base)": [[3, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData"]], "logicalearlystoppingstrategy (class in ax.early_stopping.strategies.logical)": [[3, "ax.early_stopping.strategies.logical.LogicalEarlyStoppingStrategy"]], "modelbasedearlystoppingstrategy (class in ax.early_stopping.strategies.base)": [[3, "ax.early_stopping.strategies.base.ModelBasedEarlyStoppingStrategy"]], "orearlystoppingstrategy (class in ax.early_stopping.strategies.logical)": [[3, "ax.early_stopping.strategies.logical.OrEarlyStoppingStrategy"]], "percentileearlystoppingstrategy (class in ax.early_stopping.strategies.percentile)": [[3, "ax.early_stopping.strategies.percentile.PercentileEarlyStoppingStrategy"]], "thresholdearlystoppingstrategy (class in ax.early_stopping.strategies.threshold)": [[3, "ax.early_stopping.strategies.threshold.ThresholdEarlyStoppingStrategy"]], "x (ax.early_stopping.strategies.base.earlystoppingtrainingdata attribute)": [[3, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData.X"]], "y (ax.early_stopping.strategies.base.earlystoppingtrainingdata attribute)": [[3, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData.Y"]], "yvar (ax.early_stopping.strategies.base.earlystoppingtrainingdata attribute)": [[3, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData.Yvar"]], "align_partial_results() (in module ax.early_stopping.utils)": [[3, "ax.early_stopping.utils.align_partial_results"]], "arm_names (ax.early_stopping.strategies.base.earlystoppingtrainingdata attribute)": [[3, "ax.early_stopping.strategies.base.EarlyStoppingTrainingData.arm_names"]], "ax.early_stopping": [[3, "module-ax.early_stopping"]], "ax.early_stopping.strategies.base": [[3, "module-ax.early_stopping.strategies.base"]], "ax.early_stopping.strategies.logical": [[3, "module-ax.early_stopping.strategies.logical"]], "ax.early_stopping.strategies.percentile": [[3, "module-ax.early_stopping.strategies.percentile"]], "ax.early_stopping.strategies.threshold": [[3, "module-ax.early_stopping.strategies.threshold"]], "ax.early_stopping.utils": [[3, "module-ax.early_stopping.utils"]], "estimate_early_stopping_savings() (in module ax.early_stopping.utils)": [[3, "ax.early_stopping.utils.estimate_early_stopping_savings"]], "from_early_stopping_strategies() (ax.early_stopping.strategies.logical.orearlystoppingstrategy class method)": [[3, "ax.early_stopping.strategies.logical.OrEarlyStoppingStrategy.from_early_stopping_strategies"]], "get_training_data() (ax.early_stopping.strategies.base.modelbasedearlystoppingstrategy method)": [[3, "ax.early_stopping.strategies.base.ModelBasedEarlyStoppingStrategy.get_training_data"]], "get_transform_helper_model() (in module ax.early_stopping.strategies.base)": [[3, "ax.early_stopping.strategies.base.get_transform_helper_model"]], "is_eligible() (ax.early_stopping.strategies.base.baseearlystoppingstrategy method)": [[3, "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy.is_eligible"]], "is_eligible_any() (ax.early_stopping.strategies.base.baseearlystoppingstrategy method)": [[3, "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy.is_eligible_any"]], "should_stop_trials_early() (ax.early_stopping.strategies.base.baseearlystoppingstrategy method)": [[3, "ax.early_stopping.strategies.base.BaseEarlyStoppingStrategy.should_stop_trials_early"]], "should_stop_trials_early() (ax.early_stopping.strategies.logical.andearlystoppingstrategy method)": [[3, "ax.early_stopping.strategies.logical.AndEarlyStoppingStrategy.should_stop_trials_early"]], "should_stop_trials_early() (ax.early_stopping.strategies.logical.orearlystoppingstrategy method)": [[3, "ax.early_stopping.strategies.logical.OrEarlyStoppingStrategy.should_stop_trials_early"]], "should_stop_trials_early() (ax.early_stopping.strategies.percentile.percentileearlystoppingstrategy method)": [[3, "ax.early_stopping.strategies.percentile.PercentileEarlyStoppingStrategy.should_stop_trials_early"]], "should_stop_trials_early() (ax.early_stopping.strategies.threshold.thresholdearlystoppingstrategy method)": [[3, "ax.early_stopping.strategies.threshold.ThresholdEarlyStoppingStrategy.should_stop_trials_early"]], "axerror": [[4, "ax.exceptions.core.AxError"]], "axstoragewarning": [[4, "ax.exceptions.core.AxStorageWarning"]], "axwarning": [[4, "ax.exceptions.core.AxWarning"]], "cvnotsupportederror": [[4, "ax.exceptions.model.CVNotSupportedError"]], "dataprovidererror": [[4, "ax.exceptions.data_provider.DataProviderError"]], "datarequirederror": [[4, "ax.exceptions.core.DataRequiredError"]], "experimentnotfounderror": [[4, "ax.exceptions.core.ExperimentNotFoundError"]], "experimentnotreadyerror": [[4, "ax.exceptions.core.ExperimentNotReadyError"]], "generationstrategycompleted": [[4, "ax.exceptions.generation_strategy.GenerationStrategyCompleted"]], "generationstrategymisconfiguredexception": [[4, "ax.exceptions.generation_strategy.GenerationStrategyMisconfiguredException"]], "generationstrategyrepeatedpoints": [[4, "ax.exceptions.generation_strategy.GenerationStrategyRepeatedPoints"]], "immutabilityerror": [[4, "ax.exceptions.storage.ImmutabilityError"]], "incompatibledependencyversion": [[4, "ax.exceptions.core.IncompatibleDependencyVersion"]], "incorrectdbconfigurationerror": [[4, "ax.exceptions.storage.IncorrectDBConfigurationError"]], "jsondecodeerror": [[4, "ax.exceptions.storage.JSONDecodeError"]], "jsonencodeerror": [[4, "ax.exceptions.storage.JSONEncodeError"]], "maxparallelismreachedexception": [[4, "ax.exceptions.generation_strategy.MaxParallelismReachedException"]], "misconfiguredexperiment": [[4, "ax.exceptions.core.MisconfiguredExperiment"]], "missingdataerror": [[4, "ax.exceptions.data_provider.MissingDataError"]], "modelerror": [[4, "ax.exceptions.model.ModelError"]], "nodataerror": [[4, "ax.exceptions.core.NoDataError"]], "objectnotfounderror": [[4, "ax.exceptions.core.ObjectNotFoundError"]], "optimizationcomplete": [[4, "ax.exceptions.core.OptimizationComplete"]], "optimizationshouldstop": [[4, "ax.exceptions.core.OptimizationShouldStop"]], "sqadecodeerror": [[4, "ax.exceptions.storage.SQADecodeError"]], "sqaencodeerror": [[4, "ax.exceptions.storage.SQAEncodeError"]], "searchspaceexhausted": [[4, "ax.exceptions.core.SearchSpaceExhausted"]], "unsupportederror": [[4, "ax.exceptions.core.UnsupportedError"]], "unsupportedploterror": [[4, "ax.exceptions.core.UnsupportedPlotError"]], "userinputerror": [[4, "ax.exceptions.core.UserInputError"]], "ax.exceptions": [[4, "module-ax.exceptions"]], "ax.exceptions.constants": [[4, "module-ax.exceptions.constants"]], "ax.exceptions.core": [[4, "module-ax.exceptions.core"]], "ax.exceptions.data_provider": [[4, "module-ax.exceptions.data_provider"]], "ax.exceptions.generation_strategy": [[4, "module-ax.exceptions.generation_strategy"]], "ax.exceptions.model": [[4, "module-ax.exceptions.model"]], "ax.exceptions.storage": [[4, "module-ax.exceptions.storage"]], "baseglobalstoppingstrategy (class in ax.global_stopping.strategies.base)": [[5, "ax.global_stopping.strategies.base.BaseGlobalStoppingStrategy"]], "improvementglobalstoppingstrategy (class in ax.global_stopping.strategies.improvement)": [[5, "ax.global_stopping.strategies.improvement.ImprovementGlobalStoppingStrategy"]], "ax.global_stopping": [[5, "module-ax.global_stopping"]], "ax.global_stopping.strategies.base": [[5, "module-ax.global_stopping.strategies.base"]], "ax.global_stopping.strategies.improvement": [[5, "module-ax.global_stopping.strategies.improvement"]], "constraint_satisfaction() (in module ax.global_stopping.strategies.improvement)": [[5, "ax.global_stopping.strategies.improvement.constraint_satisfaction"]], "should_stop_optimization() (ax.global_stopping.strategies.base.baseglobalstoppingstrategy method)": [[5, "ax.global_stopping.strategies.base.BaseGlobalStoppingStrategy.should_stop_optimization"]], "abstractcurvemetric (class in ax.metrics.curve)": [[7, "ax.metrics.curve.AbstractCurveMetric"]], "abstractscalarizedcurvemetric (class in ax.metrics.curve)": [[7, "ax.metrics.curve.AbstractScalarizedCurveMetric"]], "augmentedbraninmetric (class in ax.metrics.branin)": [[7, "ax.metrics.branin.AugmentedBraninMetric"]], "augmentedhartmann6metric (class in ax.metrics.hartmann6)": [[7, "ax.metrics.hartmann6.AugmentedHartmann6Metric"]], "boston (ax.metrics.sklearn.sklearndataset attribute)": [[7, "ax.metrics.sklearn.SklearnDataset.BOSTON"]], "botorchtestproblemmetric (class in ax.metrics.botorch_test_problem)": [[7, "ax.metrics.botorch_test_problem.BotorchTestProblemMetric"]], "braninfidelitymapmetric (class in ax.metrics.branin_map)": [[7, "ax.metrics.branin_map.BraninFidelityMapMetric"]], "braninmetric (class in ax.metrics.branin)": [[7, "ax.metrics.branin.BraninMetric"]], "branintimestampmapmetric (class in ax.metrics.branin_map)": [[7, "ax.metrics.branin_map.BraninTimestampMapMetric"]], "cancer (ax.metrics.sklearn.sklearndataset attribute)": [[7, "ax.metrics.sklearn.SklearnDataset.CANCER"]], "chemistrydata (class in ax.metrics.chemistry)": [[7, "ax.metrics.chemistry.ChemistryData"]], "chemistrymetric (class in ax.metrics.chemistry)": [[7, "ax.metrics.chemistry.ChemistryMetric"]], "chemistryproblemtype (class in ax.metrics.chemistry)": [[7, "ax.metrics.chemistry.ChemistryProblemType"]], "digits (ax.metrics.sklearn.sklearndataset attribute)": [[7, "ax.metrics.sklearn.SklearnDataset.DIGITS"]], "direct_arylation (ax.metrics.chemistry.chemistryproblemtype attribute)": [[7, "ax.metrics.chemistry.ChemistryProblemType.DIRECT_ARYLATION"]], "dictlookupmetric (class in ax.metrics.dict_lookup)": [[7, "ax.metrics.dict_lookup.DictLookupMetric"]], "factorialmetric (class in ax.metrics.factorial)": [[7, "ax.metrics.factorial.FactorialMetric"]], "genericnoisyfunctionmetric (class in ax.metrics.noisy_function)": [[7, "ax.metrics.noisy_function.GenericNoisyFunctionMetric"]], "hartmann6metric (class in ax.metrics.hartmann6)": [[7, "ax.metrics.hartmann6.Hartmann6Metric"]], "jenattonmetric (class in ax.metrics.jenatton)": [[7, "ax.metrics.jenatton.JenattonMetric"]], "l2normmetric (class in ax.metrics.l2norm)": [[7, "ax.metrics.l2norm.L2NormMetric"]], "nn (ax.metrics.sklearn.sklearnmodeltype attribute)": [[7, "ax.metrics.sklearn.SklearnModelType.NN"]], "negativebraninmetric (class in ax.metrics.branin)": [[7, "ax.metrics.branin.NegativeBraninMetric"]], "noisyfunctionmapmetric (class in ax.metrics.noisy_function_map)": [[7, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric"]], "noisyfunctionmetric (class in ax.metrics.noisy_function)": [[7, "ax.metrics.noisy_function.NoisyFunctionMetric"]], "rf (ax.metrics.sklearn.sklearnmodeltype attribute)": [[7, "ax.metrics.sklearn.SklearnModelType.RF"]], "suzuki (ax.metrics.chemistry.chemistryproblemtype attribute)": [[7, "ax.metrics.chemistry.ChemistryProblemType.SUZUKI"]], "sklearndataset (class in ax.metrics.sklearn)": [[7, "ax.metrics.sklearn.SklearnDataset"]], "sklearnmetric (class in ax.metrics.sklearn)": [[7, "ax.metrics.sklearn.SklearnMetric"]], "sklearnmodeltype (class in ax.metrics.sklearn)": [[7, "ax.metrics.sklearn.SklearnModelType"]], "tensorboardcurvemetric (class in ax.metrics.tensorboard)": [[7, "ax.metrics.tensorboard.TensorboardCurveMetric"]], "torchxmetric (class in ax.metrics.torchx)": [[7, "ax.metrics.torchx.TorchXMetric"]], "ax.metrics": [[7, "module-ax.metrics"]], "ax.metrics.botorch_test_problem": [[7, "module-ax.metrics.botorch_test_problem"]], "ax.metrics.branin": [[7, "module-ax.metrics.branin"]], "ax.metrics.branin_map": [[7, "module-ax.metrics.branin_map"]], "ax.metrics.chemistry": [[7, "module-ax.metrics.chemistry"]], "ax.metrics.curve": [[7, "module-ax.metrics.curve"]], "ax.metrics.dict_lookup": [[7, "module-ax.metrics.dict_lookup"]], "ax.metrics.factorial": [[7, "module-ax.metrics.factorial"]], "ax.metrics.hartmann6": [[7, "module-ax.metrics.hartmann6"]], "ax.metrics.jenatton": [[7, "module-ax.metrics.jenatton"]], "ax.metrics.l2norm": [[7, "module-ax.metrics.l2norm"]], "ax.metrics.noisy_function": [[7, "module-ax.metrics.noisy_function"]], "ax.metrics.noisy_function_map": [[7, "module-ax.metrics.noisy_function_map"]], "ax.metrics.sklearn": [[7, "module-ax.metrics.sklearn"]], "ax.metrics.tensorboard": [[7, "module-ax.metrics.tensorboard"]], "ax.metrics.torchx": [[7, "module-ax.metrics.torchx"]], "bulk_fetch_experiment_data() (ax.metrics.curve.abstractcurvemetric method)": [[7, "ax.metrics.curve.AbstractCurveMetric.bulk_fetch_experiment_data"]], "bulk_fetch_trial_data() (ax.metrics.curve.abstractcurvemetric method)": [[7, "ax.metrics.curve.AbstractCurveMetric.bulk_fetch_trial_data"]], "clone() (ax.metrics.chemistry.chemistrymetric method)": [[7, "ax.metrics.chemistry.ChemistryMetric.clone"]], "clone() (ax.metrics.dict_lookup.dictlookupmetric method)": [[7, "ax.metrics.dict_lookup.DictLookupMetric.clone"]], "clone() (ax.metrics.noisy_function.genericnoisyfunctionmetric method)": [[7, "ax.metrics.noisy_function.GenericNoisyFunctionMetric.clone"]], "clone() (ax.metrics.noisy_function.noisyfunctionmetric method)": [[7, "ax.metrics.noisy_function.NoisyFunctionMetric.clone"]], "clone() (ax.metrics.noisy_function_map.noisyfunctionmapmetric method)": [[7, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.clone"]], "clone() (ax.metrics.sklearn.sklearnmetric method)": [[7, "ax.metrics.sklearn.SklearnMetric.clone"]], "curve_names (ax.metrics.curve.abstractcurvemetric property)": [[7, "ax.metrics.curve.AbstractCurveMetric.curve_names"]], "curve_names (ax.metrics.curve.abstractscalarizedcurvemetric property)": [[7, "ax.metrics.curve.AbstractScalarizedCurveMetric.curve_names"]], "evaluate() (ax.metrics.chemistry.chemistrydata method)": [[7, "ax.metrics.chemistry.ChemistryData.evaluate"]], "evaluation_function() (in module ax.metrics.factorial)": [[7, "ax.metrics.factorial.evaluation_function"]], "f() (ax.metrics.branin.augmentedbraninmetric method)": [[7, "ax.metrics.branin.AugmentedBraninMetric.f"]], "f() (ax.metrics.branin.braninmetric method)": [[7, "ax.metrics.branin.BraninMetric.f"]], "f() (ax.metrics.branin.negativebraninmetric method)": [[7, "ax.metrics.branin.NegativeBraninMetric.f"]], "f() (ax.metrics.branin_map.braninfidelitymapmetric method)": [[7, "ax.metrics.branin_map.BraninFidelityMapMetric.f"]], "f() (ax.metrics.branin_map.branintimestampmapmetric method)": [[7, "ax.metrics.branin_map.BraninTimestampMapMetric.f"]], "f() (ax.metrics.hartmann6.augmentedhartmann6metric method)": [[7, "ax.metrics.hartmann6.AugmentedHartmann6Metric.f"]], "f() (ax.metrics.hartmann6.hartmann6metric method)": [[7, "ax.metrics.hartmann6.Hartmann6Metric.f"]], "f() (ax.metrics.l2norm.l2normmetric method)": [[7, "ax.metrics.l2norm.L2NormMetric.f"]], "f() (ax.metrics.noisy_function.noisyfunctionmetric method)": [[7, "ax.metrics.noisy_function.NoisyFunctionMetric.f"]], "f() (ax.metrics.noisy_function_map.noisyfunctionmapmetric method)": [[7, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.f"]], "fetch_trial_data() (ax.metrics.botorch_test_problem.botorchtestproblemmetric method)": [[7, "ax.metrics.botorch_test_problem.BotorchTestProblemMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.branin_map.braninfidelitymapmetric method)": [[7, "ax.metrics.branin_map.BraninFidelityMapMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.branin_map.branintimestampmapmetric method)": [[7, "ax.metrics.branin_map.BraninTimestampMapMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.chemistry.chemistrymetric method)": [[7, "ax.metrics.chemistry.ChemistryMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.curve.abstractcurvemetric method)": [[7, "ax.metrics.curve.AbstractCurveMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.dict_lookup.dictlookupmetric method)": [[7, "ax.metrics.dict_lookup.DictLookupMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.factorial.factorialmetric method)": [[7, "ax.metrics.factorial.FactorialMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.jenatton.jenattonmetric method)": [[7, "ax.metrics.jenatton.JenattonMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.noisy_function.noisyfunctionmetric method)": [[7, "ax.metrics.noisy_function.NoisyFunctionMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.noisy_function_map.noisyfunctionmapmetric method)": [[7, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.sklearn.sklearnmetric method)": [[7, "ax.metrics.sklearn.SklearnMetric.fetch_trial_data"]], "fetch_trial_data() (ax.metrics.torchx.torchxmetric method)": [[7, "ax.metrics.torchx.TorchXMetric.fetch_trial_data"]], "get_curves_from_ids() (ax.metrics.curve.abstractcurvemetric method)": [[7, "ax.metrics.curve.AbstractCurveMetric.get_curves_from_ids"]], "get_curves_from_ids() (ax.metrics.tensorboard.tensorboardcurvemetric method)": [[7, "ax.metrics.tensorboard.TensorboardCurveMetric.get_curves_from_ids"]], "get_df_from_curve_series() (ax.metrics.curve.abstractcurvemetric method)": [[7, "ax.metrics.curve.AbstractCurveMetric.get_df_from_curve_series"]], "get_df_from_curve_series() (ax.metrics.curve.abstractscalarizedcurvemetric method)": [[7, "ax.metrics.curve.AbstractScalarizedCurveMetric.get_df_from_curve_series"]], "get_df_from_curve_series() (in module ax.metrics.curve)": [[7, "ax.metrics.curve.get_df_from_curve_series"]], "get_df_from_scalarized_curve_series() (in module ax.metrics.curve)": [[7, "ax.metrics.curve.get_df_from_scalarized_curve_series"]], "get_ids_from_trials() (ax.metrics.curve.abstractcurvemetric method)": [[7, "ax.metrics.curve.AbstractCurveMetric.get_ids_from_trials"]], "get_tb_from_posix() (in module ax.metrics.tensorboard)": [[7, "ax.metrics.tensorboard.get_tb_from_posix"]], "is_available_while_running() (ax.metrics.curve.abstractcurvemetric class method)": [[7, "ax.metrics.curve.AbstractCurveMetric.is_available_while_running"]], "is_available_while_running() (ax.metrics.dict_lookup.dictlookupmetric class method)": [[7, "ax.metrics.dict_lookup.DictLookupMetric.is_available_while_running"]], "is_available_while_running() (ax.metrics.factorial.factorialmetric class method)": [[7, "ax.metrics.factorial.FactorialMetric.is_available_while_running"]], "is_available_while_running() (ax.metrics.noisy_function.noisyfunctionmetric class method)": [[7, "ax.metrics.noisy_function.NoisyFunctionMetric.is_available_while_running"]], "is_available_while_running() (ax.metrics.noisy_function_map.noisyfunctionmapmetric class method)": [[7, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.is_available_while_running"]], "lower_is_better (ax.metrics.chemistry.chemistrymetric attribute)": [[7, "ax.metrics.chemistry.ChemistryMetric.lower_is_better"]], "map_key_info (ax.metrics.branin_map.braninfidelitymapmetric attribute)": [[7, "ax.metrics.branin_map.BraninFidelityMapMetric.map_key_info"]], "map_key_info (ax.metrics.curve.abstractcurvemetric attribute)": [[7, "ax.metrics.curve.AbstractCurveMetric.map_key_info"]], "map_key_info (ax.metrics.noisy_function_map.noisyfunctionmapmetric attribute)": [[7, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.map_key_info"]], "map_key_info (ax.metrics.tensorboard.tensorboardcurvemetric attribute)": [[7, "ax.metrics.tensorboard.TensorboardCurveMetric.map_key_info"]], "noiseless (ax.metrics.chemistry.chemistrymetric attribute)": [[7, "ax.metrics.chemistry.ChemistryMetric.noiseless"]], "objective_dict (ax.metrics.chemistry.chemistrydata attribute)": [[7, "ax.metrics.chemistry.ChemistryData.objective_dict"]], "overwrite_existing_data() (ax.metrics.noisy_function_map.noisyfunctionmapmetric class method)": [[7, "ax.metrics.noisy_function_map.NoisyFunctionMapMetric.overwrite_existing_data"]], "param_names (ax.metrics.chemistry.chemistrydata attribute)": [[7, "ax.metrics.chemistry.ChemistryData.param_names"]], "param_names (ax.metrics.noisy_function.genericnoisyfunctionmetric property)": [[7, "ax.metrics.noisy_function.GenericNoisyFunctionMetric.param_names"]], "properties (ax.metrics.curve.abstractscalarizedcurvemetric attribute)": [[7, "ax.metrics.curve.AbstractScalarizedCurveMetric.properties"]], "random() (in module ax.metrics.branin_map)": [[7, "ax.metrics.branin_map.random"]], "train_eval() (ax.metrics.sklearn.sklearnmetric method)": [[7, "ax.metrics.sklearn.SklearnMetric.train_eval"]], "alebo (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.ALEBO"]], "alebostrategy (class in ax.modelbridge.strategies.alebo)": [[8, "ax.modelbridge.strategies.alebo.ALEBOStrategy"]], "alebo_initializer (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.ALEBO_INITIALIZER"]], "assessmodelfitresult (class in ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.AssessModelFitResult"]], "botorch (ax.modelbridge.registry.models property)": [[8, "ax.modelbridge.registry.Models.BOTORCH"]], "botorch_modular (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.BOTORCH_MODULAR"]], "bo_mixed (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.BO_MIXED"]], "basegenargs (class in ax.modelbridge.base)": [[8, "ax.modelbridge.base.BaseGenArgs"]], "baserelativize (class in ax.modelbridge.transforms.relativize)": [[8, "ax.modelbridge.transforms.relativize.BaseRelativize"]], "bestmodelselector (class in ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.BestModelSelector"]], "context_sacbo (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.CONTEXT_SACBO"]], "cvresult (class in ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.CVResult"]], "callableenum (class in ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.CallableEnum"]], "capparameter (class in ax.modelbridge.transforms.cap_parameter)": [[8, "ax.modelbridge.transforms.cap_parameter.CapParameter"]], "cast (class in ax.modelbridge.transforms.cast)": [[8, "ax.modelbridge.transforms.cast.Cast"]], "centeredunitx (class in ax.modelbridge.transforms.centered_unit_x)": [[8, "ax.modelbridge.transforms.centered_unit_x.CenteredUnitX"]], "choiceencode (class in ax.modelbridge.transforms.choice_encode)": [[8, "ax.modelbridge.transforms.choice_encode.ChoiceEncode"]], "closestlookupdict (class in ax.modelbridge.transforms.utils)": [[8, "ax.modelbridge.transforms.utils.ClosestLookupDict"]], "convertmetricnames (class in ax.modelbridge.transforms.convert_metric_names)": [[8, "ax.modelbridge.transforms.convert_metric_names.ConvertMetricNames"]], "default_ehvi_batch_limit (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.DEFAULT_EHVI_BATCH_LIMIT"]], "derelativize (class in ax.modelbridge.transforms.derelativize)": [[8, "ax.modelbridge.transforms.derelativize.Derelativize"]], "diagnosticcriterion (class in ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.DiagnosticCriterion"]], "discretemodelbridge (class in ax.modelbridge.discrete)": [[8, "ax.modelbridge.discrete.DiscreteModelBridge"]], "empirical_bayes_thompson (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.EMPIRICAL_BAYES_THOMPSON"]], "factorial (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.FACTORIAL"]], "fullybayesian (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.FULLYBAYESIAN"]], "fullybayesianmoo (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.FULLYBAYESIANMOO"]], "fullybayesianmoo_mtgp (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.FULLYBAYESIANMOO_MTGP"]], "fullybayesian_mtgp (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.FULLYBAYESIAN_MTGP"]], "factoryfunctionmodelspec (class in ax.modelbridge.model_spec)": [[8, "ax.modelbridge.model_spec.FactoryFunctionModelSpec"]], "gpei (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.GPEI"]], "gpkg (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.GPKG"]], "gpmes (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.GPMES"]], "genresults (class in ax.modelbridge.base)": [[8, "ax.modelbridge.base.GenResults"]], "generationnode (class in ax.modelbridge.generation_node)": [[8, "ax.modelbridge.generation_node.GenerationNode"]], "generationstep (class in ax.modelbridge.generation_node)": [[8, "ax.modelbridge.generation_node.GenerationStep"]], "generationstrategy (class in ax.modelbridge.generation_strategy)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy"]], "hesbostrategy (class in ax.modelbridge.strategies.rembo)": [[8, "ax.modelbridge.strategies.rembo.HeSBOStrategy"]], "ivw (class in ax.modelbridge.transforms.ivw)": [[8, "ax.modelbridge.transforms.ivw.IVW"]], "intrangetochoice (class in ax.modelbridge.transforms.int_range_to_choice)": [[8, "ax.modelbridge.transforms.int_range_to_choice.IntRangeToChoice"]], "inttofloat (class in ax.modelbridge.transforms.int_to_float)": [[8, "ax.modelbridge.transforms.int_to_float.IntToFloat"]], "inversegaussiancdfy (class in ax.modelbridge.transforms.inverse_gaussian_cdf_y)": [[8, "ax.modelbridge.transforms.inverse_gaussian_cdf_y.InverseGaussianCdfY"]], "legacy_botorch (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.LEGACY_BOTORCH"]], "log (class in ax.modelbridge.transforms.log)": [[8, "ax.modelbridge.transforms.log.Log"]], "logy (class in ax.modelbridge.transforms.log_y)": [[8, "ax.modelbridge.transforms.log_y.LogY"]], "logit (class in ax.modelbridge.transforms.logit)": [[8, "ax.modelbridge.transforms.logit.Logit"]], "mean (ax.modelbridge.cross_validation.metricaggregation attribute)": [[8, "ax.modelbridge.cross_validation.MetricAggregation.MEAN"]], "min (ax.modelbridge.cross_validation.diagnosticcriterion attribute)": [[8, "ax.modelbridge.cross_validation.DiagnosticCriterion.MIN"]], "missing_status_quo_error (ax.modelbridge.transforms.relativize.baserelativize attribute)": [[8, "ax.modelbridge.transforms.relativize.BaseRelativize.MISSING_STATUS_QUO_ERROR"]], "moo (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.MOO"]], "maptorchmodelbridge (class in ax.modelbridge.map_torch)": [[8, "ax.modelbridge.map_torch.MapTorchModelBridge"]], "mapunitx (class in ax.modelbridge.transforms.map_unit_x)": [[8, "ax.modelbridge.transforms.map_unit_x.MapUnitX"]], "mergerepeatedmeasurements (class in ax.modelbridge.transforms.merge_repeated_measurements)": [[8, "ax.modelbridge.transforms.merge_repeated_measurements.MergeRepeatedMeasurements"]], "metricaggregation (class in ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.MetricAggregation"]], "metricsastask (class in ax.modelbridge.transforms.metrics_as_task)": [[8, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask"]], "modelbridge (class in ax.modelbridge.base)": [[8, "ax.modelbridge.base.ModelBridge"]], "modelregistrybase (class in ax.modelbridge.registry)": [[8, "ax.modelbridge.registry.ModelRegistryBase"]], "modelsetup (class in ax.modelbridge.registry)": [[8, "ax.modelbridge.registry.ModelSetup"]], "modelspec (class in ax.modelbridge.model_spec)": [[8, "ax.modelbridge.model_spec.ModelSpec"]], "modelspecjsonencoder (class in ax.modelbridge.model_spec)": [[8, "ax.modelbridge.model_spec.ModelSpecJSONEncoder"]], "models (class in ax.modelbridge.registry)": [[8, "ax.modelbridge.registry.Models"]], "onehot (class in ax.modelbridge.transforms.one_hot)": [[8, "ax.modelbridge.transforms.one_hot.OneHot"]], "onehotencoder (class in ax.modelbridge.transforms.one_hot)": [[8, "ax.modelbridge.transforms.one_hot.OneHotEncoder"]], "orderedchoiceencode (class in ax.modelbridge.transforms.choice_encode)": [[8, "ax.modelbridge.transforms.choice_encode.OrderedChoiceEncode"]], "pairwisemodelbridge (class in ax.modelbridge.pairwise)": [[8, "ax.modelbridge.pairwise.PairwiseModelBridge"]], "percentiley (class in ax.modelbridge.transforms.percentile_y)": [[8, "ax.modelbridge.transforms.percentile_y.PercentileY"]], "powertransformy (class in ax.modelbridge.transforms.power_transform_y)": [[8, "ax.modelbridge.transforms.power_transform_y.PowerTransformY"]], "rembostrategy (class in ax.modelbridge.strategies.rembo)": [[8, "ax.modelbridge.strategies.rembo.REMBOStrategy"]], "relativize (class in ax.modelbridge.transforms.relativize)": [[8, "ax.modelbridge.transforms.relativize.Relativize"]], "relativizewithconstantcontrol (class in ax.modelbridge.transforms.relativize)": [[8, "ax.modelbridge.transforms.relativize.RelativizeWithConstantControl"]], "removefixed (class in ax.modelbridge.transforms.remove_fixed)": [[8, "ax.modelbridge.transforms.remove_fixed.RemoveFixed"]], "saasbo (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.SAASBO"]], "saas_mtgp (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.SAAS_MTGP"]], "sobol (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.SOBOL"]], "st_mtgp (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.ST_MTGP"]], "st_mtgp_legacy (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.ST_MTGP_LEGACY"]], "st_mtgp_nehvi (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.ST_MTGP_NEHVI"]], "searchspacetochoice (class in ax.modelbridge.transforms.search_space_to_choice)": [[8, "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice"]], "singlediagnosticbestmodelselector (class in ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.SingleDiagnosticBestModelSelector"]], "standardizey (class in ax.modelbridge.transforms.standardize_y)": [[8, "ax.modelbridge.transforms.standardize_y.StandardizeY"]], "stratifiedstandardizey (class in ax.modelbridge.transforms.stratified_standardize_y)": [[8, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY"]], "thompson (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.THOMPSON"]], "taskencode (class in ax.modelbridge.transforms.task_encode)": [[8, "ax.modelbridge.transforms.task_encode.TaskEncode"]], "torchmodelbridge (class in ax.modelbridge.torch)": [[8, "ax.modelbridge.torch.TorchModelBridge"]], "transform (class in ax.modelbridge.transforms.base)": [[8, "ax.modelbridge.transforms.base.Transform"]], "trialastask (class in ax.modelbridge.transforms.trial_as_task)": [[8, "ax.modelbridge.transforms.trial_as_task.TrialAsTask"]], "uniform (ax.modelbridge.registry.models attribute)": [[8, "ax.modelbridge.registry.Models.UNIFORM"]], "unitx (class in ax.modelbridge.transforms.unit_x)": [[8, "ax.modelbridge.transforms.unit_x.UnitX"]], "winsorize (class in ax.modelbridge.transforms.winsorize)": [[8, "ax.modelbridge.transforms.winsorize.Winsorize"]], "array_to_observation_data() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.array_to_observation_data"]], "assess_model_fit() (in module ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.assess_model_fit"]], "ax.modelbridge": [[8, "module-ax.modelbridge"]], "ax.modelbridge.base": [[8, "module-ax.modelbridge.base"]], "ax.modelbridge.cross_validation": [[8, "module-ax.modelbridge.cross_validation"]], "ax.modelbridge.discrete": [[8, "module-ax.modelbridge.discrete"]], "ax.modelbridge.dispatch_utils": [[8, "module-ax.modelbridge.dispatch_utils"]], "ax.modelbridge.factory": [[8, "module-ax.modelbridge.factory"]], "ax.modelbridge.generation_node": [[8, "module-ax.modelbridge.generation_node"]], "ax.modelbridge.generation_strategy": [[8, "module-ax.modelbridge.generation_strategy"]], "ax.modelbridge.map_torch": [[8, "module-ax.modelbridge.map_torch"]], "ax.modelbridge.model_spec": [[8, "module-ax.modelbridge.model_spec"]], "ax.modelbridge.modelbridge_utils": [[8, "module-ax.modelbridge.modelbridge_utils"]], "ax.modelbridge.pairwise": [[8, "module-ax.modelbridge.pairwise"]], "ax.modelbridge.prediction_utils": [[8, "module-ax.modelbridge.prediction_utils"]], "ax.modelbridge.registry": [[8, "module-ax.modelbridge.registry"]], "ax.modelbridge.strategies.alebo": [[8, "module-ax.modelbridge.strategies.alebo"]], "ax.modelbridge.strategies.rembo": [[8, "module-ax.modelbridge.strategies.rembo"]], "ax.modelbridge.torch": [[8, "module-ax.modelbridge.torch"]], "ax.modelbridge.transforms.base": [[8, "module-ax.modelbridge.transforms.base"]], "ax.modelbridge.transforms.cap_parameter": [[8, "module-ax.modelbridge.transforms.cap_parameter"]], "ax.modelbridge.transforms.cast": [[8, "module-ax.modelbridge.transforms.cast"]], "ax.modelbridge.transforms.centered_unit_x": [[8, "module-ax.modelbridge.transforms.centered_unit_x"]], "ax.modelbridge.transforms.choice_encode": [[8, "module-ax.modelbridge.transforms.choice_encode"]], "ax.modelbridge.transforms.convert_metric_names": [[8, "module-ax.modelbridge.transforms.convert_metric_names"]], "ax.modelbridge.transforms.derelativize": [[8, "module-ax.modelbridge.transforms.derelativize"]], "ax.modelbridge.transforms.int_range_to_choice": [[8, "module-ax.modelbridge.transforms.int_range_to_choice"]], "ax.modelbridge.transforms.int_to_float": [[8, "module-ax.modelbridge.transforms.int_to_float"]], "ax.modelbridge.transforms.inverse_gaussian_cdf_y": [[8, "module-ax.modelbridge.transforms.inverse_gaussian_cdf_y"]], "ax.modelbridge.transforms.ivw": [[8, "module-ax.modelbridge.transforms.ivw"]], "ax.modelbridge.transforms.log": [[8, "module-ax.modelbridge.transforms.log"]], "ax.modelbridge.transforms.log_y": [[8, "module-ax.modelbridge.transforms.log_y"]], "ax.modelbridge.transforms.logit": [[8, "module-ax.modelbridge.transforms.logit"]], "ax.modelbridge.transforms.map_unit_x": [[8, "module-ax.modelbridge.transforms.map_unit_x"]], "ax.modelbridge.transforms.merge_repeated_measurements": [[8, "module-ax.modelbridge.transforms.merge_repeated_measurements"]], "ax.modelbridge.transforms.metrics_as_task": [[8, "module-ax.modelbridge.transforms.metrics_as_task"]], "ax.modelbridge.transforms.one_hot": [[8, "module-ax.modelbridge.transforms.one_hot"]], "ax.modelbridge.transforms.percentile_y": [[8, "module-ax.modelbridge.transforms.percentile_y"]], "ax.modelbridge.transforms.power_transform_y": [[8, "module-ax.modelbridge.transforms.power_transform_y"]], "ax.modelbridge.transforms.relativize": [[8, "module-ax.modelbridge.transforms.relativize"]], "ax.modelbridge.transforms.remove_fixed": [[8, "module-ax.modelbridge.transforms.remove_fixed"]], "ax.modelbridge.transforms.rounding": [[8, "module-ax.modelbridge.transforms.rounding"]], "ax.modelbridge.transforms.search_space_to_choice": [[8, "module-ax.modelbridge.transforms.search_space_to_choice"]], "ax.modelbridge.transforms.standardize_y": [[8, "module-ax.modelbridge.transforms.standardize_y"]], "ax.modelbridge.transforms.stratified_standardize_y": [[8, "module-ax.modelbridge.transforms.stratified_standardize_y"]], "ax.modelbridge.transforms.task_encode": [[8, "module-ax.modelbridge.transforms.task_encode"]], "ax.modelbridge.transforms.trial_as_task": [[8, "module-ax.modelbridge.transforms.trial_as_task"]], "ax.modelbridge.transforms.unit_x": [[8, "module-ax.modelbridge.transforms.unit_x"]], "ax.modelbridge.transforms.utils": [[8, "module-ax.modelbridge.transforms.utils"]], "ax.modelbridge.transforms.winsorize": [[8, "module-ax.modelbridge.transforms.winsorize"]], "bad_fit_metrics_to_fisher_score (ax.modelbridge.cross_validation.assessmodelfitresult attribute)": [[8, "ax.modelbridge.cross_validation.AssessModelFitResult.bad_fit_metrics_to_fisher_score"]], "best_diagnostic() (ax.modelbridge.cross_validation.bestmodelselector method)": [[8, "ax.modelbridge.cross_validation.BestModelSelector.best_diagnostic"]], "best_diagnostic() (ax.modelbridge.cross_validation.singlediagnosticbestmodelselector method)": [[8, "ax.modelbridge.cross_validation.SingleDiagnosticBestModelSelector.best_diagnostic"]], "best_observation_features (ax.modelbridge.base.genresults attribute)": [[8, "ax.modelbridge.base.GenResults.best_observation_features"]], "bridge_class (ax.modelbridge.registry.modelsetup attribute)": [[8, "ax.modelbridge.registry.ModelSetup.bridge_class"]], "calculate_num_initialization_trials() (in module ax.modelbridge.dispatch_utils)": [[8, "ax.modelbridge.dispatch_utils.calculate_num_initialization_trials"]], "check_has_multi_objective_and_data() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.check_has_multi_objective_and_data"]], "choose_generation_strategy() (in module ax.modelbridge.dispatch_utils)": [[8, "ax.modelbridge.dispatch_utils.choose_generation_strategy"]], "clamp_observation_features() (in module ax.modelbridge.base)": [[8, "ax.modelbridge.base.clamp_observation_features"]], "clone_reset() (ax.modelbridge.generation_strategy.generationstrategy method)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.clone_reset"]], "clone_reset() (ax.modelbridge.strategies.alebo.alebostrategy method)": [[8, "ax.modelbridge.strategies.alebo.ALEBOStrategy.clone_reset"]], "clone_reset() (ax.modelbridge.strategies.rembo.rembostrategy method)": [[8, "ax.modelbridge.strategies.rembo.REMBOStrategy.clone_reset"]], "completion_criteria (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.completion_criteria"]], "compute_diagnostics() (in module ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.compute_diagnostics"]], "compute_model_fit_metrics_from_modelbridge() (in module ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.compute_model_fit_metrics_from_modelbridge"]], "compute_standardization_parameters() (in module ax.modelbridge.transforms.standardize_y)": [[8, "ax.modelbridge.transforms.standardize_y.compute_standardization_parameters"]], "config (ax.modelbridge.transforms.base.transform attribute)": [[8, "ax.modelbridge.transforms.base.Transform.config"]], "config (ax.modelbridge.transforms.cap_parameter.capparameter attribute)": [[8, "ax.modelbridge.transforms.cap_parameter.CapParameter.config"]], "config (ax.modelbridge.transforms.cast.cast attribute)": [[8, "ax.modelbridge.transforms.cast.Cast.config"]], "config (ax.modelbridge.transforms.choice_encode.choiceencode attribute)": [[8, "ax.modelbridge.transforms.choice_encode.ChoiceEncode.config"]], "config (ax.modelbridge.transforms.choice_encode.orderedchoiceencode attribute)": [[8, "ax.modelbridge.transforms.choice_encode.OrderedChoiceEncode.config"]], "config (ax.modelbridge.transforms.convert_metric_names.convertmetricnames attribute)": [[8, "ax.modelbridge.transforms.convert_metric_names.ConvertMetricNames.config"]], "config (ax.modelbridge.transforms.derelativize.derelativize attribute)": [[8, "ax.modelbridge.transforms.derelativize.Derelativize.config"]], "config (ax.modelbridge.transforms.int_range_to_choice.intrangetochoice attribute)": [[8, "ax.modelbridge.transforms.int_range_to_choice.IntRangeToChoice.config"]], "config (ax.modelbridge.transforms.int_to_float.inttofloat attribute)": [[8, "ax.modelbridge.transforms.int_to_float.IntToFloat.config"]], "config (ax.modelbridge.transforms.inverse_gaussian_cdf_y.inversegaussiancdfy attribute)": [[8, "ax.modelbridge.transforms.inverse_gaussian_cdf_y.InverseGaussianCdfY.config"]], "config (ax.modelbridge.transforms.ivw.ivw attribute)": [[8, "ax.modelbridge.transforms.ivw.IVW.config"]], "config (ax.modelbridge.transforms.log.log attribute)": [[8, "ax.modelbridge.transforms.log.Log.config"]], "config (ax.modelbridge.transforms.log_y.logy attribute)": [[8, "ax.modelbridge.transforms.log_y.LogY.config"]], "config (ax.modelbridge.transforms.logit.logit attribute)": [[8, "ax.modelbridge.transforms.logit.Logit.config"]], "config (ax.modelbridge.transforms.merge_repeated_measurements.mergerepeatedmeasurements attribute)": [[8, "ax.modelbridge.transforms.merge_repeated_measurements.MergeRepeatedMeasurements.config"]], "config (ax.modelbridge.transforms.metrics_as_task.metricsastask attribute)": [[8, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.config"]], "config (ax.modelbridge.transforms.one_hot.onehot attribute)": [[8, "ax.modelbridge.transforms.one_hot.OneHot.config"]], "config (ax.modelbridge.transforms.percentile_y.percentiley attribute)": [[8, "ax.modelbridge.transforms.percentile_y.PercentileY.config"]], "config (ax.modelbridge.transforms.power_transform_y.powertransformy attribute)": [[8, "ax.modelbridge.transforms.power_transform_y.PowerTransformY.config"]], "config (ax.modelbridge.transforms.relativize.baserelativize attribute)": [[8, "ax.modelbridge.transforms.relativize.BaseRelativize.config"]], "config (ax.modelbridge.transforms.relativize.relativize attribute)": [[8, "ax.modelbridge.transforms.relativize.Relativize.config"]], "config (ax.modelbridge.transforms.relativize.relativizewithconstantcontrol attribute)": [[8, "ax.modelbridge.transforms.relativize.RelativizeWithConstantControl.config"]], "config (ax.modelbridge.transforms.remove_fixed.removefixed attribute)": [[8, "ax.modelbridge.transforms.remove_fixed.RemoveFixed.config"]], "config (ax.modelbridge.transforms.search_space_to_choice.searchspacetochoice attribute)": [[8, "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice.config"]], "config (ax.modelbridge.transforms.standardize_y.standardizey attribute)": [[8, "ax.modelbridge.transforms.standardize_y.StandardizeY.config"]], "config (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey attribute)": [[8, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.config"]], "config (ax.modelbridge.transforms.task_encode.taskencode attribute)": [[8, "ax.modelbridge.transforms.task_encode.TaskEncode.config"]], "config (ax.modelbridge.transforms.trial_as_task.trialastask attribute)": [[8, "ax.modelbridge.transforms.trial_as_task.TrialAsTask.config"]], "construct_new_search_space() (in module ax.modelbridge.transforms.utils)": [[8, "ax.modelbridge.transforms.utils.construct_new_search_space"]], "contains_constrained_integer() (in module ax.modelbridge.transforms.rounding)": [[8, "ax.modelbridge.transforms.rounding.contains_constrained_integer"]], "control_as_constant (ax.modelbridge.transforms.relativize.baserelativize property)": [[8, "ax.modelbridge.transforms.relativize.BaseRelativize.control_as_constant"]], "control_as_constant (ax.modelbridge.transforms.relativize.relativize property)": [[8, "ax.modelbridge.transforms.relativize.Relativize.control_as_constant"]], "control_as_constant (ax.modelbridge.transforms.relativize.relativizewithconstantcontrol property)": [[8, "ax.modelbridge.transforms.relativize.RelativizeWithConstantControl.control_as_constant"]], "convert_mt_observations() (in module ax.modelbridge.transforms.convert_metric_names)": [[8, "ax.modelbridge.transforms.convert_metric_names.convert_mt_observations"]], "copy() (ax.modelbridge.model_spec.modelspec method)": [[8, "ax.modelbridge.model_spec.ModelSpec.copy"]], "cross_validate() (ax.modelbridge.base.modelbridge method)": [[8, "ax.modelbridge.base.ModelBridge.cross_validate"]], "cross_validate() (ax.modelbridge.model_spec.modelspec method)": [[8, "ax.modelbridge.model_spec.ModelSpec.cross_validate"]], "cross_validate() (in module ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.cross_validate"]], "cross_validate_by_trial() (in module ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.cross_validate_by_trial"]], "current_generator_run_limit() (ax.modelbridge.generation_strategy.generationstrategy method)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.current_generator_run_limit"]], "current_node (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.current_node"]], "current_node_name (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.current_node_name"]], "current_step (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.current_step"]], "current_step_index (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.current_step_index"]], "cutoffs (ax.modelbridge.transforms.winsorize.winsorize attribute)": [[8, "ax.modelbridge.transforms.winsorize.Winsorize.cutoffs"]], "cv_results (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.cv_results"]], "cv_results (ax.modelbridge.model_spec.modelspec property)": [[8, "ax.modelbridge.model_spec.ModelSpec.cv_results"]], "default() (ax.modelbridge.model_spec.modelspecjsonencoder method)": [[8, "ax.modelbridge.model_spec.ModelSpecJSONEncoder.default"]], "default_model_kwargs (ax.modelbridge.registry.modelsetup attribute)": [[8, "ax.modelbridge.registry.ModelSetup.default_model_kwargs"]], "derelativize_optimization_config_with_raw_status_quo() (in module ax.modelbridge.transforms.utils)": [[8, "ax.modelbridge.transforms.utils.derelativize_optimization_config_with_raw_status_quo"]], "diagnostics (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.diagnostics"]], "diagnostics (ax.modelbridge.model_spec.modelspec property)": [[8, "ax.modelbridge.model_spec.ModelSpec.diagnostics"]], "dtype (ax.modelbridge.map_torch.maptorchmodelbridge attribute)": [[8, "ax.modelbridge.map_torch.MapTorchModelBridge.dtype"]], "dtype (ax.modelbridge.pairwise.pairwisemodelbridge attribute)": [[8, "ax.modelbridge.pairwise.PairwiseModelBridge.dtype"]], "encoded_parameters (ax.modelbridge.transforms.choice_encode.orderedchoiceencode attribute)": [[8, "ax.modelbridge.transforms.choice_encode.OrderedChoiceEncode.encoded_parameters"]], "encoded_parameters (ax.modelbridge.transforms.task_encode.taskencode attribute)": [[8, "ax.modelbridge.transforms.task_encode.TaskEncode.encoded_parameters"]], "encoded_parameters_inverse (ax.modelbridge.transforms.choice_encode.orderedchoiceencode attribute)": [[8, "ax.modelbridge.transforms.choice_encode.OrderedChoiceEncode.encoded_parameters_inverse"]], "encoded_parameters_inverse (ax.modelbridge.transforms.task_encode.taskencode attribute)": [[8, "ax.modelbridge.transforms.task_encode.TaskEncode.encoded_parameters_inverse"]], "enforce_num_trials (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.enforce_num_trials"]], "evaluate_acquisition_function() (ax.modelbridge.torch.torchmodelbridge method)": [[8, "ax.modelbridge.torch.TorchModelBridge.evaluate_acquisition_function"]], "experiment (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.experiment"]], "experiment (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.experiment"]], "extract_objective_thresholds() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.extract_objective_thresholds"]], "extract_objective_weights() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.extract_objective_weights"]], "extract_outcome_constraints() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.extract_outcome_constraints"]], "extract_parameter_constraints() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.extract_parameter_constraints"]], "extract_risk_measure() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.extract_risk_measure"]], "extract_robust_digest() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.extract_robust_digest"]], "extract_search_space_digest() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.extract_search_space_digest"]], "factory_function (ax.modelbridge.model_spec.factoryfunctionmodelspec attribute)": [[8, "ax.modelbridge.model_spec.FactoryFunctionModelSpec.factory_function"]], "feasible_hypervolume() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.feasible_hypervolume"]], "feature_importances() (ax.modelbridge.base.modelbridge method)": [[8, "ax.modelbridge.base.ModelBridge.feature_importances"]], "feature_importances() (ax.modelbridge.torch.torchmodelbridge method)": [[8, "ax.modelbridge.torch.TorchModelBridge.feature_importances"]], "fit() (ax.modelbridge.generation_node.generationnode method)": [[8, "ax.modelbridge.generation_node.GenerationNode.fit"]], "fit() (ax.modelbridge.model_spec.factoryfunctionmodelspec method)": [[8, "ax.modelbridge.model_spec.FactoryFunctionModelSpec.fit"]], "fit() (ax.modelbridge.model_spec.modelspec method)": [[8, "ax.modelbridge.model_spec.ModelSpec.fit"]], "fit_time (ax.modelbridge.map_torch.maptorchmodelbridge attribute)": [[8, "ax.modelbridge.map_torch.MapTorchModelBridge.fit_time"]], "fit_time (ax.modelbridge.pairwise.pairwisemodelbridge attribute)": [[8, "ax.modelbridge.pairwise.PairwiseModelBridge.fit_time"]], "fit_time_since_gen (ax.modelbridge.map_torch.maptorchmodelbridge attribute)": [[8, "ax.modelbridge.map_torch.MapTorchModelBridge.fit_time_since_gen"]], "fit_time_since_gen (ax.modelbridge.pairwise.pairwisemodelbridge attribute)": [[8, "ax.modelbridge.pairwise.PairwiseModelBridge.fit_time_since_gen"]], "fitted_model (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.fitted_model"]], "fitted_model (ax.modelbridge.model_spec.modelspec property)": [[8, "ax.modelbridge.model_spec.ModelSpec.fitted_model"]], "fixed_features (ax.modelbridge.base.basegenargs attribute)": [[8, "ax.modelbridge.base.BaseGenArgs.fixed_features"]], "fixed_features (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.fixed_features"]], "fixed_features (ax.modelbridge.model_spec.modelspec property)": [[8, "ax.modelbridge.model_spec.ModelSpec.fixed_features"]], "gen() (ax.modelbridge.base.modelbridge method)": [[8, "ax.modelbridge.base.ModelBridge.gen"]], "gen() (ax.modelbridge.generation_node.generationnode method)": [[8, "ax.modelbridge.generation_node.GenerationNode.gen"]], "gen() (ax.modelbridge.generation_node.generationstep method)": [[8, "ax.modelbridge.generation_node.GenerationStep.gen"]], "gen() (ax.modelbridge.generation_strategy.generationstrategy method)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.gen"]], "gen() (ax.modelbridge.model_spec.modelspec method)": [[8, "ax.modelbridge.model_spec.ModelSpec.gen"]], "gen() (ax.modelbridge.strategies.rembo.rembostrategy method)": [[8, "ax.modelbridge.strategies.rembo.REMBOStrategy.gen"]], "gen_arms() (in module ax.modelbridge.base)": [[8, "ax.modelbridge.base.gen_arms"]], "gen_for_multiple_trials_with_multiple_models() (ax.modelbridge.generation_strategy.generationstrategy method)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.gen_for_multiple_trials_with_multiple_models"]], "gen_metadata (ax.modelbridge.base.genresults attribute)": [[8, "ax.modelbridge.base.GenResults.gen_metadata"]], "gen_projection() (ax.modelbridge.strategies.alebo.alebostrategy method)": [[8, "ax.modelbridge.strategies.alebo.ALEBOStrategy.gen_projection"]], "gen_unlimited_trials (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.gen_unlimited_trials"]], "generation_strategy (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.generation_strategy"]], "generator_run_limit() (ax.modelbridge.generation_node.generationnode method)": [[8, "ax.modelbridge.generation_node.GenerationNode.generator_run_limit"]], "get_alebo() (in module ax.modelbridge.strategies.alebo)": [[8, "ax.modelbridge.strategies.alebo.get_ALEBO"]], "get_aleboinitializer() (in module ax.modelbridge.strategies.alebo)": [[8, "ax.modelbridge.strategies.alebo.get_ALEBOInitializer"]], "get_gpei() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_GPEI"]], "get_gpkg() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_GPKG"]], "get_gpmes() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_GPMES"]], "get_moo_ehvi() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_MOO_EHVI"]], "get_moo_nehvi() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_MOO_NEHVI"]], "get_moo_parego() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_MOO_PAREGO"]], "get_moo_rs() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_MOO_RS"]], "get_mtgp_legacy() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_MTGP_LEGACY"]], "get_mtgp_nehvi() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_MTGP_NEHVI"]], "get_mtgp_parego() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_MTGP_PAREGO"]], "get_rembo() (in module ax.modelbridge.strategies.rembo)": [[8, "ax.modelbridge.strategies.rembo.get_REMBO"]], "get_botorch() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_botorch"]], "get_data() (in module ax.modelbridge.transforms.utils)": [[8, "ax.modelbridge.transforms.utils.get_data"]], "get_empirical_bayes_thompson() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_empirical_bayes_thompson"]], "get_factorial() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_factorial"]], "get_fixed_features() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.get_fixed_features"]], "get_fixed_features_from_experiment() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.get_fixed_features_from_experiment"]], "get_model_from_generator_run() (in module ax.modelbridge.registry)": [[8, "ax.modelbridge.registry.get_model_from_generator_run"]], "get_pareto_frontier_and_configs() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.get_pareto_frontier_and_configs"]], "get_projection() (ax.modelbridge.strategies.rembo.hesbostrategy method)": [[8, "ax.modelbridge.strategies.rembo.HeSBOStrategy.get_projection"]], "get_projection() (ax.modelbridge.strategies.rembo.rembostrategy method)": [[8, "ax.modelbridge.strategies.rembo.REMBOStrategy.get_projection"]], "get_rembo_initializer() (in module ax.modelbridge.strategies.rembo)": [[8, "ax.modelbridge.strategies.rembo.get_rembo_initializer"]], "get_sobol() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_sobol"]], "get_thompson() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_thompson"]], "get_training_data() (ax.modelbridge.base.modelbridge method)": [[8, "ax.modelbridge.base.ModelBridge.get_training_data"]], "get_uniform() (in module ax.modelbridge.factory)": [[8, "ax.modelbridge.factory.get_uniform"]], "good_fit_metrics_to_fisher_score (ax.modelbridge.cross_validation.assessmodelfitresult attribute)": [[8, "ax.modelbridge.cross_validation.AssessModelFitResult.good_fit_metrics_to_fisher_score"]], "has_good_opt_config_model_fit() (in module ax.modelbridge.cross_validation)": [[8, "ax.modelbridge.cross_validation.has_good_opt_config_model_fit"]], "hypervolume() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.hypervolume"]], "index (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.index"]], "infer_objective_thresholds() (ax.modelbridge.torch.torchmodelbridge method)": [[8, "ax.modelbridge.torch.TorchModelBridge.infer_objective_thresholds"]], "inverse_transform() (ax.modelbridge.transforms.one_hot.onehotencoder method)": [[8, "ax.modelbridge.transforms.one_hot.OneHotEncoder.inverse_transform"]], "is_completed (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.is_completed"]], "is_moo_problem (ax.modelbridge.map_torch.maptorchmodelbridge attribute)": [[8, "ax.modelbridge.map_torch.MapTorchModelBridge.is_moo_problem"]], "is_moo_problem (ax.modelbridge.pairwise.pairwisemodelbridge attribute)": [[8, "ax.modelbridge.pairwise.PairwiseModelBridge.is_moo_problem"]], "is_node_based (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.is_node_based"]], "is_saasbo() (in module ax.modelbridge.dispatch_utils)": [[8, "ax.modelbridge.dispatch_utils.is_saasbo"]], "ivw_metric_merge() (in module ax.modelbridge.transforms.ivw)": [[8, "ax.modelbridge.transforms.ivw.ivw_metric_merge"]], "lognorm_to_norm() (in module ax.modelbridge.transforms.log_y)": [[8, "ax.modelbridge.transforms.log_y.lognorm_to_norm"]], "match_ci_width() (in module ax.modelbridge.transforms.log_y)": [[8, "ax.modelbridge.transforms.log_y.match_ci_width"]], "match_ci_width_truncated() (in module ax.modelbridge.transforms.utils)": [[8, "ax.modelbridge.transforms.utils.match_ci_width_truncated"]], "max_parallelism (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.max_parallelism"]], "metric_names (ax.modelbridge.base.modelbridge property)": [[8, "ax.modelbridge.base.ModelBridge.metric_names"]], "min_trials_observed (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.min_trials_observed"]], "model (ax.modelbridge.discrete.discretemodelbridge attribute)": [[8, "ax.modelbridge.discrete.DiscreteModelBridge.model"]], "model (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.model"]], "model (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.model"]], "model (ax.modelbridge.torch.torchmodelbridge attribute)": [[8, "ax.modelbridge.torch.TorchModelBridge.model"]], "model_best_point() (ax.modelbridge.torch.torchmodelbridge method)": [[8, "ax.modelbridge.torch.TorchModelBridge.model_best_point"]], "model_bridge_class (ax.modelbridge.registry.modelregistrybase property)": [[8, "ax.modelbridge.registry.ModelRegistryBase.model_bridge_class"]], "model_class (ax.modelbridge.registry.modelregistrybase property)": [[8, "ax.modelbridge.registry.ModelRegistryBase.model_class"]], "model_class (ax.modelbridge.registry.modelsetup attribute)": [[8, "ax.modelbridge.registry.ModelSetup.model_class"]], "model_cv_kwargs (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.model_cv_kwargs"]], "model_cv_kwargs (ax.modelbridge.model_spec.modelspec attribute)": [[8, "ax.modelbridge.model_spec.ModelSpec.model_cv_kwargs"]], "model_enum (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.model_enum"]], "model_enum (ax.modelbridge.model_spec.factoryfunctionmodelspec attribute)": [[8, "ax.modelbridge.model_spec.FactoryFunctionModelSpec.model_enum"]], "model_enum (ax.modelbridge.model_spec.modelspec attribute)": [[8, "ax.modelbridge.model_spec.ModelSpec.model_enum"]], "model_gen_kwargs (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.model_gen_kwargs"]], "model_gen_kwargs (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.model_gen_kwargs"]], "model_gen_kwargs (ax.modelbridge.model_spec.modelspec attribute)": [[8, "ax.modelbridge.model_spec.ModelSpec.model_gen_kwargs"]], "model_key (ax.modelbridge.model_spec.factoryfunctionmodelspec property)": [[8, "ax.modelbridge.model_spec.FactoryFunctionModelSpec.model_key"]], "model_key (ax.modelbridge.model_spec.modelspec property)": [[8, "ax.modelbridge.model_spec.ModelSpec.model_key"]], "model_kwargs (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.model_kwargs"]], "model_kwargs (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.model_kwargs"]], "model_kwargs (ax.modelbridge.model_spec.modelspec attribute)": [[8, "ax.modelbridge.model_spec.ModelSpec.model_kwargs"]], "model_name (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.model_name"]], "model_space (ax.modelbridge.base.modelbridge property)": [[8, "ax.modelbridge.base.ModelBridge.model_space"]], "model_spec (ax.modelbridge.generation_node.generationstep property)": [[8, "ax.modelbridge.generation_node.GenerationStep.model_spec"]], "model_spec_to_gen_from (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.model_spec_to_gen_from"]], "model_specs (ax.modelbridge.generation_node.generationnode attribute)": [[8, "ax.modelbridge.generation_node.GenerationNode.model_specs"]], "model_to_gen_from_name (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.model_to_gen_from_name"]], "model_transitions (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.model_transitions"]], "model_transitions (ax.modelbridge.strategies.rembo.rembostrategy property)": [[8, "ax.modelbridge.strategies.rembo.REMBOStrategy.model_transitions"]], "modelbridge (ax.modelbridge.transforms.base.transform attribute)": [[8, "ax.modelbridge.transforms.base.Transform.modelbridge"]], "modelbridge (ax.modelbridge.transforms.cap_parameter.capparameter attribute)": [[8, "ax.modelbridge.transforms.cap_parameter.CapParameter.modelbridge"]], "modelbridge (ax.modelbridge.transforms.cast.cast attribute)": [[8, "ax.modelbridge.transforms.cast.Cast.modelbridge"]], "modelbridge (ax.modelbridge.transforms.choice_encode.choiceencode attribute)": [[8, "ax.modelbridge.transforms.choice_encode.ChoiceEncode.modelbridge"]], "modelbridge (ax.modelbridge.transforms.choice_encode.orderedchoiceencode attribute)": [[8, "ax.modelbridge.transforms.choice_encode.OrderedChoiceEncode.modelbridge"]], "modelbridge (ax.modelbridge.transforms.convert_metric_names.convertmetricnames attribute)": [[8, "ax.modelbridge.transforms.convert_metric_names.ConvertMetricNames.modelbridge"]], "modelbridge (ax.modelbridge.transforms.derelativize.derelativize attribute)": [[8, "ax.modelbridge.transforms.derelativize.Derelativize.modelbridge"]], "modelbridge (ax.modelbridge.transforms.int_range_to_choice.intrangetochoice attribute)": [[8, "ax.modelbridge.transforms.int_range_to_choice.IntRangeToChoice.modelbridge"]], "modelbridge (ax.modelbridge.transforms.int_to_float.inttofloat attribute)": [[8, "ax.modelbridge.transforms.int_to_float.IntToFloat.modelbridge"]], "modelbridge (ax.modelbridge.transforms.inverse_gaussian_cdf_y.inversegaussiancdfy attribute)": [[8, "ax.modelbridge.transforms.inverse_gaussian_cdf_y.InverseGaussianCdfY.modelbridge"]], "modelbridge (ax.modelbridge.transforms.ivw.ivw attribute)": [[8, "ax.modelbridge.transforms.ivw.IVW.modelbridge"]], "modelbridge (ax.modelbridge.transforms.log.log attribute)": [[8, "ax.modelbridge.transforms.log.Log.modelbridge"]], "modelbridge (ax.modelbridge.transforms.log_y.logy attribute)": [[8, "ax.modelbridge.transforms.log_y.LogY.modelbridge"]], "modelbridge (ax.modelbridge.transforms.logit.logit attribute)": [[8, "ax.modelbridge.transforms.logit.Logit.modelbridge"]], "modelbridge (ax.modelbridge.transforms.merge_repeated_measurements.mergerepeatedmeasurements attribute)": [[8, "ax.modelbridge.transforms.merge_repeated_measurements.MergeRepeatedMeasurements.modelbridge"]], "modelbridge (ax.modelbridge.transforms.metrics_as_task.metricsastask attribute)": [[8, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.modelbridge"]], "modelbridge (ax.modelbridge.transforms.one_hot.onehot attribute)": [[8, "ax.modelbridge.transforms.one_hot.OneHot.modelbridge"]], "modelbridge (ax.modelbridge.transforms.percentile_y.percentiley attribute)": [[8, "ax.modelbridge.transforms.percentile_y.PercentileY.modelbridge"]], "modelbridge (ax.modelbridge.transforms.power_transform_y.powertransformy attribute)": [[8, "ax.modelbridge.transforms.power_transform_y.PowerTransformY.modelbridge"]], "modelbridge (ax.modelbridge.transforms.relativize.baserelativize attribute)": [[8, "ax.modelbridge.transforms.relativize.BaseRelativize.modelbridge"]], "modelbridge (ax.modelbridge.transforms.relativize.relativize attribute)": [[8, "ax.modelbridge.transforms.relativize.Relativize.modelbridge"]], "modelbridge (ax.modelbridge.transforms.relativize.relativizewithconstantcontrol attribute)": [[8, "ax.modelbridge.transforms.relativize.RelativizeWithConstantControl.modelbridge"]], "modelbridge (ax.modelbridge.transforms.remove_fixed.removefixed attribute)": [[8, "ax.modelbridge.transforms.remove_fixed.RemoveFixed.modelbridge"]], "modelbridge (ax.modelbridge.transforms.search_space_to_choice.searchspacetochoice attribute)": [[8, "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice.modelbridge"]], "modelbridge (ax.modelbridge.transforms.standardize_y.standardizey attribute)": [[8, "ax.modelbridge.transforms.standardize_y.StandardizeY.modelbridge"]], "modelbridge (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey attribute)": [[8, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.modelbridge"]], "modelbridge (ax.modelbridge.transforms.task_encode.taskencode attribute)": [[8, "ax.modelbridge.transforms.task_encode.TaskEncode.modelbridge"]], "modelbridge (ax.modelbridge.transforms.trial_as_task.trialastask attribute)": [[8, "ax.modelbridge.transforms.trial_as_task.TrialAsTask.modelbridge"]], "name (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.name"]], "node_name (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.node_name"]], "norm_to_lognorm() (in module ax.modelbridge.transforms.log_y)": [[8, "ax.modelbridge.transforms.log_y.norm_to_lognorm"]], "not_saved_model_kwargs (ax.modelbridge.registry.modelsetup attribute)": [[8, "ax.modelbridge.registry.ModelSetup.not_saved_model_kwargs"]], "num_trials (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.num_trials"]], "observation_data_to_array() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.observation_data_to_array"]], "observation_features (ax.modelbridge.base.genresults attribute)": [[8, "ax.modelbridge.base.GenResults.observation_features"]], "observation_features_to_array() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.observation_features_to_array"]], "observed (ax.modelbridge.cross_validation.cvresult attribute)": [[8, "ax.modelbridge.cross_validation.CVResult.observed"]], "observed_hypervolume() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.observed_hypervolume"]], "observed_pareto_frontier() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.observed_pareto_frontier"]], "optimization_complete (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.optimization_complete"]], "optimization_config (ax.modelbridge.base.basegenargs attribute)": [[8, "ax.modelbridge.base.BaseGenArgs.optimization_config"]], "outcomes (ax.modelbridge.discrete.discretemodelbridge attribute)": [[8, "ax.modelbridge.discrete.DiscreteModelBridge.outcomes"]], "outcomes (ax.modelbridge.map_torch.maptorchmodelbridge attribute)": [[8, "ax.modelbridge.map_torch.MapTorchModelBridge.outcomes"]], "outcomes (ax.modelbridge.pairwise.pairwisemodelbridge attribute)": [[8, "ax.modelbridge.pairwise.PairwiseModelBridge.outcomes"]], "outcomes (ax.modelbridge.torch.torchmodelbridge attribute)": [[8, "ax.modelbridge.torch.TorchModelBridge.outcomes"]], "parameters (ax.modelbridge.discrete.discretemodelbridge attribute)": [[8, "ax.modelbridge.discrete.DiscreteModelBridge.parameters"]], "parameters (ax.modelbridge.map_torch.maptorchmodelbridge attribute)": [[8, "ax.modelbridge.map_torch.MapTorchModelBridge.parameters"]], "parameters (ax.modelbridge.pairwise.pairwisemodelbridge attribute)": [[8, "ax.modelbridge.pairwise.PairwiseModelBridge.parameters"]], "parameters (ax.modelbridge.torch.torchmodelbridge attribute)": [[8, "ax.modelbridge.torch.TorchModelBridge.parameters"]], "parameters_with_map_keys (ax.modelbridge.map_torch.maptorchmodelbridge property)": [[8, "ax.modelbridge.map_torch.MapTorchModelBridge.parameters_with_map_keys"]], "pareto_frontier() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.pareto_frontier"]], "parse_observation_features() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.parse_observation_features"]], "pending_observations (ax.modelbridge.base.basegenargs attribute)": [[8, "ax.modelbridge.base.BaseGenArgs.pending_observations"]], "pending_observations_as_array_list() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.pending_observations_as_array_list"]], "predict() (ax.modelbridge.base.modelbridge method)": [[8, "ax.modelbridge.base.ModelBridge.predict"]], "predict_at_point() (in module ax.modelbridge.prediction_utils)": [[8, "ax.modelbridge.prediction_utils.predict_at_point"]], "predict_by_features() (in module ax.modelbridge.prediction_utils)": [[8, "ax.modelbridge.prediction_utils.predict_by_features"]], "predicted (ax.modelbridge.cross_validation.cvresult attribute)": [[8, "ax.modelbridge.cross_validation.CVResult.predicted"]], "predicted_hypervolume() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.predicted_hypervolume"]], "predicted_pareto_frontier() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.predicted_pareto_frontier"]], "process_contextual_datasets() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.process_contextual_datasets"]], "randomized_onehot_round() (in module ax.modelbridge.transforms.rounding)": [[8, "ax.modelbridge.transforms.rounding.randomized_onehot_round"]], "randomized_round() (in module ax.modelbridge.transforms.rounding)": [[8, "ax.modelbridge.transforms.rounding.randomized_round"]], "randomized_round_parameters() (in module ax.modelbridge.transforms.rounding)": [[8, "ax.modelbridge.transforms.rounding.randomized_round_parameters"]], "search_space (ax.modelbridge.base.basegenargs attribute)": [[8, "ax.modelbridge.base.BaseGenArgs.search_space"]], "search_space (ax.modelbridge.discrete.discretemodelbridge attribute)": [[8, "ax.modelbridge.discrete.DiscreteModelBridge.search_space"]], "should_deduplicate (ax.modelbridge.generation_node.generationnode attribute)": [[8, "ax.modelbridge.generation_node.GenerationNode.should_deduplicate"]], "should_deduplicate (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.should_deduplicate"]], "should_transition_to_next_node() (ax.modelbridge.generation_node.generationnode method)": [[8, "ax.modelbridge.generation_node.GenerationNode.should_transition_to_next_node"]], "standard_bridge_kwargs (ax.modelbridge.registry.modelsetup attribute)": [[8, "ax.modelbridge.registry.ModelSetup.standard_bridge_kwargs"]], "status_quo (ax.modelbridge.base.modelbridge property)": [[8, "ax.modelbridge.base.ModelBridge.status_quo"]], "status_quo_data_by_trial (ax.modelbridge.base.modelbridge property)": [[8, "ax.modelbridge.base.ModelBridge.status_quo_data_by_trial"]], "step_based_gs_only() (in module ax.modelbridge.generation_strategy)": [[8, "ax.modelbridge.generation_strategy.step_based_gs_only"]], "strict_onehot_round() (in module ax.modelbridge.transforms.rounding)": [[8, "ax.modelbridge.transforms.rounding.strict_onehot_round"]], "target_lb (ax.modelbridge.transforms.centered_unit_x.centeredunitx attribute)": [[8, "ax.modelbridge.transforms.centered_unit_x.CenteredUnitX.target_lb"]], "target_lb (ax.modelbridge.transforms.map_unit_x.mapunitx attribute)": [[8, "ax.modelbridge.transforms.map_unit_x.MapUnitX.target_lb"]], "target_lb (ax.modelbridge.transforms.unit_x.unitx attribute)": [[8, "ax.modelbridge.transforms.unit_x.UnitX.target_lb"]], "target_range (ax.modelbridge.transforms.centered_unit_x.centeredunitx attribute)": [[8, "ax.modelbridge.transforms.centered_unit_x.CenteredUnitX.target_range"]], "target_range (ax.modelbridge.transforms.map_unit_x.mapunitx attribute)": [[8, "ax.modelbridge.transforms.map_unit_x.MapUnitX.target_range"]], "target_range (ax.modelbridge.transforms.unit_x.unitx attribute)": [[8, "ax.modelbridge.transforms.unit_x.UnitX.target_range"]], "tconfig_from_mt_experiment() (in module ax.modelbridge.transforms.convert_metric_names)": [[8, "ax.modelbridge.transforms.convert_metric_names.tconfig_from_mt_experiment"]], "training_in_design (ax.modelbridge.base.modelbridge property)": [[8, "ax.modelbridge.base.ModelBridge.training_in_design"]], "transform() (ax.modelbridge.transforms.one_hot.onehotencoder method)": [[8, "ax.modelbridge.transforms.one_hot.OneHotEncoder.transform"]], "transform_callback() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.transform_callback"]], "transform_choice_values() (in module ax.modelbridge.transforms.choice_encode)": [[8, "ax.modelbridge.transforms.choice_encode.transform_choice_values"]], "transform_observation_features() (ax.modelbridge.base.modelbridge method)": [[8, "ax.modelbridge.base.ModelBridge.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.base.transform method)": [[8, "ax.modelbridge.transforms.base.Transform.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.cast.cast method)": [[8, "ax.modelbridge.transforms.cast.Cast.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.choice_encode.choiceencode method)": [[8, "ax.modelbridge.transforms.choice_encode.ChoiceEncode.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.int_to_float.inttofloat method)": [[8, "ax.modelbridge.transforms.int_to_float.IntToFloat.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.log.log method)": [[8, "ax.modelbridge.transforms.log.Log.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.logit.logit method)": [[8, "ax.modelbridge.transforms.logit.Logit.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.metrics_as_task.metricsastask method)": [[8, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.one_hot.onehot method)": [[8, "ax.modelbridge.transforms.one_hot.OneHot.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.remove_fixed.removefixed method)": [[8, "ax.modelbridge.transforms.remove_fixed.RemoveFixed.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.search_space_to_choice.searchspacetochoice method)": [[8, "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.trial_as_task.trialastask method)": [[8, "ax.modelbridge.transforms.trial_as_task.TrialAsTask.transform_observation_features"]], "transform_observation_features() (ax.modelbridge.transforms.unit_x.unitx method)": [[8, "ax.modelbridge.transforms.unit_x.UnitX.transform_observation_features"]], "transform_observations() (ax.modelbridge.base.modelbridge method)": [[8, "ax.modelbridge.base.ModelBridge.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.base.transform method)": [[8, "ax.modelbridge.transforms.base.Transform.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.merge_repeated_measurements.mergerepeatedmeasurements method)": [[8, "ax.modelbridge.transforms.merge_repeated_measurements.MergeRepeatedMeasurements.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.metrics_as_task.metricsastask method)": [[8, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.relativize.baserelativize method)": [[8, "ax.modelbridge.transforms.relativize.BaseRelativize.transform_observations"]], "transform_observations() (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey method)": [[8, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.transform_observations"]], "transform_optimization_config() (ax.modelbridge.transforms.base.transform method)": [[8, "ax.modelbridge.transforms.base.Transform.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.derelativize.derelativize method)": [[8, "ax.modelbridge.transforms.derelativize.Derelativize.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.log_y.logy method)": [[8, "ax.modelbridge.transforms.log_y.LogY.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.power_transform_y.powertransformy method)": [[8, "ax.modelbridge.transforms.power_transform_y.PowerTransformY.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.relativize.baserelativize method)": [[8, "ax.modelbridge.transforms.relativize.BaseRelativize.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.standardize_y.standardizey method)": [[8, "ax.modelbridge.transforms.standardize_y.StandardizeY.transform_optimization_config"]], "transform_optimization_config() (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey method)": [[8, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.transform_optimization_config"]], "transform_search_space() (ax.modelbridge.transforms.base.transform method)": [[8, "ax.modelbridge.transforms.base.Transform.transform_search_space"]], "transform_search_space() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.transform_search_space"]], "transforms (ax.modelbridge.map_torch.maptorchmodelbridge attribute)": [[8, "ax.modelbridge.map_torch.MapTorchModelBridge.transforms"]], "transforms (ax.modelbridge.pairwise.pairwisemodelbridge attribute)": [[8, "ax.modelbridge.pairwise.PairwiseModelBridge.transforms"]], "transforms (ax.modelbridge.registry.modelsetup attribute)": [[8, "ax.modelbridge.registry.ModelSetup.transforms"]], "transition_criteria (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.transition_criteria"]], "trials_as_df (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.trials_as_df"]], "trials_from_node (ax.modelbridge.generation_node.generationnode property)": [[8, "ax.modelbridge.generation_node.GenerationNode.trials_from_node"]], "untransform_observation_features() (ax.modelbridge.transforms.base.transform method)": [[8, "ax.modelbridge.transforms.base.Transform.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.cast.cast method)": [[8, "ax.modelbridge.transforms.cast.Cast.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.choice_encode.choiceencode method)": [[8, "ax.modelbridge.transforms.choice_encode.ChoiceEncode.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.int_to_float.inttofloat method)": [[8, "ax.modelbridge.transforms.int_to_float.IntToFloat.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.log.log method)": [[8, "ax.modelbridge.transforms.log.Log.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.logit.logit method)": [[8, "ax.modelbridge.transforms.logit.Logit.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.map_unit_x.mapunitx method)": [[8, "ax.modelbridge.transforms.map_unit_x.MapUnitX.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.metrics_as_task.metricsastask method)": [[8, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.one_hot.onehot method)": [[8, "ax.modelbridge.transforms.one_hot.OneHot.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.remove_fixed.removefixed method)": [[8, "ax.modelbridge.transforms.remove_fixed.RemoveFixed.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.search_space_to_choice.searchspacetochoice method)": [[8, "ax.modelbridge.transforms.search_space_to_choice.SearchSpaceToChoice.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.trial_as_task.trialastask method)": [[8, "ax.modelbridge.transforms.trial_as_task.TrialAsTask.untransform_observation_features"]], "untransform_observation_features() (ax.modelbridge.transforms.unit_x.unitx method)": [[8, "ax.modelbridge.transforms.unit_x.UnitX.untransform_observation_features"]], "untransform_observations() (ax.modelbridge.transforms.base.transform method)": [[8, "ax.modelbridge.transforms.base.Transform.untransform_observations"]], "untransform_observations() (ax.modelbridge.transforms.convert_metric_names.convertmetricnames method)": [[8, "ax.modelbridge.transforms.convert_metric_names.ConvertMetricNames.untransform_observations"]], "untransform_observations() (ax.modelbridge.transforms.metrics_as_task.metricsastask method)": [[8, "ax.modelbridge.transforms.metrics_as_task.MetricsAsTask.untransform_observations"]], "untransform_observations() (ax.modelbridge.transforms.relativize.baserelativize method)": [[8, "ax.modelbridge.transforms.relativize.BaseRelativize.untransform_observations"]], "untransform_observations() (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey method)": [[8, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.untransform_observations"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.base.transform method)": [[8, "ax.modelbridge.transforms.base.Transform.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.derelativize.derelativize method)": [[8, "ax.modelbridge.transforms.derelativize.Derelativize.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.log_y.logy method)": [[8, "ax.modelbridge.transforms.log_y.LogY.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.power_transform_y.powertransformy method)": [[8, "ax.modelbridge.transforms.power_transform_y.PowerTransformY.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.relativize.baserelativize method)": [[8, "ax.modelbridge.transforms.relativize.BaseRelativize.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.standardize_y.standardizey method)": [[8, "ax.modelbridge.transforms.standardize_y.StandardizeY.untransform_outcome_constraints"]], "untransform_outcome_constraints() (ax.modelbridge.transforms.stratified_standardize_y.stratifiedstandardizey method)": [[8, "ax.modelbridge.transforms.stratified_standardize_y.StratifiedStandardizeY.untransform_outcome_constraints"]], "unwrap_observation_data() (in module ax.modelbridge.base)": [[8, "ax.modelbridge.base.unwrap_observation_data"]], "update() (ax.modelbridge.base.modelbridge method)": [[8, "ax.modelbridge.base.ModelBridge.update"]], "use_update (ax.modelbridge.generation_node.generationstep attribute)": [[8, "ax.modelbridge.generation_node.GenerationStep.use_update"]], "uses_non_registered_models (ax.modelbridge.generation_strategy.generationstrategy property)": [[8, "ax.modelbridge.generation_strategy.GenerationStrategy.uses_non_registered_models"]], "validate_and_apply_final_transform() (in module ax.modelbridge.modelbridge_utils)": [[8, "ax.modelbridge.modelbridge_utils.validate_and_apply_final_transform"]], "validate_optimization_config() (in module ax.modelbridge.torch)": [[8, "ax.modelbridge.torch.validate_optimization_config"]], "view_defaults() (ax.modelbridge.registry.modelregistrybase method)": [[8, "ax.modelbridge.registry.ModelRegistryBase.view_defaults"]], "view_kwargs() (ax.modelbridge.registry.modelregistrybase method)": [[8, "ax.modelbridge.registry.ModelRegistryBase.view_kwargs"]], "weights (ax.modelbridge.base.genresults attribute)": [[8, "ax.modelbridge.base.GenResults.weights"]], "alebo (class in ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.ALEBO"]], "alebogp (class in ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.ALEBOGP"]], "aleboinitializer (class in ax.models.random.alebo_initializer)": [[9, "ax.models.random.alebo_initializer.ALEBOInitializer"]], "alebokernel (class in ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.ALEBOKernel"]], "acquisition (class in ax.models.torch.botorch_modular.acquisition)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition"]], "botorchmodel (class in ax.models.torch.botorch_modular.model)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel"]], "botorchmodel (class in ax.models.torch.botorch)": [[9, "ax.models.torch.botorch.BotorchModel"]], "discretemodel (class in ax.models.discrete_base)": [[9, "ax.models.discrete_base.DiscreteModel"]], "empiricalbayesthompsonsampler (class in ax.models.discrete.eb_thompson)": [[9, "ax.models.discrete.eb_thompson.EmpiricalBayesThompsonSampler"]], "fullfactorialgenerator (class in ax.models.discrete.full_factorial)": [[9, "ax.models.discrete.full_factorial.FullFactorialGenerator"]], "fullybayesianbotorchmodel (class in ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.FullyBayesianBotorchModel"]], "fullybayesianbotorchmodelmixin (class in ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.FullyBayesianBotorchModelMixin"]], "fullybayesianmoobotorchmodel (class in ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.FullyBayesianMOOBotorchModel"]], "knowledgegradient (class in ax.models.torch.botorch_kg)": [[9, "ax.models.torch.botorch_kg.KnowledgeGradient"]], "l1_norm_func() (in module ax.models.torch.botorch_modular.sebo)": [[9, "ax.models.torch.botorch_modular.sebo.L1_norm_func"]], "lceabo (class in ax.models.torch.cbo_lcea)": [[9, "ax.models.torch.cbo_lcea.LCEABO"]], "lcembo (class in ax.models.torch.cbo_lcem)": [[9, "ax.models.torch.cbo_lcem.LCEMBO"]], "maxvalueentropysearch (class in ax.models.torch.botorch_mes)": [[9, "ax.models.torch.botorch_mes.MaxValueEntropySearch"]], "model (class in ax.models.base)": [[9, "ax.models.base.Model"]], "multifidelityacquisition (class in ax.models.torch.botorch_modular.multi_fidelity)": [[9, "ax.models.torch.botorch_modular.multi_fidelity.MultiFidelityAcquisition"]], "multiobjectivebotorchmodel (class in ax.models.torch.botorch_moo)": [[9, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel"]], "rembo (class in ax.models.torch.rembo)": [[9, "ax.models.torch.rembo.REMBO"]], "remboinitializer (class in ax.models.random.rembo_initializer)": [[9, "ax.models.random.rembo_initializer.REMBOInitializer"]], "randomforest (class in ax.models.torch.randomforest)": [[9, "ax.models.torch.randomforest.RandomForest"]], "randommodel (class in ax.models.random.base)": [[9, "ax.models.random.base.RandomModel"]], "sacbo (class in ax.models.torch.cbo_sac)": [[9, "ax.models.torch.cbo_sac.SACBO"]], "seboacquisition (class in ax.models.torch.botorch_modular.sebo)": [[9, "ax.models.torch.botorch_modular.sebo.SEBOAcquisition"]], "scalematernkernel (class in ax.models.torch.botorch_modular.kernels)": [[9, "ax.models.torch.botorch_modular.kernels.ScaleMaternKernel"]], "sobolgenerator (class in ax.models.random.sobol)": [[9, "ax.models.random.sobol.SobolGenerator"]], "subsetmodeldata (class in ax.models.torch.utils)": [[9, "ax.models.torch.utils.SubsetModelData"]], "surrogate (class in ax.models.torch.botorch_modular.surrogate)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate"]], "surrogatespec (class in ax.models.torch.botorch_modular.model)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec"]], "tacqfconstructor (class in ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.TAcqfConstructor"]], "temporalkernel (class in ax.models.torch.botorch_modular.kernels)": [[9, "ax.models.torch.botorch_modular.kernels.TemporalKernel"]], "thompsonsampler (class in ax.models.discrete.thompson)": [[9, "ax.models.discrete.thompson.ThompsonSampler"]], "torchgenresults (class in ax.models.torch_base)": [[9, "ax.models.torch_base.TorchGenResults"]], "torchmodel (class in ax.models.torch_base)": [[9, "ax.models.torch_base.TorchModel"]], "torchmodellike (class in ax.models.model_utils)": [[9, "ax.models.model_utils.TorchModelLike"]], "torchoptconfig (class in ax.models.torch_base)": [[9, "ax.models.torch_base.TorchOptConfig"]], "uniformgenerator (class in ax.models.random.uniform)": [[9, "ax.models.random.uniform.UniformGenerator"]], "winsorizationconfig (class in ax.models.winsorization_config)": [[9, "ax.models.winsorization_config.WinsorizationConfig"]], "x_observed (ax.models.torch.botorch_modular.multi_fidelity.multifidelityacquisition attribute)": [[9, "ax.models.torch.botorch_modular.multi_fidelity.MultiFidelityAcquisition.X_observed"]], "x_observed (ax.models.torch.botorch_modular.sebo.seboacquisition attribute)": [[9, "ax.models.torch.botorch_modular.sebo.SEBOAcquisition.X_observed"]], "x_pending (ax.models.torch.botorch_modular.multi_fidelity.multifidelityacquisition attribute)": [[9, "ax.models.torch.botorch_modular.multi_fidelity.MultiFidelityAcquisition.X_pending"]], "x_pending (ax.models.torch.botorch_modular.sebo.seboacquisition attribute)": [[9, "ax.models.torch.botorch_modular.sebo.SEBOAcquisition.X_pending"]], "xs (ax.models.torch.alebo.alebo attribute)": [[9, "ax.models.torch.alebo.ALEBO.Xs"]], "xs (ax.models.torch.botorch.botorchmodel attribute)": [[9, "ax.models.torch.botorch.BotorchModel.Xs"]], "xs (ax.models.torch.botorch_kg.knowledgegradient attribute)": [[9, "ax.models.torch.botorch_kg.KnowledgeGradient.Xs"]], "xs (ax.models.torch.botorch_mes.maxvalueentropysearch attribute)": [[9, "ax.models.torch.botorch_mes.MaxValueEntropySearch.Xs"]], "xs (ax.models.torch.botorch_modular.model.botorchmodel property)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.Xs"]], "xs (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.Xs"]], "xs (ax.models.torch.botorch_moo.multiobjectivebotorchmodel attribute)": [[9, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel.Xs"]], "xs (ax.models.torch.cbo_lcea.lceabo attribute)": [[9, "ax.models.torch.cbo_lcea.LCEABO.Xs"]], "xs (ax.models.torch.cbo_lcem.lcembo attribute)": [[9, "ax.models.torch.cbo_lcem.LCEMBO.Xs"]], "xs (ax.models.torch.cbo_sac.sacbo attribute)": [[9, "ax.models.torch.cbo_sac.SACBO.Xs"]], "xs (ax.models.torch.rembo.rembo attribute)": [[9, "ax.models.torch.rembo.REMBO.Xs"]], "ys (ax.models.torch.alebo.alebo attribute)": [[9, "ax.models.torch.alebo.ALEBO.Ys"]], "ys (ax.models.torch.botorch.botorchmodel attribute)": [[9, "ax.models.torch.botorch.BotorchModel.Ys"]], "ys (ax.models.torch.botorch_kg.knowledgegradient attribute)": [[9, "ax.models.torch.botorch_kg.KnowledgeGradient.Ys"]], "ys (ax.models.torch.botorch_mes.maxvalueentropysearch attribute)": [[9, "ax.models.torch.botorch_mes.MaxValueEntropySearch.Ys"]], "ys (ax.models.torch.botorch_moo.multiobjectivebotorchmodel attribute)": [[9, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel.Ys"]], "ys (ax.models.torch.cbo_lcea.lceabo attribute)": [[9, "ax.models.torch.cbo_lcea.LCEABO.Ys"]], "ys (ax.models.torch.cbo_lcem.lcembo attribute)": [[9, "ax.models.torch.cbo_lcem.LCEMBO.Ys"]], "ys (ax.models.torch.cbo_sac.sacbo attribute)": [[9, "ax.models.torch.cbo_sac.SACBO.Ys"]], "ys (ax.models.torch.rembo.rembo attribute)": [[9, "ax.models.torch.rembo.REMBO.Ys"]], "yvars (ax.models.torch.alebo.alebo attribute)": [[9, "ax.models.torch.alebo.ALEBO.Yvars"]], "yvars (ax.models.torch.botorch.botorchmodel attribute)": [[9, "ax.models.torch.botorch.BotorchModel.Yvars"]], "yvars (ax.models.torch.botorch_kg.knowledgegradient attribute)": [[9, "ax.models.torch.botorch_kg.KnowledgeGradient.Yvars"]], "yvars (ax.models.torch.botorch_mes.maxvalueentropysearch attribute)": [[9, "ax.models.torch.botorch_mes.MaxValueEntropySearch.Yvars"]], "yvars (ax.models.torch.botorch_moo.multiobjectivebotorchmodel attribute)": [[9, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel.Yvars"]], "yvars (ax.models.torch.cbo_lcea.lceabo attribute)": [[9, "ax.models.torch.cbo_lcea.LCEABO.Yvars"]], "yvars (ax.models.torch.cbo_lcem.lcembo attribute)": [[9, "ax.models.torch.cbo_lcem.LCEMBO.Yvars"]], "yvars (ax.models.torch.cbo_sac.sacbo attribute)": [[9, "ax.models.torch.cbo_sac.SACBO.Yvars"]], "yvars (ax.models.torch.rembo.rembo attribute)": [[9, "ax.models.torch.rembo.REMBO.Yvars"]], "acqf (ax.models.torch.botorch_modular.acquisition.acquisition attribute)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.acqf"]], "acqf (ax.models.torch.botorch_modular.multi_fidelity.multifidelityacquisition attribute)": [[9, "ax.models.torch.botorch_modular.multi_fidelity.MultiFidelityAcquisition.acqf"]], "acqf (ax.models.torch.botorch_modular.sebo.seboacquisition attribute)": [[9, "ax.models.torch.botorch_modular.sebo.SEBOAcquisition.acqf"]], "acquisition_class (ax.models.torch.botorch_modular.model.botorchmodel attribute)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.acquisition_class"]], "acquisition_options (ax.models.torch.botorch_modular.model.botorchmodel attribute)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.acquisition_options"]], "add_fixed_features() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.add_fixed_features"]], "alebo_acqf_optimizer() (in module ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.alebo_acqf_optimizer"]], "allow_batched_models (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.allow_batched_models"]], "as_array() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.as_array"]], "ax.models": [[9, "module-ax.models"]], "ax.models.base": [[9, "module-ax.models.base"]], "ax.models.discrete.eb_thompson": [[9, "module-ax.models.discrete.eb_thompson"]], "ax.models.discrete.full_factorial": [[9, "module-ax.models.discrete.full_factorial"]], "ax.models.discrete.thompson": [[9, "module-ax.models.discrete.thompson"]], "ax.models.discrete_base": [[9, "module-ax.models.discrete_base"]], "ax.models.model_utils": [[9, "module-ax.models.model_utils"]], "ax.models.random.alebo_initializer": [[9, "module-ax.models.random.alebo_initializer"]], "ax.models.random.base": [[9, "module-ax.models.random.base"]], "ax.models.random.rembo_initializer": [[9, "module-ax.models.random.rembo_initializer"]], "ax.models.random.sobol": [[9, "module-ax.models.random.sobol"]], "ax.models.random.uniform": [[9, "module-ax.models.random.uniform"]], "ax.models.torch.alebo": [[9, "module-ax.models.torch.alebo"]], "ax.models.torch.botorch": [[9, "module-ax.models.torch.botorch"]], "ax.models.torch.botorch_defaults": [[9, "module-ax.models.torch.botorch_defaults"]], "ax.models.torch.botorch_kg": [[9, "module-ax.models.torch.botorch_kg"]], "ax.models.torch.botorch_mes": [[9, "module-ax.models.torch.botorch_mes"]], "ax.models.torch.botorch_modular.acquisition": [[9, "module-ax.models.torch.botorch_modular.acquisition"]], "ax.models.torch.botorch_modular.input_constructors.covar_modules": [[9, "module-ax.models.torch.botorch_modular.input_constructors.covar_modules"]], "ax.models.torch.botorch_modular.input_constructors.input_transforms": [[9, "module-ax.models.torch.botorch_modular.input_constructors.input_transforms"]], "ax.models.torch.botorch_modular.input_constructors.outcome_transform": [[9, "module-ax.models.torch.botorch_modular.input_constructors.outcome_transform"]], "ax.models.torch.botorch_modular.kernels": [[9, "module-ax.models.torch.botorch_modular.kernels"]], "ax.models.torch.botorch_modular.model": [[9, "module-ax.models.torch.botorch_modular.model"]], "ax.models.torch.botorch_modular.multi_fidelity": [[9, "module-ax.models.torch.botorch_modular.multi_fidelity"]], "ax.models.torch.botorch_modular.optimizer_argparse": [[9, "module-ax.models.torch.botorch_modular.optimizer_argparse"]], "ax.models.torch.botorch_modular.sebo": [[9, "module-ax.models.torch.botorch_modular.sebo"]], "ax.models.torch.botorch_modular.surrogate": [[9, "module-ax.models.torch.botorch_modular.surrogate"]], "ax.models.torch.botorch_modular.utils": [[9, "module-ax.models.torch.botorch_modular.utils"]], "ax.models.torch.botorch_moo": [[9, "module-ax.models.torch.botorch_moo"]], "ax.models.torch.botorch_moo_defaults": [[9, "module-ax.models.torch.botorch_moo_defaults"]], "ax.models.torch.cbo_lcea": [[9, "module-ax.models.torch.cbo_lcea"]], "ax.models.torch.cbo_lcem": [[9, "module-ax.models.torch.cbo_lcem"]], "ax.models.torch.cbo_sac": [[9, "module-ax.models.torch.cbo_sac"]], "ax.models.torch.frontier_utils": [[9, "module-ax.models.torch.frontier_utils"]], "ax.models.torch.fully_bayesian": [[9, "module-ax.models.torch.fully_bayesian"]], "ax.models.torch.fully_bayesian_model_utils": [[9, "module-ax.models.torch.fully_bayesian_model_utils"]], "ax.models.torch.posterior_mean": [[9, "module-ax.models.torch.posterior_mean"]], "ax.models.torch.randomforest": [[9, "module-ax.models.torch.randomforest"]], "ax.models.torch.rembo": [[9, "module-ax.models.torch.rembo"]], "ax.models.torch.utils": [[9, "module-ax.models.torch.utils"]], "ax.models.torch_base": [[9, "module-ax.models.torch_base"]], "ax.models.types": [[9, "module-ax.models.types"]], "ax.models.winsorization_config": [[9, "module-ax.models.winsorization_config"]], "best_in_sample_point() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.best_in_sample_point"]], "best_in_sample_point() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.best_in_sample_point"]], "best_observed_point() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.best_observed_point"]], "best_out_of_sample_point() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.best_out_of_sample_point"]], "best_point() (ax.models.discrete_base.discretemodel method)": [[9, "ax.models.discrete_base.DiscreteModel.best_point"]], "best_point() (ax.models.torch.alebo.alebo method)": [[9, "ax.models.torch.alebo.ALEBO.best_point"]], "best_point() (ax.models.torch.botorch.botorchmodel method)": [[9, "ax.models.torch.botorch.BotorchModel.best_point"]], "best_point() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.best_point"]], "best_point() (ax.models.torch.cbo_lcea.lceabo method)": [[9, "ax.models.torch.cbo_lcea.LCEABO.best_point"]], "best_point() (ax.models.torch.rembo.rembo method)": [[9, "ax.models.torch.rembo.REMBO.best_point"]], "best_point() (ax.models.torch_base.torchmodel method)": [[9, "ax.models.torch_base.TorchModel.best_point"]], "botorch_acqf_class (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.botorch_acqf_class"]], "botorch_acqf_class (ax.models.torch.botorch_modular.model.botorchmodel property)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.botorch_acqf_class"]], "botorch_model_class (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.botorch_model_class"]], "botorch_model_kwargs (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.botorch_model_kwargs"]], "candidate_metadata (ax.models.torch_base.torchgenresults attribute)": [[9, "ax.models.torch_base.TorchGenResults.candidate_metadata"]], "check_duplicate() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.check_duplicate"]], "check_outcome_dataset_match() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.check_outcome_dataset_match"]], "check_param_constraints() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.check_param_constraints"]], "choose_botorch_acqf_class() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.choose_botorch_acqf_class"]], "choose_model_class() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.choose_model_class"]], "clamp_candidates() (in module ax.models.torch.botorch_modular.sebo)": [[9, "ax.models.torch.botorch_modular.sebo.clamp_candidates"]], "clone_reset() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.clone_reset"]], "compute_diagnostics() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.compute_diagnostics"]], "compute_dists() (in module ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.compute_dists"]], "compute_model_dependencies() (ax.models.torch.botorch_modular.acquisition.acquisition method)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.compute_model_dependencies"]], "compute_model_dependencies() (ax.models.torch.botorch_modular.multi_fidelity.multifidelityacquisition method)": [[9, "ax.models.torch.botorch_modular.multi_fidelity.MultiFidelityAcquisition.compute_model_dependencies"]], "construct_acquisition_and_optimizer_options() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.construct_acquisition_and_optimizer_options"]], "convert_to_block_design() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.convert_to_block_design"]], "covar_module_class (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.covar_module_class"]], "covar_module_kwargs (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.covar_module_kwargs"]], "cross_validate() (ax.models.discrete_base.discretemodel method)": [[9, "ax.models.discrete_base.DiscreteModel.cross_validate"]], "cross_validate() (ax.models.torch.alebo.alebo method)": [[9, "ax.models.torch.alebo.ALEBO.cross_validate"]], "cross_validate() (ax.models.torch.botorch.botorchmodel method)": [[9, "ax.models.torch.botorch.BotorchModel.cross_validate"]], "cross_validate() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.cross_validate"]], "cross_validate() (ax.models.torch.randomforest.randomforest method)": [[9, "ax.models.torch.randomforest.RandomForest.cross_validate"]], "cross_validate() (ax.models.torch.rembo.rembo method)": [[9, "ax.models.torch.rembo.REMBO.cross_validate"]], "cross_validate() (ax.models.torch_base.torchmodel method)": [[9, "ax.models.torch_base.TorchModel.cross_validate"]], "deduplicate (ax.models.random.base.randommodel attribute)": [[9, "ax.models.random.base.RandomModel.deduplicate"]], "deserialize_state() (ax.models.base.model class method)": [[9, "ax.models.base.Model.deserialize_state"]], "device (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.device"]], "device (ax.models.torch.botorch_modular.model.botorchmodel property)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.device"]], "device (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.device"]], "device (ax.models.torch_base.torchmodel attribute)": [[9, "ax.models.torch_base.TorchModel.device"]], "dtype (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.dtype"]], "dtype (ax.models.torch.botorch_modular.model.botorchmodel property)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.dtype"]], "dtype (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.dtype"]], "dtype (ax.models.torch_base.torchmodel attribute)": [[9, "ax.models.torch_base.TorchModel.dtype"]], "ei_or_nei() (in module ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.ei_or_nei"]], "engine (ax.models.random.sobol.sobolgenerator property)": [[9, "ax.models.random.sobol.SobolGenerator.engine"]], "enumerate_discrete_combinations() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.enumerate_discrete_combinations"]], "evaluate() (ax.models.torch.botorch_modular.acquisition.acquisition method)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.evaluate"]], "evaluate_acquisition_function() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.evaluate_acquisition_function"]], "evaluate_acquisition_function() (ax.models.torch_base.torchmodel method)": [[9, "ax.models.torch_base.TorchModel.evaluate_acquisition_function"]], "extract_map_statedict() (in module ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.extract_map_statedict"]], "fallback_to_sample_polytope (ax.models.random.base.randommodel attribute)": [[9, "ax.models.random.base.RandomModel.fallback_to_sample_polytope"]], "feature_importances() (ax.models.base.model method)": [[9, "ax.models.base.Model.feature_importances"]], "feature_importances() (ax.models.torch.botorch.botorchmodel method)": [[9, "ax.models.torch.botorch.BotorchModel.feature_importances"]], "feature_importances() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.feature_importances"]], "feature_importances() (ax.models.torch.fully_bayesian.fullybayesianbotorchmodelmixin method)": [[9, "ax.models.torch.fully_bayesian.FullyBayesianBotorchModelMixin.feature_importances"]], "fidelity_features (ax.models.torch.botorch_kg.knowledgegradient attribute)": [[9, "ax.models.torch.botorch_kg.KnowledgeGradient.fidelity_features"]], "fidelity_features (ax.models.torch.botorch_mes.maxvalueentropysearch attribute)": [[9, "ax.models.torch.botorch_mes.MaxValueEntropySearch.fidelity_features"]], "fidelity_features (ax.models.torch.cbo_lcea.lceabo attribute)": [[9, "ax.models.torch.cbo_lcea.LCEABO.fidelity_features"]], "fidelity_features (ax.models.torch.cbo_lcem.lcembo attribute)": [[9, "ax.models.torch.cbo_lcem.LCEMBO.fidelity_features"]], "fidelity_features (ax.models.torch.cbo_sac.sacbo attribute)": [[9, "ax.models.torch.cbo_sac.SACBO.fidelity_features"]], "fidelity_features (ax.models.torch.rembo.rembo attribute)": [[9, "ax.models.torch.rembo.REMBO.fidelity_features"]], "filter_constraints_and_fixed_features() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.filter_constraints_and_fixed_features"]], "fit() (ax.models.discrete.thompson.thompsonsampler method)": [[9, "ax.models.discrete.thompson.ThompsonSampler.fit"]], "fit() (ax.models.discrete_base.discretemodel method)": [[9, "ax.models.discrete_base.DiscreteModel.fit"]], "fit() (ax.models.torch.alebo.alebo method)": [[9, "ax.models.torch.alebo.ALEBO.fit"]], "fit() (ax.models.torch.botorch.botorchmodel method)": [[9, "ax.models.torch.botorch.BotorchModel.fit"]], "fit() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.fit"]], "fit() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.fit"]], "fit() (ax.models.torch.cbo_lcea.lceabo method)": [[9, "ax.models.torch.cbo_lcea.LCEABO.fit"]], "fit() (ax.models.torch.cbo_sac.sacbo method)": [[9, "ax.models.torch.cbo_sac.SACBO.fit"]], "fit() (ax.models.torch.randomforest.randomforest method)": [[9, "ax.models.torch.randomforest.RandomForest.fit"]], "fit() (ax.models.torch.rembo.rembo method)": [[9, "ax.models.torch.rembo.REMBO.fit"]], "fit() (ax.models.torch_base.torchmodel method)": [[9, "ax.models.torch_base.TorchModel.fit"]], "fit_botorch_model() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.fit_botorch_model"]], "fixed_features (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.fixed_features"], [9, "id0"]], "forward() (ax.models.torch.alebo.alebokernel method)": [[9, "ax.models.torch.alebo.ALEBOKernel.forward"]], "from_01() (ax.models.torch.rembo.rembo method)": [[9, "ax.models.torch.rembo.REMBO.from_01"]], "gen() (ax.models.discrete.full_factorial.fullfactorialgenerator method)": [[9, "ax.models.discrete.full_factorial.FullFactorialGenerator.gen"]], "gen() (ax.models.discrete.thompson.thompsonsampler method)": [[9, "ax.models.discrete.thompson.ThompsonSampler.gen"]], "gen() (ax.models.discrete_base.discretemodel method)": [[9, "ax.models.discrete_base.DiscreteModel.gen"]], "gen() (ax.models.random.alebo_initializer.aleboinitializer method)": [[9, "ax.models.random.alebo_initializer.ALEBOInitializer.gen"]], "gen() (ax.models.random.base.randommodel method)": [[9, "ax.models.random.base.RandomModel.gen"]], "gen() (ax.models.random.rembo_initializer.remboinitializer method)": [[9, "ax.models.random.rembo_initializer.REMBOInitializer.gen"]], "gen() (ax.models.random.sobol.sobolgenerator method)": [[9, "ax.models.random.sobol.SobolGenerator.gen"]], "gen() (ax.models.torch.alebo.alebo method)": [[9, "ax.models.torch.alebo.ALEBO.gen"]], "gen() (ax.models.torch.botorch.botorchmodel method)": [[9, "ax.models.torch.botorch.BotorchModel.gen"]], "gen() (ax.models.torch.botorch_kg.knowledgegradient method)": [[9, "ax.models.torch.botorch_kg.KnowledgeGradient.gen"]], "gen() (ax.models.torch.botorch_mes.maxvalueentropysearch method)": [[9, "ax.models.torch.botorch_mes.MaxValueEntropySearch.gen"]], "gen() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.gen"]], "gen() (ax.models.torch.botorch_moo.multiobjectivebotorchmodel method)": [[9, "ax.models.torch.botorch_moo.MultiObjectiveBotorchModel.gen"]], "gen() (ax.models.torch.rembo.rembo method)": [[9, "ax.models.torch.rembo.REMBO.gen"]], "gen() (ax.models.torch_base.torchmodel method)": [[9, "ax.models.torch_base.TorchModel.gen"]], "gen_metadata (ax.models.torch_base.torchgenresults attribute)": [[9, "ax.models.torch_base.TorchGenResults.gen_metadata"]], "generate_model_space_decomposition() (in module ax.models.torch.cbo_sac)": [[9, "ax.models.torch.cbo_sac.generate_model_space_decomposition"]], "generated_points (ax.models.random.base.randommodel attribute)": [[9, "ax.models.random.base.RandomModel.generated_points"]], "get_ehvi() (in module ax.models.torch.botorch_moo_defaults)": [[9, "ax.models.torch.botorch_moo_defaults.get_EHVI"]], "get_nehvi() (in module ax.models.torch.botorch_moo_defaults)": [[9, "ax.models.torch.botorch_moo_defaults.get_NEHVI"]], "get_nei() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.get_NEI"]], "get_posteriormean() (in module ax.models.torch.posterior_mean)": [[9, "ax.models.torch.posterior_mean.get_PosteriorMean"]], "get_acqf() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.get_acqf"]], "get_and_fit_model() (ax.models.torch.alebo.alebo method)": [[9, "ax.models.torch.alebo.ALEBO.get_and_fit_model"]], "get_and_fit_model() (ax.models.torch.cbo_lcea.lceabo method)": [[9, "ax.models.torch.cbo_lcea.LCEABO.get_and_fit_model"]], "get_and_fit_model() (ax.models.torch.cbo_lcem.lcembo method)": [[9, "ax.models.torch.cbo_lcem.LCEMBO.get_and_fit_model"]], "get_and_fit_model() (ax.models.torch.cbo_sac.sacbo method)": [[9, "ax.models.torch.cbo_sac.SACBO.get_and_fit_model"]], "get_and_fit_model() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.get_and_fit_model"]], "get_and_fit_model_mcmc() (in module ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.get_and_fit_model_mcmc"]], "get_batch_initial_conditions() (in module ax.models.torch.botorch_modular.sebo)": [[9, "ax.models.torch.botorch_modular.sebo.get_batch_initial_conditions"]], "get_batch_model() (in module ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.get_batch_model"]], "get_botorch_objective_and_transform() (ax.models.torch.botorch_modular.acquisition.acquisition method)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.get_botorch_objective_and_transform"]], "get_botorch_objective_and_transform() (in module ax.models.torch.utils)": [[9, "ax.models.torch.utils.get_botorch_objective_and_transform"]], "get_default_frontier_evaluator() (in module ax.models.torch.botorch_moo_defaults)": [[9, "ax.models.torch.botorch_moo_defaults.get_default_frontier_evaluator"]], "get_default_frontier_evaluator() (in module ax.models.torch.frontier_utils)": [[9, "ax.models.torch.frontier_utils.get_default_frontier_evaluator"]], "get_feature_importances_from_botorch_model() (in module ax.models.torch.botorch)": [[9, "ax.models.torch.botorch.get_feature_importances_from_botorch_model"]], "get_fitted_model() (in module ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.get_fitted_model"]], "get_fully_bayesian_acqf() (in module ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.get_fully_bayesian_acqf"]], "get_fully_bayesian_acqf_nehvi() (in module ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.get_fully_bayesian_acqf_nehvi"]], "get_map_model() (in module ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.get_map_model"]], "get_map_model() (in module ax.models.torch.cbo_lcea)": [[9, "ax.models.torch.cbo_lcea.get_map_model"]], "get_observed() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.get_observed"]], "get_out_of_sample_best_point_acqf() (in module ax.models.torch.utils)": [[9, "ax.models.torch.utils.get_out_of_sample_best_point_acqf"]], "get_post_processing_func() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.get_post_processing_func"]], "get_qei() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.get_qEI"]], "get_qlogehvi() (in module ax.models.torch.botorch_moo_defaults)": [[9, "ax.models.torch.botorch_moo_defaults.get_qLogEHVI"]], "get_qlogei() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.get_qLogEI"]], "get_qlognehvi() (in module ax.models.torch.botorch_moo_defaults)": [[9, "ax.models.torch.botorch_moo_defaults.get_qLogNEHVI"]], "get_qlognei() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.get_qLogNEI"]], "get_rounding_func() (in module ax.models.torch.botorch)": [[9, "ax.models.torch.botorch.get_rounding_func"]], "get_subset_datasets() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.get_subset_datasets"]], "get_warping_transform() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.get_warping_transform"]], "get_weighted_mc_objective_and_objective_thresholds() (in module ax.models.torch.botorch_moo_defaults)": [[9, "ax.models.torch.botorch_moo_defaults.get_weighted_mc_objective_and_objective_thresholds"]], "get_weighted_mc_objective_and_objective_thresholds() (in module ax.models.torch.frontier_utils)": [[9, "ax.models.torch.frontier_utils.get_weighted_mc_objective_and_objective_thresholds"]], "indices (ax.models.torch.utils.subsetmodeldata attribute)": [[9, "ax.models.torch.utils.SubsetModelData.indices"]], "infer_objective_thresholds() (in module ax.models.torch.botorch_moo_defaults)": [[9, "ax.models.torch.botorch_moo_defaults.infer_objective_thresholds"]], "init_engine() (ax.models.random.sobol.sobolgenerator method)": [[9, "ax.models.random.sobol.SobolGenerator.init_engine"]], "init_position (ax.models.random.sobol.sobolgenerator attribute)": [[9, "ax.models.random.sobol.SobolGenerator.init_position"]], "input_transform_classes (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.input_transform_classes"]], "input_transform_options (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.input_transform_options"]], "is_moo (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.is_moo"], [9, "id1"]], "is_noiseless() (in module ax.models.torch.utils)": [[9, "ax.models.torch.utils.is_noiseless"]], "laplace_sample_u() (in module ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.laplace_sample_U"]], "likelihood_class (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.likelihood_class"]], "likelihood_kwargs (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.likelihood_kwargs"]], "linear_constraints (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.linear_constraints"], [9, "id2"]], "load_mcmc_samples_to_model() (in module ax.models.torch.fully_bayesian_model_utils)": [[9, "ax.models.torch.fully_bayesian_model_utils.load_mcmc_samples_to_model"]], "lower_boundary (ax.models.winsorization_config.winsorizationconfig attribute)": [[9, "ax.models.winsorization_config.WinsorizationConfig.lower_boundary"]], "lower_quantile_margin (ax.models.winsorization_config.winsorizationconfig attribute)": [[9, "ax.models.winsorization_config.WinsorizationConfig.lower_quantile_margin"]], "matern_kernel() (in module ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.matern_kernel"]], "metric_names (ax.models.torch.botorch_kg.knowledgegradient attribute)": [[9, "ax.models.torch.botorch_kg.KnowledgeGradient.metric_names"]], "metric_names (ax.models.torch.botorch_mes.maxvalueentropysearch attribute)": [[9, "ax.models.torch.botorch_mes.MaxValueEntropySearch.metric_names"]], "metric_names (ax.models.torch.cbo_lcea.lceabo attribute)": [[9, "ax.models.torch.cbo_lcea.LCEABO.metric_names"]], "metric_names (ax.models.torch.cbo_lcem.lcembo attribute)": [[9, "ax.models.torch.cbo_lcem.LCEMBO.metric_names"]], "metric_names (ax.models.torch.cbo_sac.sacbo attribute)": [[9, "ax.models.torch.cbo_sac.SACBO.metric_names"]], "metric_names (ax.models.torch.rembo.rembo attribute)": [[9, "ax.models.torch.rembo.REMBO.metric_names"]], "mk_discrete_choices() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.mk_discrete_choices"]], "mll_class (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.mll_class"]], "mll_kwargs (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.mll_kwargs"]], "model (ax.models.torch.botorch.botorchmodel property)": [[9, "ax.models.torch.botorch.BotorchModel.model"]], "model (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.model"]], "model (ax.models.torch.cbo_lcea.lceabo property)": [[9, "ax.models.torch.cbo_lcea.LCEABO.model"]], "model (ax.models.torch.utils.subsetmodeldata attribute)": [[9, "ax.models.torch.utils.SubsetModelData.model"]], "model_gen_options (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.model_gen_options"], [9, "id3"]], "module_to_array() (in module ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.module_to_array"]], "normalize_indices() (in module ax.models.torch.utils)": [[9, "ax.models.torch.utils.normalize_indices"]], "objective_thresholds (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.objective_thresholds"]], "objective_thresholds (ax.models.torch.utils.subsetmodeldata attribute)": [[9, "ax.models.torch.utils.SubsetModelData.objective_thresholds"]], "objective_thresholds (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.objective_thresholds"], [9, "id4"]], "objective_weights (ax.models.torch.botorch_modular.acquisition.acquisition property)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.objective_weights"]], "objective_weights (ax.models.torch.utils.subsetmodeldata attribute)": [[9, "ax.models.torch.utils.SubsetModelData.objective_weights"]], "objective_weights (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.objective_weights"], [9, "id5"]], "opt_config_metrics (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.opt_config_metrics"], [9, "id6"]], "optimize() (ax.models.torch.botorch_modular.acquisition.acquisition method)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.optimize"]], "optimize() (ax.models.torch.botorch_modular.sebo.seboacquisition method)": [[9, "ax.models.torch.botorch_modular.sebo.SEBOAcquisition.optimize"]], "options (ax.models.torch.botorch_modular.acquisition.acquisition attribute)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.options"]], "options (ax.models.torch.botorch_modular.multi_fidelity.multifidelityacquisition attribute)": [[9, "ax.models.torch.botorch_modular.multi_fidelity.MultiFidelityAcquisition.options"]], "options (ax.models.torch.botorch_modular.sebo.seboacquisition attribute)": [[9, "ax.models.torch.botorch_modular.sebo.SEBOAcquisition.options"]], "outcome_constraints (ax.models.torch.utils.subsetmodeldata attribute)": [[9, "ax.models.torch.utils.SubsetModelData.outcome_constraints"]], "outcome_constraints (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.outcome_constraints"], [9, "id7"]], "outcome_transform_classes (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.outcome_transform_classes"]], "outcome_transform_options (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.outcome_transform_options"]], "outcomes (ax.models.torch.botorch_modular.model.surrogatespec attribute)": [[9, "ax.models.torch.botorch_modular.model.SurrogateSpec.outcomes"]], "outcomes (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.outcomes"]], "outcomes_by_surrogate_label (ax.models.torch.botorch_modular.model.botorchmodel property)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.outcomes_by_surrogate_label"]], "output_order (ax.models.torch.botorch_modular.model.botorchmodel property)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.output_order"]], "pareto_frontier() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.pareto_frontier"]], "pareto_frontier_evaluator() (in module ax.models.torch.botorch_moo_defaults)": [[9, "ax.models.torch.botorch_moo_defaults.pareto_frontier_evaluator"]], "pending_observations (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.pending_observations"], [9, "id8"]], "pick_best_out_of_sample_point_acqf_class() (in module ax.models.torch.utils)": [[9, "ax.models.torch.utils.pick_best_out_of_sample_point_acqf_class"]], "points (ax.models.torch_base.torchgenresults attribute)": [[9, "ax.models.torch_base.TorchGenResults.points"]], "posterior() (ax.models.torch.alebo.alebogp method)": [[9, "ax.models.torch.alebo.ALEBOGP.posterior"]], "predict() (ax.models.discrete.thompson.thompsonsampler method)": [[9, "ax.models.discrete.thompson.ThompsonSampler.predict"]], "predict() (ax.models.discrete_base.discretemodel method)": [[9, "ax.models.discrete_base.DiscreteModel.predict"]], "predict() (ax.models.model_utils.torchmodellike method)": [[9, "ax.models.model_utils.TorchModelLike.predict"]], "predict() (ax.models.torch.alebo.alebo method)": [[9, "ax.models.torch.alebo.ALEBO.predict"]], "predict() (ax.models.torch.botorch.botorchmodel method)": [[9, "ax.models.torch.botorch.BotorchModel.predict"]], "predict() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.predict"]], "predict() (ax.models.torch.botorch_modular.surrogate.surrogate method)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.predict"]], "predict() (ax.models.torch.randomforest.randomforest method)": [[9, "ax.models.torch.randomforest.RandomForest.predict"]], "predict() (ax.models.torch.rembo.rembo method)": [[9, "ax.models.torch.rembo.REMBO.predict"]], "predict() (ax.models.torch_base.torchmodel method)": [[9, "ax.models.torch_base.TorchModel.predict"]], "predict_from_model() (in module ax.models.torch.utils)": [[9, "ax.models.torch.utils.predict_from_model"]], "predict_from_model_mcmc() (in module ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.predict_from_model_mcmc"]], "predict_from_surrogate() (ax.models.torch.botorch_modular.model.botorchmodel method)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.predict_from_surrogate"]], "project_down() (ax.models.torch.rembo.rembo method)": [[9, "ax.models.torch.rembo.REMBO.project_down"]], "project_up() (ax.models.random.rembo_initializer.remboinitializer method)": [[9, "ax.models.random.rembo_initializer.REMBOInitializer.project_up"]], "project_up() (ax.models.torch.rembo.rembo method)": [[9, "ax.models.torch.rembo.REMBO.project_up"]], "pyro_sample_input_warping() (in module ax.models.torch.fully_bayesian_model_utils)": [[9, "ax.models.torch.fully_bayesian_model_utils.pyro_sample_input_warping"]], "pyro_sample_mean() (in module ax.models.torch.fully_bayesian_model_utils)": [[9, "ax.models.torch.fully_bayesian_model_utils.pyro_sample_mean"]], "pyro_sample_noise() (in module ax.models.torch.fully_bayesian_model_utils)": [[9, "ax.models.torch.fully_bayesian_model_utils.pyro_sample_noise"]], "pyro_sample_outputscale() (in module ax.models.torch.fully_bayesian_model_utils)": [[9, "ax.models.torch.fully_bayesian_model_utils.pyro_sample_outputscale"]], "pyro_sample_saas_lengthscales() (in module ax.models.torch.fully_bayesian_model_utils)": [[9, "ax.models.torch.fully_bayesian_model_utils.pyro_sample_saas_lengthscales"]], "randomize_objective_weights() (in module ax.models.torch.utils)": [[9, "ax.models.torch.utils.randomize_objective_weights"]], "rbf_kernel() (in module ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.rbf_kernel"]], "recommend_best_observed_point() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.recommend_best_observed_point"]], "recommend_best_out_of_sample_point() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.recommend_best_out_of_sample_point"]], "rejection_sample() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.rejection_sample"]], "risk_measure (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.risk_measure"], [9, "id9"]], "rounding_func (ax.models.torch_base.torchoptconfig attribute)": [[9, "ax.models.torch_base.TorchOptConfig.rounding_func"], [9, "id10"]], "run_inference() (in module ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.run_inference"]], "scipy_optimizer() (in module ax.models.torch.botorch_defaults)": [[9, "ax.models.torch.botorch_defaults.scipy_optimizer"]], "scipy_optimizer_list() (in module ax.models.torch.botorch_moo_defaults)": [[9, "ax.models.torch.botorch_moo_defaults.scipy_optimizer_list"]], "scramble (ax.models.random.sobol.sobolgenerator attribute)": [[9, "ax.models.random.sobol.SobolGenerator.scramble"]], "search_space_digest (ax.models.torch.botorch.botorchmodel property)": [[9, "ax.models.torch.botorch.BotorchModel.search_space_digest"]], "search_space_digest (ax.models.torch.botorch_modular.model.botorchmodel property)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.search_space_digest"]], "seed (ax.models.random.base.randommodel attribute)": [[9, "ax.models.random.base.RandomModel.seed"]], "serialize_state() (ax.models.base.model class method)": [[9, "ax.models.base.Model.serialize_state"]], "set_params_with_array() (in module ax.models.torch.alebo)": [[9, "ax.models.torch.alebo.set_params_with_array"]], "single_surrogate_only() (in module ax.models.torch.botorch_modular.model)": [[9, "ax.models.torch.botorch_modular.model.single_surrogate_only"]], "single_task_pyro_model() (in module ax.models.torch.fully_bayesian)": [[9, "ax.models.torch.fully_bayesian.single_task_pyro_model"]], "subset_model() (in module ax.models.torch.utils)": [[9, "ax.models.torch.utils.subset_model"]], "subset_state_dict() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.subset_state_dict"]], "surrogate (ax.models.torch.botorch_modular.model.botorchmodel property)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.surrogate"]], "surrogate_specs (ax.models.torch.botorch_modular.model.botorchmodel attribute)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.surrogate_specs"]], "surrogates (ax.models.torch.botorch_modular.acquisition.acquisition attribute)": [[9, "ax.models.torch.botorch_modular.acquisition.Acquisition.surrogates"]], "surrogates (ax.models.torch.botorch_modular.model.botorchmodel property)": [[9, "ax.models.torch.botorch_modular.model.BoTorchModel.surrogates"]], "surrogates (ax.models.torch.botorch_modular.multi_fidelity.multifidelityacquisition attribute)": [[9, "ax.models.torch.botorch_modular.multi_fidelity.MultiFidelityAcquisition.surrogates"]], "surrogates (ax.models.torch.botorch_modular.sebo.seboacquisition attribute)": [[9, "ax.models.torch.botorch_modular.sebo.SEBOAcquisition.surrogates"]], "task_features (ax.models.torch.botorch_kg.knowledgegradient attribute)": [[9, "ax.models.torch.botorch_kg.KnowledgeGradient.task_features"]], "task_features (ax.models.torch.botorch_mes.maxvalueentropysearch attribute)": [[9, "ax.models.torch.botorch_mes.MaxValueEntropySearch.task_features"]], "task_features (ax.models.torch.cbo_lcea.lceabo attribute)": [[9, "ax.models.torch.cbo_lcea.LCEABO.task_features"]], "task_features (ax.models.torch.cbo_lcem.lcembo attribute)": [[9, "ax.models.torch.cbo_lcem.LCEMBO.task_features"]], "task_features (ax.models.torch.cbo_sac.sacbo attribute)": [[9, "ax.models.torch.cbo_sac.SACBO.task_features"]], "task_features (ax.models.torch.rembo.rembo attribute)": [[9, "ax.models.torch.rembo.REMBO.task_features"]], "tensor_callable_to_array_callable() (in module ax.models.torch.utils)": [[9, "ax.models.torch.utils.tensor_callable_to_array_callable"]], "to_01() (ax.models.torch.rembo.rembo method)": [[9, "ax.models.torch.rembo.REMBO.to_01"]], "training (ax.models.torch.alebo.alebokernel attribute)": [[9, "ax.models.torch.alebo.ALEBOKernel.training"]], "training (ax.models.torch.botorch_modular.kernels.scalematernkernel attribute)": [[9, "ax.models.torch.botorch_modular.kernels.ScaleMaternKernel.training"]], "training (ax.models.torch.botorch_modular.kernels.temporalkernel attribute)": [[9, "ax.models.torch.botorch_modular.kernels.TemporalKernel.training"]], "training_data (ax.models.torch.botorch_modular.surrogate.surrogate property)": [[9, "ax.models.torch.botorch_modular.surrogate.Surrogate.training_data"]], "tunable_feature_indices() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.tunable_feature_indices"]], "update() (ax.models.torch_base.torchmodel method)": [[9, "ax.models.torch_base.TorchModel.update"]], "upper_boundary (ax.models.winsorization_config.winsorizationconfig attribute)": [[9, "ax.models.winsorization_config.WinsorizationConfig.upper_boundary"]], "upper_quantile_margin (ax.models.winsorization_config.winsorizationconfig attribute)": [[9, "ax.models.winsorization_config.WinsorizationConfig.upper_quantile_margin"]], "use_model_list() (in module ax.models.torch.botorch_modular.utils)": [[9, "ax.models.torch.botorch_modular.utils.use_model_list"]], "validate_bounds() (in module ax.models.model_utils)": [[9, "ax.models.model_utils.validate_bounds"]], "weights (ax.models.torch_base.torchgenresults attribute)": [[9, "ax.models.torch_base.TorchGenResults.weights"]], "axplotconfig (class in ax.plot.base)": [[10, "ax.plot.base.AxPlotConfig"]], "axplottypes (class in ax.plot.base)": [[10, "ax.plot.base.AxPlotTypes"]], "bandit_rollout (ax.plot.base.axplottypes attribute)": [[10, "ax.plot.base.AxPlotTypes.BANDIT_ROLLOUT"]], "colors (class in ax.plot.color)": [[10, "ax.plot.color.COLORS"]], "contour (ax.plot.base.axplottypes attribute)": [[10, "ax.plot.base.AxPlotTypes.CONTOUR"]], "coral (ax.plot.color.colors attribute)": [[10, "ax.plot.color.COLORS.CORAL"]], "generic (ax.plot.base.axplottypes attribute)": [[10, "ax.plot.base.AxPlotTypes.GENERIC"]], "html (ax.plot.base.axplottypes attribute)": [[10, "ax.plot.base.AxPlotTypes.HTML"]], "interact_contour (ax.plot.base.axplottypes attribute)": [[10, "ax.plot.base.AxPlotTypes.INTERACT_CONTOUR"]], "interact_slice (ax.plot.base.axplottypes attribute)": [[10, "ax.plot.base.AxPlotTypes.INTERACT_SLICE"]], "light_purple (ax.plot.color.colors attribute)": [[10, "ax.plot.color.COLORS.LIGHT_PURPLE"]], "orange (ax.plot.color.colors attribute)": [[10, "ax.plot.color.COLORS.ORANGE"]], "pink (ax.plot.color.colors attribute)": [[10, "ax.plot.color.COLORS.PINK"]], "paretofrontierresults (class in ax.plot.pareto_utils)": [[10, "ax.plot.pareto_utils.ParetoFrontierResults"]], "plotdata (class in ax.plot.base)": [[10, "ax.plot.base.PlotData"]], "plotinsamplearm (class in ax.plot.base)": [[10, "ax.plot.base.PlotInSampleArm"]], "plotmetric (class in ax.plot.base)": [[10, "ax.plot.base.PlotMetric"]], "plotoutofsamplearm (class in ax.plot.base)": [[10, "ax.plot.base.PlotOutOfSampleArm"]], "slice (ax.plot.base.axplottypes attribute)": [[10, "ax.plot.base.AxPlotTypes.SLICE"]], "steelblue (ax.plot.color.colors attribute)": [[10, "ax.plot.color.COLORS.STEELBLUE"]], "teal (ax.plot.color.colors attribute)": [[10, "ax.plot.color.COLORS.TEAL"]], "absolute_metrics (ax.plot.pareto_utils.paretofrontierresults attribute)": [[10, "ax.plot.pareto_utils.ParetoFrontierResults.absolute_metrics"]], "arm_name_to_sort_key() (in module ax.plot.helper)": [[10, "ax.plot.helper.arm_name_to_sort_key"]], "arm_name_to_tuple() (in module ax.plot.helper)": [[10, "ax.plot.helper.arm_name_to_tuple"]], "arm_names (ax.plot.pareto_utils.paretofrontierresults attribute)": [[10, "ax.plot.pareto_utils.ParetoFrontierResults.arm_names"]], "ax.plot": [[10, "module-ax.plot"]], "ax.plot.bandit_rollout": [[10, "module-ax.plot.bandit_rollout"]], "ax.plot.base": [[10, "module-ax.plot.base"]], "ax.plot.color": [[10, "module-ax.plot.color"]], "ax.plot.contour": [[10, "module-ax.plot.contour"]], "ax.plot.diagnostic": [[10, "module-ax.plot.diagnostic"]], "ax.plot.feature_importances": [[10, "module-ax.plot.feature_importances"]], "ax.plot.helper": [[10, "module-ax.plot.helper"]], "ax.plot.marginal_effects": [[10, "module-ax.plot.marginal_effects"]], "ax.plot.pareto_utils": [[10, "module-ax.plot.pareto_utils"]], "ax.plot.render": [[10, "module-ax.plot.render"]], "ax.plot.scatter": [[10, "module-ax.plot.scatter"]], "ax.plot.slice": [[10, "module-ax.plot.slice"]], "ax.plot.table_view": [[10, "module-ax.plot.table_view"]], "axis_range() (in module ax.plot.helper)": [[10, "ax.plot.helper.axis_range"]], "build_filter_trial() (in module ax.plot.helper)": [[10, "ax.plot.helper.build_filter_trial"]], "compose_annotation() (in module ax.plot.helper)": [[10, "ax.plot.helper.compose_annotation"]], "compute_posterior_pareto_frontier() (in module ax.plot.pareto_utils)": [[10, "ax.plot.pareto_utils.compute_posterior_pareto_frontier"]], "context_stratum (ax.plot.base.plotinsamplearm attribute)": [[10, "ax.plot.base.PlotInSampleArm.context_stratum"]], "context_stratum (ax.plot.base.plotoutofsamplearm attribute)": [[10, "ax.plot.base.PlotOutOfSampleArm.context_stratum"]], "contour_config_to_trace() (in module ax.plot.helper)": [[10, "ax.plot.helper.contour_config_to_trace"]], "extend_range() (in module ax.plot.helper)": [[10, "ax.plot.helper.extend_range"]], "get_color() (in module ax.plot.table_view)": [[10, "ax.plot.table_view.get_color"]], "get_fixed_values() (in module ax.plot.helper)": [[10, "ax.plot.helper.get_fixed_values"]], "get_grid_for_parameter() (in module ax.plot.helper)": [[10, "ax.plot.helper.get_grid_for_parameter"]], "get_observed_pareto_frontiers() (in module ax.plot.pareto_utils)": [[10, "ax.plot.pareto_utils.get_observed_pareto_frontiers"]], "get_plot_data() (in module ax.plot.helper)": [[10, "ax.plot.helper.get_plot_data"]], "get_range_parameter() (in module ax.plot.helper)": [[10, "ax.plot.helper.get_range_parameter"]], "get_range_parameters() (in module ax.plot.helper)": [[10, "ax.plot.helper.get_range_parameters"]], "get_range_parameters_from_list() (in module ax.plot.helper)": [[10, "ax.plot.helper.get_range_parameters_from_list"]], "get_tensor_converter_model() (in module ax.plot.pareto_utils)": [[10, "ax.plot.pareto_utils.get_tensor_converter_model"]], "in_sample (ax.plot.base.plotdata attribute)": [[10, "ax.plot.base.PlotData.in_sample"]], "infer_is_relative() (in module ax.plot.helper)": [[10, "ax.plot.helper.infer_is_relative"]], "infer_reference_point_from_experiment() (in module ax.plot.pareto_utils)": [[10, "ax.plot.pareto_utils.infer_reference_point_from_experiment"]], "interact_batch_comparison() (in module ax.plot.diagnostic)": [[10, "ax.plot.diagnostic.interact_batch_comparison"]], "interact_contour() (in module ax.plot.contour)": [[10, "ax.plot.contour.interact_contour"]], "interact_contour_plotly() (in module ax.plot.contour)": [[10, "ax.plot.contour.interact_contour_plotly"]], "interact_cross_validation() (in module ax.plot.diagnostic)": [[10, "ax.plot.diagnostic.interact_cross_validation"]], "interact_cross_validation_plotly() (in module ax.plot.diagnostic)": [[10, "ax.plot.diagnostic.interact_cross_validation_plotly"]], "interact_empirical_model_validation() (in module ax.plot.diagnostic)": [[10, "ax.plot.diagnostic.interact_empirical_model_validation"]], "interact_fitted() (in module ax.plot.scatter)": [[10, "ax.plot.scatter.interact_fitted"]], "interact_fitted_plotly() (in module ax.plot.scatter)": [[10, "ax.plot.scatter.interact_fitted_plotly"]], "interact_slice() (in module ax.plot.slice)": [[10, "ax.plot.slice.interact_slice"]], "interact_slice_plotly() (in module ax.plot.slice)": [[10, "ax.plot.slice.interact_slice_plotly"]], "lattice_multiple_metrics() (in module ax.plot.scatter)": [[10, "ax.plot.scatter.lattice_multiple_metrics"]], "means (ax.plot.pareto_utils.paretofrontierresults attribute)": [[10, "ax.plot.pareto_utils.ParetoFrontierResults.means"]], "metric (ax.plot.base.plotmetric attribute)": [[10, "ax.plot.base.PlotMetric.metric"]], "metrics (ax.plot.base.plotdata attribute)": [[10, "ax.plot.base.PlotData.metrics"]], "name (ax.plot.base.plotinsamplearm attribute)": [[10, "ax.plot.base.PlotInSampleArm.name"]], "name (ax.plot.base.plotoutofsamplearm attribute)": [[10, "ax.plot.base.PlotOutOfSampleArm.name"]], "objective_thresholds (ax.plot.pareto_utils.paretofrontierresults attribute)": [[10, "ax.plot.pareto_utils.ParetoFrontierResults.objective_thresholds"]], "out_of_sample (ax.plot.base.plotdata attribute)": [[10, "ax.plot.base.PlotData.out_of_sample"]], "param_dicts (ax.plot.pareto_utils.paretofrontierresults attribute)": [[10, "ax.plot.pareto_utils.ParetoFrontierResults.param_dicts"]], "parameters (ax.plot.base.plotinsamplearm attribute)": [[10, "ax.plot.base.PlotInSampleArm.parameters"]], "parameters (ax.plot.base.plotoutofsamplearm attribute)": [[10, "ax.plot.base.PlotOutOfSampleArm.parameters"]], "plot_bandit_rollout() (in module ax.plot.bandit_rollout)": [[10, "ax.plot.bandit_rollout.plot_bandit_rollout"]], "plot_config_to_html() (in module ax.plot.render)": [[10, "ax.plot.render.plot_config_to_html"]], "plot_contour() (in module ax.plot.contour)": [[10, "ax.plot.contour.plot_contour"]], "plot_contour_plotly() (in module ax.plot.contour)": [[10, "ax.plot.contour.plot_contour_plotly"]], "plot_feature_importance() (in module ax.plot.feature_importances)": [[10, "ax.plot.feature_importances.plot_feature_importance"]], "plot_feature_importance_by_feature() (in module ax.plot.feature_importances)": [[10, "ax.plot.feature_importances.plot_feature_importance_by_feature"]], "plot_feature_importance_by_feature_plotly() (in module ax.plot.feature_importances)": [[10, "ax.plot.feature_importances.plot_feature_importance_by_feature_plotly"]], "plot_feature_importance_by_metric() (in module ax.plot.feature_importances)": [[10, "ax.plot.feature_importances.plot_feature_importance_by_metric"]], "plot_feature_importance_by_metric_plotly() (in module ax.plot.feature_importances)": [[10, "ax.plot.feature_importances.plot_feature_importance_by_metric_plotly"]], "plot_feature_importance_plotly() (in module ax.plot.feature_importances)": [[10, "ax.plot.feature_importances.plot_feature_importance_plotly"]], "plot_fitted() (in module ax.plot.scatter)": [[10, "ax.plot.scatter.plot_fitted"]], "plot_marginal_effects() (in module ax.plot.marginal_effects)": [[10, "ax.plot.marginal_effects.plot_marginal_effects"]], "plot_multiple_metrics() (in module ax.plot.scatter)": [[10, "ax.plot.scatter.plot_multiple_metrics"]], "plot_objective_vs_constraints() (in module ax.plot.scatter)": [[10, "ax.plot.scatter.plot_objective_vs_constraints"]], "plot_relative_feature_importance() (in module ax.plot.feature_importances)": [[10, "ax.plot.feature_importances.plot_relative_feature_importance"]], "plot_relative_feature_importance_plotly() (in module ax.plot.feature_importances)": [[10, "ax.plot.feature_importances.plot_relative_feature_importance_plotly"]], "plot_slice() (in module ax.plot.slice)": [[10, "ax.plot.slice.plot_slice"]], "plot_slice_plotly() (in module ax.plot.slice)": [[10, "ax.plot.slice.plot_slice_plotly"]], "plotly_color_scale() (in module ax.plot.color)": [[10, "ax.plot.color.plotly_color_scale"]], "pred (ax.plot.base.plotmetric attribute)": [[10, "ax.plot.base.PlotMetric.pred"]], "primary_metric (ax.plot.pareto_utils.paretofrontierresults attribute)": [[10, "ax.plot.pareto_utils.ParetoFrontierResults.primary_metric"]], "rel (ax.plot.base.plotmetric attribute)": [[10, "ax.plot.base.PlotMetric.rel"]], "relativize() (in module ax.plot.helper)": [[10, "ax.plot.helper.relativize"]], "relativize_data() (in module ax.plot.helper)": [[10, "ax.plot.helper.relativize_data"]], "resize_subtitles() (in module ax.plot.helper)": [[10, "ax.plot.helper.resize_subtitles"]], "rgb() (in module ax.plot.helper)": [[10, "ax.plot.helper.rgb"]], "rgba() (in module ax.plot.color)": [[10, "ax.plot.color.rgba"]], "se (ax.plot.base.plotinsamplearm attribute)": [[10, "ax.plot.base.PlotInSampleArm.se"]], "se_hat (ax.plot.base.plotinsamplearm attribute)": [[10, "ax.plot.base.PlotInSampleArm.se_hat"]], "se_hat (ax.plot.base.plotoutofsamplearm attribute)": [[10, "ax.plot.base.PlotOutOfSampleArm.se_hat"]], "secondary_metric (ax.plot.pareto_utils.paretofrontierresults attribute)": [[10, "ax.plot.pareto_utils.ParetoFrontierResults.secondary_metric"]], "sems (ax.plot.pareto_utils.paretofrontierresults attribute)": [[10, "ax.plot.pareto_utils.ParetoFrontierResults.sems"]], "short_name() (in module ax.plot.contour)": [[10, "ax.plot.contour.short_name"]], "slice_config_to_trace() (in module ax.plot.helper)": [[10, "ax.plot.helper.slice_config_to_trace"]], "status_quo_name (ax.plot.base.plotdata attribute)": [[10, "ax.plot.base.PlotData.status_quo_name"]], "table_view_plot() (in module ax.plot.table_view)": [[10, "ax.plot.table_view.table_view_plot"]], "tile_cross_validation() (in module ax.plot.diagnostic)": [[10, "ax.plot.diagnostic.tile_cross_validation"]], "tile_fitted() (in module ax.plot.scatter)": [[10, "ax.plot.scatter.tile_fitted"]], "tile_observations() (in module ax.plot.scatter)": [[10, "ax.plot.scatter.tile_observations"]], "to_nonrobust_search_space() (in module ax.plot.pareto_utils)": [[10, "ax.plot.pareto_utils.to_nonrobust_search_space"]], "y (ax.plot.base.plotinsamplearm attribute)": [[10, "ax.plot.base.PlotInSampleArm.y"]], "y_hat (ax.plot.base.plotinsamplearm attribute)": [[10, "ax.plot.base.PlotInSampleArm.y_hat"]], "y_hat (ax.plot.base.plotoutofsamplearm attribute)": [[10, "ax.plot.base.PlotOutOfSampleArm.y_hat"]], "botorchtestproblemrunner (class in ax.runners.botorch_test_problem)": [[11, "ax.runners.botorch_test_problem.BotorchTestProblemRunner"]], "simulatedbackendrunner (class in ax.runners.simulated_backend)": [[11, "ax.runners.simulated_backend.SimulatedBackendRunner"]], "singlerunningtrialmixin (class in ax.runners.single_running_trial_mixin)": [[11, "ax.runners.single_running_trial_mixin.SingleRunningTrialMixin"]], "syntheticrunner (class in ax.runners.synthetic)": [[11, "ax.runners.synthetic.SyntheticRunner"]], "torchxrunner (class in ax.runners.torchx)": [[11, "ax.runners.torchx.TorchXRunner"]], "ax.runners": [[11, "module-ax.runners"]], "ax.runners.botorch_test_problem": [[11, "module-ax.runners.botorch_test_problem"]], "ax.runners.simulated_backend": [[11, "module-ax.runners.simulated_backend"]], "ax.runners.single_running_trial_mixin": [[11, "module-ax.runners.single_running_trial_mixin"]], "ax.runners.synthetic": [[11, "module-ax.runners.synthetic"]], "ax.runners.torchx": [[11, "module-ax.runners.torchx"]], "deserialize_init_args() (ax.runners.botorch_test_problem.botorchtestproblemrunner class method)": [[11, "ax.runners.botorch_test_problem.BotorchTestProblemRunner.deserialize_init_args"]], "evaluate_with_original_bounds() (ax.runners.botorch_test_problem.botorchtestproblemrunner method)": [[11, "ax.runners.botorch_test_problem.BotorchTestProblemRunner.evaluate_with_original_bounds"]], "poll_trial_status() (ax.runners.botorch_test_problem.botorchtestproblemrunner method)": [[11, "ax.runners.botorch_test_problem.BotorchTestProblemRunner.poll_trial_status"]], "poll_trial_status() (ax.runners.simulated_backend.simulatedbackendrunner method)": [[11, "ax.runners.simulated_backend.SimulatedBackendRunner.poll_trial_status"]], "poll_trial_status() (ax.runners.single_running_trial_mixin.singlerunningtrialmixin method)": [[11, "ax.runners.single_running_trial_mixin.SingleRunningTrialMixin.poll_trial_status"]], "poll_trial_status() (ax.runners.synthetic.syntheticrunner method)": [[11, "ax.runners.synthetic.SyntheticRunner.poll_trial_status"]], "poll_trial_status() (ax.runners.torchx.torchxrunner method)": [[11, "ax.runners.torchx.TorchXRunner.poll_trial_status"]], "run() (ax.runners.botorch_test_problem.botorchtestproblemrunner method)": [[11, "ax.runners.botorch_test_problem.BotorchTestProblemRunner.run"]], "run() (ax.runners.simulated_backend.simulatedbackendrunner method)": [[11, "ax.runners.simulated_backend.SimulatedBackendRunner.run"]], "run() (ax.runners.synthetic.syntheticrunner method)": [[11, "ax.runners.synthetic.SyntheticRunner.run"]], "run() (ax.runners.torchx.torchxrunner method)": [[11, "ax.runners.torchx.TorchXRunner.run"]], "run_metadata_report_keys (ax.runners.synthetic.syntheticrunner property)": [[11, "ax.runners.synthetic.SyntheticRunner.run_metadata_report_keys"]], "sample_runtime_unif() (in module ax.runners.simulated_backend)": [[11, "ax.runners.simulated_backend.sample_runtime_unif"]], "serialize_init_args() (ax.runners.botorch_test_problem.botorchtestproblemrunner class method)": [[11, "ax.runners.botorch_test_problem.BotorchTestProblemRunner.serialize_init_args"]], "stop() (ax.runners.simulated_backend.simulatedbackendrunner method)": [[11, "ax.runners.simulated_backend.SimulatedBackendRunner.stop"]], "stop() (ax.runners.torchx.torchxrunner method)": [[11, "ax.runners.torchx.TorchXRunner.stop"]], "test_problem (ax.runners.botorch_test_problem.botorchtestproblemrunner attribute)": [[11, "ax.runners.botorch_test_problem.BotorchTestProblemRunner.test_problem"]], "batch_trial (ax.service.utils.scheduler_options.trialtype attribute)": [[12, "ax.service.utils.scheduler_options.TrialType.BATCH_TRIAL"]], "bestpointmixin (class in ax.service.utils.best_point_mixin)": [[12, "ax.service.utils.best_point_mixin.BestPointMixin"]], "fixedfeatures (class in ax.service.utils.instantiation)": [[12, "ax.service.utils.instantiation.FixedFeatures"]], "instantiationbase (class in ax.service.utils.instantiation)": [[12, "ax.service.utils.instantiation.InstantiationBase"]], "maximize (ax.service.utils.instantiation.metricobjective attribute)": [[12, "ax.service.utils.instantiation.MetricObjective.MAXIMIZE"]], "minimize (ax.service.utils.instantiation.metricobjective attribute)": [[12, "ax.service.utils.instantiation.MetricObjective.MINIMIZE"]], "metricobjective (class in ax.service.utils.instantiation)": [[12, "ax.service.utils.instantiation.MetricObjective"]], "objectiveproperties (class in ax.service.utils.instantiation)": [[12, "ax.service.utils.instantiation.ObjectiveProperties"]], "optimizationloop (class in ax.service.managed_loop)": [[12, "ax.service.managed_loop.OptimizationLoop"]], "scheduleroptions (class in ax.service.utils.scheduler_options)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions"]], "trial (ax.service.utils.scheduler_options.trialtype attribute)": [[12, "ax.service.utils.scheduler_options.TrialType.TRIAL"]], "trialtype (class in ax.service.utils.scheduler_options)": [[12, "ax.service.utils.scheduler_options.TrialType"]], "ax.service": [[12, "module-ax.service"]], "ax.service.managed_loop": [[12, "module-ax.service.managed_loop"]], "ax.service.utils.best_point": [[12, "module-ax.service.utils.best_point"]], "ax.service.utils.best_point_mixin": [[12, "module-ax.service.utils.best_point_mixin"]], "ax.service.utils.early_stopping": [[12, "module-ax.service.utils.early_stopping"]], "ax.service.utils.instantiation": [[12, "module-ax.service.utils.instantiation"]], "ax.service.utils.scheduler_options": [[12, "module-ax.service.utils.scheduler_options"]], "batch_size (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.batch_size"], [12, "id0"]], "build_objective_threshold() (ax.service.utils.instantiation.instantiationbase static method)": [[12, "ax.service.utils.instantiation.InstantiationBase.build_objective_threshold"]], "build_objective_thresholds() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.build_objective_thresholds"]], "constraint_from_str() (ax.service.utils.instantiation.instantiationbase static method)": [[12, "ax.service.utils.instantiation.InstantiationBase.constraint_from_str"]], "debug_log_run_metadata (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.debug_log_run_metadata"], [12, "id1"]], "early_stopping_strategy (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.early_stopping_strategy"], [12, "id2"]], "enforce_immutable_search_space_and_opt_config (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.enforce_immutable_search_space_and_opt_config"], [12, "id3"]], "extract_y_from_data() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.extract_Y_from_data"]], "fetch_kwargs (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.fetch_kwargs"], [12, "id4"]], "fill_missing_thresholds_from_nadir() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.fill_missing_thresholds_from_nadir"]], "full_run() (ax.service.managed_loop.optimizationloop method)": [[12, "ax.service.managed_loop.OptimizationLoop.full_run"]], "get_best_by_raw_objective() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.get_best_by_raw_objective"]], "get_best_by_raw_objective_with_trial_index() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.get_best_by_raw_objective_with_trial_index"]], "get_best_parameters() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[12, "ax.service.utils.best_point_mixin.BestPointMixin.get_best_parameters"]], "get_best_parameters() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.get_best_parameters"]], "get_best_parameters_from_model_predictions() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.get_best_parameters_from_model_predictions"]], "get_best_parameters_from_model_predictions_with_trial_index() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.get_best_parameters_from_model_predictions_with_trial_index"]], "get_best_parameters_with_trial_index() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.get_best_parameters_with_trial_index"]], "get_best_point() (ax.service.managed_loop.optimizationloop method)": [[12, "ax.service.managed_loop.OptimizationLoop.get_best_point"]], "get_best_raw_objective_point() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.get_best_raw_objective_point"]], "get_best_raw_objective_point_with_trial_index() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.get_best_raw_objective_point_with_trial_index"]], "get_best_trial() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[12, "ax.service.utils.best_point_mixin.BestPointMixin.get_best_trial"]], "get_current_model() (ax.service.managed_loop.optimizationloop method)": [[12, "ax.service.managed_loop.OptimizationLoop.get_current_model"]], "get_early_stopping_metrics() (in module ax.service.utils.early_stopping)": [[12, "ax.service.utils.early_stopping.get_early_stopping_metrics"]], "get_hypervolume() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[12, "ax.service.utils.best_point_mixin.BestPointMixin.get_hypervolume"]], "get_pareto_optimal_parameters() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[12, "ax.service.utils.best_point_mixin.BestPointMixin.get_pareto_optimal_parameters"]], "get_pareto_optimal_parameters() (in module ax.service.utils.best_point)": [[12, "ax.service.utils.best_point.get_pareto_optimal_parameters"]], "get_trace() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[12, "ax.service.utils.best_point_mixin.BestPointMixin.get_trace"]], "get_trace_by_progression() (ax.service.utils.best_point_mixin.bestpointmixin method)": [[12, "ax.service.utils.best_point_mixin.BestPointMixin.get_trace_by_progression"]], "global_stopping_strategy (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.global_stopping_strategy"], [12, "id5"]], "init_seconds_between_polls (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.init_seconds_between_polls"], [12, "id6"]], "log_filepath (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.log_filepath"], [12, "id7"]], "logger (in module ax.service.utils.instantiation)": [[12, "ax.service.utils.instantiation.logger"]], "logging_level (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.logging_level"], [12, "id8"]], "make_experiment() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.make_experiment"]], "make_fixed_observation_features() (ax.service.utils.instantiation.instantiationbase static method)": [[12, "ax.service.utils.instantiation.InstantiationBase.make_fixed_observation_features"]], "make_objective_thresholds() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.make_objective_thresholds"]], "make_objectives() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.make_objectives"]], "make_optimization_config() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.make_optimization_config"]], "make_optimization_config_from_properties() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.make_optimization_config_from_properties"]], "make_outcome_constraints() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.make_outcome_constraints"]], "make_search_space() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.make_search_space"]], "max_pending_trials (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.max_pending_trials"], [12, "id9"]], "min_failed_trials_for_failure_rate_check (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.min_failed_trials_for_failure_rate_check"], [12, "id10"]], "min_seconds_before_poll (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.min_seconds_before_poll"], [12, "id11"]], "minimize (ax.service.utils.instantiation.objectiveproperties attribute)": [[12, "ax.service.utils.instantiation.ObjectiveProperties.minimize"]], "objective_threshold_constraint_from_str() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.objective_threshold_constraint_from_str"]], "optimization_config_from_objectives() (ax.service.utils.instantiation.instantiationbase static method)": [[12, "ax.service.utils.instantiation.InstantiationBase.optimization_config_from_objectives"]], "optimize() (in module ax.service.managed_loop)": [[12, "ax.service.managed_loop.optimize"]], "outcome_constraint_from_str() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.outcome_constraint_from_str"]], "parameter_from_json() (ax.service.utils.instantiation.instantiationbase class method)": [[12, "ax.service.utils.instantiation.InstantiationBase.parameter_from_json"]], "parameters (ax.service.utils.instantiation.fixedfeatures attribute)": [[12, "ax.service.utils.instantiation.FixedFeatures.parameters"]], "run_trial() (ax.service.managed_loop.optimizationloop method)": [[12, "ax.service.managed_loop.OptimizationLoop.run_trial"]], "run_trials_in_batches (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.run_trials_in_batches"], [12, "id12"]], "seconds_between_polls_backoff_factor (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.seconds_between_polls_backoff_factor"], [12, "id13"]], "should_stop_trials_early() (in module ax.service.utils.early_stopping)": [[12, "ax.service.utils.early_stopping.should_stop_trials_early"]], "status_quo_weight (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.status_quo_weight"], [12, "id14"]], "suppress_storage_errors_after_retries (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.suppress_storage_errors_after_retries"], [12, "id15"]], "threshold (ax.service.utils.instantiation.objectiveproperties attribute)": [[12, "ax.service.utils.instantiation.ObjectiveProperties.threshold"]], "timeout_hours (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.timeout_hours"], [12, "id16"]], "tolerated_trial_failure_rate (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.tolerated_trial_failure_rate"], [12, "id17"]], "total_trials (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.total_trials"], [12, "id18"]], "trial_index (ax.service.utils.instantiation.fixedfeatures attribute)": [[12, "ax.service.utils.instantiation.FixedFeatures.trial_index"]], "trial_type (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.trial_type"], [12, "id19"]], "ttl_seconds_for_trials (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.ttl_seconds_for_trials"], [12, "id20"]], "validate_metrics (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.validate_metrics"], [12, "id21"]], "wait_for_running_trials (ax.service.utils.scheduler_options.scheduleroptions attribute)": [[12, "ax.service.utils.scheduler_options.SchedulerOptions.wait_for_running_trials"], [12, "id22"]], "with_evaluation_function() (ax.service.managed_loop.optimizationloop static method)": [[12, "ax.service.managed_loop.OptimizationLoop.with_evaluation_function"]], "with_runners_and_metrics() (ax.service.managed_loop.optimizationloop class method)": [[12, "ax.service.managed_loop.OptimizationLoop.with_runners_and_metrics"]], "acquisition_function_registry (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.ACQUISITION_FUNCTION_REGISTRY"]], "acquisition_registry (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.ACQUISITION_REGISTRY"]], "additional_objective (ax.storage.utils.metricintent attribute)": [[13, "ax.storage.utils.MetricIntent.ADDITIONAL_OBJECTIVE"]], "basenullableenum (class in ax.storage.sqa_store.sqa_enum)": [[13, "ax.storage.sqa_store.sqa_enum.BaseNullableEnum"]], "choice (ax.storage.utils.domaintype attribute)": [[13, "ax.storage.utils.DomainType.CHOICE"]], "class_to_registry (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.CLASS_TO_REGISTRY"]], "dbsettings (class in ax.storage.sqa_store.structs)": [[13, "ax.storage.sqa_store.structs.DBSettings"]], "distribution (ax.storage.utils.parameterconstrainttype attribute)": [[13, "ax.storage.utils.ParameterConstraintType.DISTRIBUTION"]], "decoder (class in ax.storage.sqa_store.decoder)": [[13, "ax.storage.sqa_store.decoder.Decoder"]], "domaintype (class in ax.storage.utils)": [[13, "ax.storage.utils.DomainType"]], "environmental_range (ax.storage.utils.domaintype attribute)": [[13, "ax.storage.utils.DomainType.ENVIRONMENTAL_RANGE"]], "encoder (class in ax.storage.sqa_store.encoder)": [[13, "ax.storage.sqa_store.encoder.Encoder"]], "fixed (ax.storage.utils.domaintype attribute)": [[13, "ax.storage.utils.DomainType.FIXED"]], "gpytorch_component_registry (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.GPYTORCH_COMPONENT_REGISTRY"]], "input_transform_registry (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.INPUT_TRANSFORM_REGISTRY"]], "intenum (class in ax.storage.sqa_store.sqa_enum)": [[13, "ax.storage.sqa_store.sqa_enum.IntEnum"]], "inttimestamp (class in ax.storage.sqa_store.timestamp)": [[13, "ax.storage.sqa_store.timestamp.IntTimestamp"]], "jsonencodeddict (in module ax.storage.sqa_store.json)": [[13, "ax.storage.sqa_store.json.JSONEncodedDict"]], "jsonencodedlist (in module ax.storage.sqa_store.json)": [[13, "ax.storage.sqa_store.json.JSONEncodedList"]], "jsonencodedlongtext (class in ax.storage.sqa_store.json)": [[13, "ax.storage.sqa_store.json.JSONEncodedLongText"]], "jsonencodedlongtextdict (in module ax.storage.sqa_store.json)": [[13, "ax.storage.sqa_store.json.JSONEncodedLongTextDict"]], "jsonencodedmediumtext (class in ax.storage.sqa_store.json)": [[13, "ax.storage.sqa_store.json.JSONEncodedMediumText"]], "jsonencodedobject (class in ax.storage.sqa_store.json)": [[13, "ax.storage.sqa_store.json.JSONEncodedObject"]], "jsonencodedtext (class in ax.storage.sqa_store.json)": [[13, "ax.storage.sqa_store.json.JSONEncodedText"]], "jsonencodedtextdict (in module ax.storage.sqa_store.json)": [[13, "ax.storage.sqa_store.json.JSONEncodedTextDict"]], "linear (ax.storage.utils.parameterconstrainttype attribute)": [[13, "ax.storage.utils.ParameterConstraintType.LINEAR"]], "model_registry (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.MODEL_REGISTRY"]], "multi_objective (ax.storage.utils.metricintent attribute)": [[13, "ax.storage.utils.MetricIntent.MULTI_OBJECTIVE"]], "metricintent (class in ax.storage.utils)": [[13, "ax.storage.utils.MetricIntent"]], "objective (ax.storage.utils.metricintent attribute)": [[13, "ax.storage.utils.MetricIntent.OBJECTIVE"]], "objective_threshold (ax.storage.utils.metricintent attribute)": [[13, "ax.storage.utils.MetricIntent.OBJECTIVE_THRESHOLD"]], "order (ax.storage.utils.parameterconstrainttype attribute)": [[13, "ax.storage.utils.ParameterConstraintType.ORDER"]], "outcome_constraint (ax.storage.utils.metricintent attribute)": [[13, "ax.storage.utils.MetricIntent.OUTCOME_CONSTRAINT"]], "outcome_transform_registry (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.OUTCOME_TRANSFORM_REGISTRY"]], "parameterconstrainttype (class in ax.storage.utils)": [[13, "ax.storage.utils.ParameterConstraintType"]], "range (ax.storage.utils.domaintype attribute)": [[13, "ax.storage.utils.DomainType.RANGE"]], "reverse_outcome_transform_registry (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.REVERSE_OUTCOME_TRANSFORM_REGISTRY"]], "risk_measure (ax.storage.utils.metricintent attribute)": [[13, "ax.storage.utils.MetricIntent.RISK_MEASURE"]], "registrybundle (class in ax.storage.registry_bundle)": [[13, "ax.storage.registry_bundle.RegistryBundle"]], "registrybundlebase (class in ax.storage.registry_bundle)": [[13, "ax.storage.registry_bundle.RegistryBundleBase"]], "scalarized_objective (ax.storage.utils.metricintent attribute)": [[13, "ax.storage.utils.MetricIntent.SCALARIZED_OBJECTIVE"]], "scalarized_outcome_constraint (ax.storage.utils.metricintent attribute)": [[13, "ax.storage.utils.MetricIntent.SCALARIZED_OUTCOME_CONSTRAINT"]], "sqaabandonedarm (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQAAbandonedArm"]], "sqaarm (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQAArm"]], "sqabase (class in ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.SQABase"]], "sqadata (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQAData"]], "sqaexperiment (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQAExperiment"]], "sqagenerationstrategy (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQAGenerationStrategy"]], "sqageneratorrun (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun"]], "sqametric (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQAMetric"]], "sqaparameter (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQAParameter"]], "sqaparameterconstraint (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQAParameterConstraint"]], "sqarunner (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQARunner"]], "sqatrial (class in ax.storage.sqa_store.sqa_classes)": [[13, "ax.storage.sqa_store.sqa_classes.SQATrial"]], "sum (ax.storage.utils.parameterconstrainttype attribute)": [[13, "ax.storage.utils.ParameterConstraintType.SUM"]], "stringenum (class in ax.storage.sqa_store.sqa_enum)": [[13, "ax.storage.sqa_store.sqa_enum.StringEnum"]], "tracking (ax.storage.utils.metricintent attribute)": [[13, "ax.storage.utils.MetricIntent.TRACKING"]], "abandoned_arm_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.abandoned_arm_from_sqa"]], "abandoned_arm_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.abandoned_arm_to_sqa"]], "abandoned_arms (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQATrial.abandoned_arms"]], "arm_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.arm_from_sqa"]], "arm_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.arm_to_dict"]], "arm_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.arm_to_sqa"]], "arms (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.arms"]], "ax.storage": [[13, "module-ax.storage"]], "ax.storage.botorch_modular_registry": [[13, "module-ax.storage.botorch_modular_registry"]], "ax.storage.json_store.decoder": [[13, "module-ax.storage.json_store.decoder"]], "ax.storage.json_store.decoders": [[13, "module-ax.storage.json_store.decoders"]], "ax.storage.json_store.encoder": [[13, "module-ax.storage.json_store.encoder"]], "ax.storage.json_store.encoders": [[13, "module-ax.storage.json_store.encoders"]], "ax.storage.json_store.load": [[13, "module-ax.storage.json_store.load"]], "ax.storage.json_store.registry": [[13, "module-ax.storage.json_store.registry"]], "ax.storage.json_store.save": [[13, "module-ax.storage.json_store.save"]], "ax.storage.metric_registry": [[13, "module-ax.storage.metric_registry"]], "ax.storage.registry_bundle": [[13, "module-ax.storage.registry_bundle"]], "ax.storage.runner_registry": [[13, "module-ax.storage.runner_registry"]], "ax.storage.sqa_store.db": [[13, "module-ax.storage.sqa_store.db"]], "ax.storage.sqa_store.decoder": [[13, "module-ax.storage.sqa_store.decoder"]], "ax.storage.sqa_store.delete": [[13, "module-ax.storage.sqa_store.delete"]], "ax.storage.sqa_store.encoder": [[13, "module-ax.storage.sqa_store.encoder"]], "ax.storage.sqa_store.json": [[13, "module-ax.storage.sqa_store.json"]], "ax.storage.sqa_store.load": [[13, "module-ax.storage.sqa_store.load"]], "ax.storage.sqa_store.reduced_state": [[13, "module-ax.storage.sqa_store.reduced_state"]], "ax.storage.sqa_store.save": [[13, "module-ax.storage.sqa_store.save"]], "ax.storage.sqa_store.sqa_classes": [[13, "module-ax.storage.sqa_store.sqa_classes"]], "ax.storage.sqa_store.sqa_enum": [[13, "module-ax.storage.sqa_store.sqa_enum"]], "ax.storage.sqa_store.structs": [[13, "module-ax.storage.sqa_store.structs"]], "ax.storage.sqa_store.timestamp": [[13, "module-ax.storage.sqa_store.timestamp"]], "ax.storage.sqa_store.utils": [[13, "module-ax.storage.sqa_store.utils"]], "ax.storage.sqa_store.validation": [[13, "module-ax.storage.sqa_store.validation"]], "ax.storage.transform_registry": [[13, "module-ax.storage.transform_registry"]], "ax.storage.utils": [[13, "module-ax.storage.utils"]], "ax_class_from_json_dict() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.ax_class_from_json_dict"]], "batch_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.batch_to_dict"]], "batch_trial_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.batch_trial_from_json"]], "benchmark_problem_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.benchmark_problem_to_dict"]], "botorch_component_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.botorch_component_from_json"]], "botorch_component_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.botorch_component_to_dict"]], "botorch_input_transform_to_init_args() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.botorch_input_transform_to_init_args"]], "botorch_model_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.botorch_model_to_dict"]], "botorch_modular_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.botorch_modular_to_dict"]], "cache_ok (ax.storage.sqa_store.json.jsonencodedobject attribute)": [[13, "ax.storage.sqa_store.json.JSONEncodedObject.cache_ok"]], "cache_ok (ax.storage.sqa_store.sqa_enum.basenullableenum attribute)": [[13, "ax.storage.sqa_store.sqa_enum.BaseNullableEnum.cache_ok"]], "cache_ok (ax.storage.sqa_store.timestamp.inttimestamp attribute)": [[13, "ax.storage.sqa_store.timestamp.IntTimestamp.cache_ok"]], "choice_parameter_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.choice_parameter_to_dict"]], "class_decoder_registry (ax.storage.registry_bundle.registrybundlebase property)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.class_decoder_registry"]], "class_encoder_registry (ax.storage.registry_bundle.registrybundlebase property)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.class_encoder_registry"]], "class_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.class_from_json"]], "config (ax.storage.sqa_store.decoder.decoder attribute)": [[13, "ax.storage.sqa_store.decoder.Decoder.config"]], "config (ax.storage.sqa_store.encoder.encoder attribute)": [[13, "ax.storage.sqa_store.encoder.Encoder.config"]], "consistency_exactly_one() (in module ax.storage.sqa_store.validation)": [[13, "ax.storage.sqa_store.validation.consistency_exactly_one"]], "copy_db_ids() (in module ax.storage.sqa_store.utils)": [[13, "ax.storage.sqa_store.utils.copy_db_ids"]], "create_all_tables() (in module ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.create_all_tables"]], "create_mysql_engine_from_creator() (in module ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.create_mysql_engine_from_creator"]], "create_mysql_engine_from_url() (in module ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.create_mysql_engine_from_url"]], "create_test_engine() (in module ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.create_test_engine"]], "creator (ax.storage.sqa_store.structs.dbsettings attribute)": [[13, "ax.storage.sqa_store.structs.DBSettings.creator"]], "data (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAExperiment.data"]], "data_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.data_from_json"]], "data_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.data_from_sqa"]], "data_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.data_to_dict"]], "data_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.data_to_sqa"]], "decoder (ax.storage.registry_bundle.registrybundle property)": [[13, "ax.storage.registry_bundle.RegistryBundle.decoder"]], "decoder (ax.storage.registry_bundle.registrybundlebase property)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.decoder"]], "decoder (ax.storage.sqa_store.structs.dbsettings attribute)": [[13, "ax.storage.sqa_store.structs.DBSettings.decoder"]], "decoder_registry (ax.storage.registry_bundle.registrybundlebase property)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.decoder_registry"]], "delete_experiment() (in module ax.storage.sqa_store.delete)": [[13, "ax.storage.sqa_store.delete.delete_experiment"]], "delete_generation_strategy() (in module ax.storage.sqa_store.delete)": [[13, "ax.storage.sqa_store.delete.delete_generation_strategy"]], "dependents (ax.storage.sqa_store.sqa_classes.sqaparameter attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAParameter.dependents"]], "do_not_set_existing_value_to_null() (in module ax.storage.sqa_store.validation)": [[13, "ax.storage.sqa_store.validation.do_not_set_existing_value_to_null"]], "encoder (ax.storage.registry_bundle.registrybundle property)": [[13, "ax.storage.registry_bundle.RegistryBundle.encoder"]], "encoder (ax.storage.registry_bundle.registrybundlebase property)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.encoder"]], "encoder (ax.storage.sqa_store.structs.dbsettings attribute)": [[13, "ax.storage.sqa_store.structs.DBSettings.encoder"]], "encoder_registry (ax.storage.registry_bundle.registrybundlebase property)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.encoder_registry"]], "environmental_variable_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.environmental_variable_from_sqa"]], "environmental_variable_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.environmental_variable_to_sqa"]], "experiment_data_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.experiment_data_to_sqa"]], "experiment_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.experiment_from_json"]], "experiment_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.experiment_from_sqa"]], "experiment_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.experiment_to_dict"]], "experiment_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.experiment_to_sqa"]], "fixed_parameter_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.fixed_parameter_to_dict"]], "fixed_value (ax.storage.sqa_store.sqa_classes.sqaparameter attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAParameter.fixed_value"]], "from_registry_bundles() (ax.storage.registry_bundle.registrybundlebase class method)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.from_registry_bundles"]], "generation_node_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.generation_node_from_json"]], "generation_node_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.generation_node_to_dict"]], "generation_step_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.generation_step_from_json"]], "generation_step_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.generation_step_to_dict"]], "generation_strategy (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAExperiment.generation_strategy"]], "generation_strategy_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.generation_strategy_from_json"]], "generation_strategy_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.generation_strategy_from_sqa"]], "generation_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.generation_strategy_to_dict"]], "generation_strategy_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.generation_strategy_to_sqa"]], "generator_run_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.generator_run_from_json"]], "generator_run_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.generator_run_from_sqa"]], "generator_run_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.generator_run_to_dict"]], "generator_run_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.generator_run_to_sqa"]], "generator_runs (ax.storage.sqa_store.sqa_classes.sqagenerationstrategy attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAGenerationStrategy.generator_runs"]], "generator_runs (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQATrial.generator_runs"]], "get_children_metrics_by_name() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.get_children_metrics_by_name"]], "get_engine() (in module ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.get_engine"]], "get_enum_name() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.get_enum_name"]], "get_enum_value() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.get_enum_value"]], "get_generation_strategy_id() (in module ax.storage.sqa_store.load)": [[13, "ax.storage.sqa_store.load.get_generation_strategy_id"]], "get_generation_strategy_sqa() (in module ax.storage.sqa_store.load)": [[13, "ax.storage.sqa_store.load.get_generation_strategy_sqa"]], "get_generation_strategy_sqa_reduced_state() (in module ax.storage.sqa_store.load)": [[13, "ax.storage.sqa_store.load.get_generation_strategy_sqa_reduced_state"]], "get_generator_runs_by_id() (in module ax.storage.sqa_store.load)": [[13, "ax.storage.sqa_store.load.get_generator_runs_by_id"]], "get_input_transform_json_components() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.get_input_transform_json_components"]], "get_metric_type_and_properties() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.get_metric_type_and_properties"]], "get_outcome_transform_json_components() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.get_outcome_transform_json_components"]], "get_query_options_to_defer_immutable_duplicates() (in module ax.storage.sqa_store.reduced_state)": [[13, "ax.storage.sqa_store.reduced_state.get_query_options_to_defer_immutable_duplicates"]], "get_query_options_to_defer_large_model_cols() (in module ax.storage.sqa_store.reduced_state)": [[13, "ax.storage.sqa_store.reduced_state.get_query_options_to_defer_large_model_cols"]], "get_session() (in module ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.get_session"]], "impl (ax.storage.sqa_store.json.jsonencodedlongtext attribute)": [[13, "ax.storage.sqa_store.json.JSONEncodedLongText.impl"]], "impl (ax.storage.sqa_store.json.jsonencodedmediumtext attribute)": [[13, "ax.storage.sqa_store.json.JSONEncodedMediumText.impl"]], "impl (ax.storage.sqa_store.json.jsonencodedobject attribute)": [[13, "ax.storage.sqa_store.json.JSONEncodedObject.impl"]], "impl (ax.storage.sqa_store.sqa_enum.stringenum attribute)": [[13, "ax.storage.sqa_store.sqa_enum.StringEnum.impl"]], "improvement_global_stopping_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.improvement_global_stopping_strategy_to_dict"]], "init_engine_and_session_factory() (in module ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.init_engine_and_session_factory"]], "init_test_engine_and_session_factory() (in module ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.init_test_engine_and_session_factory"]], "input_transform_type_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.input_transform_type_from_json"]], "is_batch (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQATrial.is_batch"]], "is_foreign_key_field() (in module ax.storage.sqa_store.utils)": [[13, "ax.storage.sqa_store.utils.is_foreign_key_field"]], "listens_for_multiple() (in module ax.storage.sqa_store.validation)": [[13, "ax.storage.sqa_store.validation.listens_for_multiple"]], "load_experiment() (in module ax.storage.json_store.load)": [[13, "ax.storage.json_store.load.load_experiment"]], "load_experiment() (in module ax.storage.sqa_store.load)": [[13, "ax.storage.sqa_store.load.load_experiment"]], "load_generation_strategy_by_experiment_name() (in module ax.storage.sqa_store.load)": [[13, "ax.storage.sqa_store.load.load_generation_strategy_by_experiment_name"]], "load_generation_strategy_by_id() (in module ax.storage.sqa_store.load)": [[13, "ax.storage.sqa_store.load.load_generation_strategy_by_id"]], "logger (in module ax.storage.metric_registry)": [[13, "ax.storage.metric_registry.logger"]], "logical_early_stopping_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.logical_early_stopping_strategy_to_dict"]], "map_data_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.map_data_to_dict"]], "map_key_info_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.map_key_info_to_dict"]], "metric_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.metric_from_sqa"]], "metric_registry (ax.storage.registry_bundle.registrybundlebase property)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.metric_registry"]], "metric_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.metric_to_dict"]], "metric_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.metric_to_sqa"]], "metrics (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAExperiment.metrics"]], "metrics (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.metrics"]], "model_spec_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.model_spec_from_json"]], "model_spec_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.model_spec_to_dict"]], "multi_objective_benchmark_problem_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.multi_objective_benchmark_problem_to_dict"]], "multi_objective_optimization_config_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.multi_objective_optimization_config_to_dict"]], "multi_objective_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.multi_objective_to_dict"]], "multi_objective_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.multi_objective_to_sqa"]], "multi_type_experiment_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.multi_type_experiment_from_json"]], "multi_type_experiment_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.multi_type_experiment_to_dict"]], "object_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.object_from_json"]], "object_pairs_hook (ax.storage.sqa_store.json.jsonencodedtext attribute)": [[13, "ax.storage.sqa_store.json.JSONEncodedText.object_pairs_hook"]], "object_to_json() (in module ax.storage.json_store.encoder)": [[13, "ax.storage.json_store.encoder.object_to_json"]], "objective_threshold_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.objective_threshold_to_sqa"]], "objective_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.objective_to_dict"]], "objective_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.objective_to_sqa"]], "observation_features_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.observation_features_to_dict"]], "opt_config_and_tracking_metrics_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.opt_config_and_tracking_metrics_from_sqa"]], "optimization_config_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.optimization_config_to_dict"]], "optimization_config_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.optimization_config_to_sqa"]], "order_parameter_constraint_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.order_parameter_constraint_to_dict"]], "outcome_constraint_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.outcome_constraint_to_dict"]], "outcome_constraint_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.outcome_constraint_to_sqa"]], "outcome_transform_type_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.outcome_transform_type_from_json"]], "parameter_constraint_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.parameter_constraint_from_sqa"]], "parameter_constraint_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.parameter_constraint_to_dict"]], "parameter_constraint_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.parameter_constraint_to_sqa"]], "parameter_constraints (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAExperiment.parameter_constraints"]], "parameter_constraints (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.parameter_constraints"]], "parameter_constraints_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.parameter_constraints_from_json"]], "parameter_distribution_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.parameter_distribution_to_dict"]], "parameter_distribution_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.parameter_distribution_to_sqa"]], "parameter_distributions_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.parameter_distributions_from_sqa"]], "parameter_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.parameter_from_sqa"]], "parameter_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.parameter_to_sqa"]], "parameters (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAExperiment.parameters"]], "parameters (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.parameters"]], "pathlib_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.pathlib_from_json"]], "pathlib_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.pathlib_to_dict"]], "percentile_early_stopping_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.percentile_early_stopping_strategy_to_dict"]], "process_bind_param() (ax.storage.sqa_store.json.jsonencodedobject method)": [[13, "ax.storage.sqa_store.json.JSONEncodedObject.process_bind_param"]], "process_bind_param() (ax.storage.sqa_store.sqa_enum.basenullableenum method)": [[13, "ax.storage.sqa_store.sqa_enum.BaseNullableEnum.process_bind_param"]], "process_bind_param() (ax.storage.sqa_store.timestamp.inttimestamp method)": [[13, "ax.storage.sqa_store.timestamp.IntTimestamp.process_bind_param"]], "process_result_value() (ax.storage.sqa_store.json.jsonencodedobject method)": [[13, "ax.storage.sqa_store.json.JSONEncodedObject.process_result_value"]], "process_result_value() (ax.storage.sqa_store.sqa_enum.basenullableenum method)": [[13, "ax.storage.sqa_store.sqa_enum.BaseNullableEnum.process_result_value"]], "process_result_value() (ax.storage.sqa_store.timestamp.inttimestamp method)": [[13, "ax.storage.sqa_store.timestamp.IntTimestamp.process_result_value"]], "pytorch_cnn_torchvision_benchmark_problem_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.pytorch_cnn_torchvision_benchmark_problem_to_dict"]], "range_parameter_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.range_parameter_to_dict"]], "register_acquisition() (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.register_acquisition"]], "register_acquisition_function() (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.register_acquisition_function"]], "register_metric() (in module ax.storage.metric_registry)": [[13, "ax.storage.metric_registry.register_metric"]], "register_metrics() (in module ax.storage.metric_registry)": [[13, "ax.storage.metric_registry.register_metrics"]], "register_model() (in module ax.storage.botorch_modular_registry)": [[13, "ax.storage.botorch_modular_registry.register_model"]], "register_runner() (in module ax.storage.runner_registry)": [[13, "ax.storage.runner_registry.register_runner"]], "register_runners() (in module ax.storage.runner_registry)": [[13, "ax.storage.runner_registry.register_runners"]], "risk_measure_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.risk_measure_to_dict"]], "risk_measure_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.risk_measure_to_sqa"]], "robust_search_space_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.robust_search_space_to_dict"]], "robust_search_space_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.robust_search_space_to_sqa"]], "runner (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQATrial.runner"]], "runner_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.runner_from_sqa"]], "runner_registry (ax.storage.registry_bundle.registrybundlebase property)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.runner_registry"]], "runner_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.runner_to_dict"]], "runner_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.runner_to_sqa"]], "runners (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAExperiment.runners"]], "save_experiment() (in module ax.storage.json_store.save)": [[13, "ax.storage.json_store.save.save_experiment"]], "save_experiment() (in module ax.storage.sqa_store.save)": [[13, "ax.storage.sqa_store.save.save_experiment"]], "save_generation_strategy() (in module ax.storage.sqa_store.save)": [[13, "ax.storage.sqa_store.save.save_generation_strategy"]], "save_or_update_trial() (in module ax.storage.sqa_store.save)": [[13, "ax.storage.sqa_store.save.save_or_update_trial"]], "save_or_update_trials() (in module ax.storage.sqa_store.save)": [[13, "ax.storage.sqa_store.save.save_or_update_trials"]], "scalarized_objective_children_metrics (ax.storage.sqa_store.sqa_classes.sqametric attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAMetric.scalarized_objective_children_metrics"]], "scalarized_objective_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.scalarized_objective_to_dict"]], "scalarized_objective_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.scalarized_objective_to_sqa"]], "scalarized_outcome_constraint_children_metrics (ax.storage.sqa_store.sqa_classes.sqametric attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAMetric.scalarized_outcome_constraint_children_metrics"]], "scalarized_outcome_constraint_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.scalarized_outcome_constraint_to_sqa"]], "search_space_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.search_space_from_json"]], "search_space_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.search_space_from_sqa"]], "search_space_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.search_space_to_dict"]], "search_space_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.search_space_to_sqa"]], "session_scope() (in module ax.storage.sqa_store.db)": [[13, "ax.storage.sqa_store.db.session_scope"]], "single_objective_benchmark_problem_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.single_objective_benchmark_problem_to_dict"]], "sqa_config (ax.storage.registry_bundle.registrybundle property)": [[13, "ax.storage.registry_bundle.RegistryBundle.sqa_config"]], "sqa_config (ax.storage.registry_bundle.registrybundlebase property)": [[13, "ax.storage.registry_bundle.RegistryBundleBase.sqa_config"]], "stable_hash() (in module ax.storage.utils)": [[13, "ax.storage.utils.stable_hash"]], "sum_parameter_constraint_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.sum_parameter_constraint_to_dict"]], "surrogate_from_list_surrogate_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.surrogate_from_list_surrogate_json"]], "surrogate_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.surrogate_to_dict"]], "target_value (ax.storage.sqa_store.sqa_classes.sqaparameter attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAParameter.target_value"]], "tensor_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.tensor_from_json"]], "tensor_or_size_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.tensor_or_size_from_json"]], "tensor_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.tensor_to_dict"]], "threshold_early_stopping_strategy_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.threshold_early_stopping_strategy_to_dict"]], "time_abandoned (ax.storage.sqa_store.sqa_classes.sqaabandonedarm attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAAbandonedArm.time_abandoned"]], "time_completed (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQATrial.time_completed"]], "time_created (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAExperiment.time_created"]], "time_created (ax.storage.sqa_store.sqa_classes.sqageneratorrun attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAGeneratorRun.time_created"]], "time_created (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQATrial.time_created"]], "time_run_started (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQATrial.time_run_started"]], "time_staged (ax.storage.sqa_store.sqa_classes.sqatrial attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQATrial.time_staged"]], "transform_type_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.transform_type_from_json"]], "transform_type_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.transform_type_to_dict"]], "transition_criteria_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.transition_criteria_from_json"]], "transition_criterion_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.transition_criterion_to_dict"]], "trial_from_json() (in module ax.storage.json_store.decoders)": [[13, "ax.storage.json_store.decoders.trial_from_json"]], "trial_from_sqa() (ax.storage.sqa_store.decoder.decoder method)": [[13, "ax.storage.sqa_store.decoder.Decoder.trial_from_sqa"]], "trial_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.trial_to_dict"]], "trial_to_sqa() (ax.storage.sqa_store.encoder.encoder method)": [[13, "ax.storage.sqa_store.encoder.Encoder.trial_to_sqa"]], "trials (ax.storage.sqa_store.sqa_classes.sqaexperiment attribute)": [[13, "ax.storage.sqa_store.sqa_classes.SQAExperiment.trials"]], "trials_from_json() (in module ax.storage.json_store.decoder)": [[13, "ax.storage.json_store.decoder.trials_from_json"]], "update_generation_strategy() (in module ax.storage.sqa_store.save)": [[13, "ax.storage.sqa_store.save.update_generation_strategy"]], "update_outcome_constraint_on_experiment() (in module ax.storage.sqa_store.save)": [[13, "ax.storage.sqa_store.save.update_outcome_constraint_on_experiment"]], "update_properties_on_experiment() (in module ax.storage.sqa_store.save)": [[13, "ax.storage.sqa_store.save.update_properties_on_experiment"]], "update_properties_on_trial() (in module ax.storage.sqa_store.save)": [[13, "ax.storage.sqa_store.save.update_properties_on_trial"]], "update_runner_on_experiment() (in module ax.storage.sqa_store.save)": [[13, "ax.storage.sqa_store.save.update_runner_on_experiment"]], "url (ax.storage.sqa_store.structs.dbsettings attribute)": [[13, "ax.storage.sqa_store.structs.DBSettings.url"]], "validate_experiment_metadata() (ax.storage.sqa_store.encoder.encoder class method)": [[13, "ax.storage.sqa_store.encoder.Encoder.validate_experiment_metadata"]], "winsorization_config_to_dict() (in module ax.storage.json_store.encoders)": [[13, "ax.storage.json_store.encoders.winsorization_config_to_dict"]], "experimentcompletedrecord (class in ax.telemetry.experiment)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord"]], "experimentcreatedrecord (class in ax.telemetry.experiment)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord"]], "generationstrategycreatedrecord (class in ax.telemetry.generation_strategy)": [[14, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord"]], "schedulercompletedrecord (class in ax.telemetry.scheduler)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord"]], "schedulercreatedrecord (class in ax.telemetry.scheduler)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord"]], "arms_per_trial (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.arms_per_trial"]], "ax.telemetry": [[14, "module-ax.telemetry"]], "ax.telemetry.experiment": [[14, "module-ax.telemetry.experiment"]], "ax.telemetry.generation_strategy": [[14, "module-ax.telemetry.generation_strategy"]], "ax.telemetry.scheduler": [[14, "module-ax.telemetry.scheduler"]], "best_point_quality (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.best_point_quality"]], "dimensionality (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.dimensionality"]], "early_stopping_strategy_cls (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.early_stopping_strategy_cls"]], "experiment_completed_record (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.experiment_completed_record"]], "experiment_created_record (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.experiment_created_record"]], "experiment_name (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.experiment_name"]], "experiment_type (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.experiment_type"]], "flatten() (ax.telemetry.scheduler.schedulercompletedrecord method)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.flatten"]], "flatten() (ax.telemetry.scheduler.schedulercreatedrecord method)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.flatten"]], "from_experiment() (ax.telemetry.experiment.experimentcompletedrecord class method)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.from_experiment"]], "from_experiment() (ax.telemetry.experiment.experimentcreatedrecord class method)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.from_experiment"]], "from_generation_strategy() (ax.telemetry.generation_strategy.generationstrategycreatedrecord class method)": [[14, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.from_generation_strategy"]], "from_scheduler() (ax.telemetry.scheduler.schedulercompletedrecord class method)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.from_scheduler"]], "from_scheduler() (ax.telemetry.scheduler.schedulercreatedrecord class method)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.from_scheduler"]], "generation_strategy_created_record (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.generation_strategy_created_record"]], "generation_strategy_name (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[14, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.generation_strategy_name"]], "global_stopping_strategy_cls (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.global_stopping_strategy_cls"]], "hierarchical_tree_height (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.hierarchical_tree_height"]], "improvement_over_baseline (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.improvement_over_baseline"]], "max_parallelism (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[14, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.max_parallelism"]], "metric_cls_to_quantity (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.metric_cls_to_quantity"]], "model_fit_generalization (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.model_fit_generalization"]], "model_fit_quality (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.model_fit_quality"]], "model_std_generalization (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.model_std_generalization"]], "model_std_quality (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.model_std_quality"]], "num_abandoned_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.num_abandoned_trials"]], "num_bayesopt_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.num_bayesopt_trials"]], "num_completed_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.num_completed_trials"]], "num_continuous_range_parameters (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_continuous_range_parameters"]], "num_early_stopped_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.num_early_stopped_trials"]], "num_failed_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.num_failed_trials"]], "num_fixed_parameters (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_fixed_parameters"]], "num_initialization_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.num_initialization_trials"]], "num_int_range_parameters_large (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_int_range_parameters_large"]], "num_int_range_parameters_medium (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_int_range_parameters_medium"]], "num_int_range_parameters_small (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_int_range_parameters_small"]], "num_log_scale_range_parameters (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_log_scale_range_parameters"]], "num_map_metrics (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_map_metrics"]], "num_metric_fetch_e_encountered (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.num_metric_fetch_e_encountered"]], "num_objectives (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_objectives"]], "num_other_trials (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.num_other_trials"]], "num_outcome_constraints (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_outcome_constraints"]], "num_parameter_constraints (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_parameter_constraints"]], "num_requested_bayesopt_trials (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[14, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.num_requested_bayesopt_trials"]], "num_requested_initialization_trials (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[14, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.num_requested_initialization_trials"]], "num_requested_other_trials (ax.telemetry.generation_strategy.generationstrategycreatedrecord attribute)": [[14, "ax.telemetry.generation_strategy.GenerationStrategyCreatedRecord.num_requested_other_trials"]], "num_tracking_metrics (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_tracking_metrics"]], "num_trials_bad_due_to_err (ax.telemetry.scheduler.schedulercompletedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCompletedRecord.num_trials_bad_due_to_err"]], "num_unordered_choice_parameters_large (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_unordered_choice_parameters_large"]], "num_unordered_choice_parameters_medium (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_unordered_choice_parameters_medium"]], "num_unordered_choice_parameters_small (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.num_unordered_choice_parameters_small"]], "runner_cls (ax.telemetry.experiment.experimentcreatedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCreatedRecord.runner_cls"]], "scheduler_max_pending_trials (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.scheduler_max_pending_trials"]], "scheduler_total_trials (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.scheduler_total_trials"]], "total_fit_time (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.total_fit_time"]], "total_gen_time (ax.telemetry.experiment.experimentcompletedrecord attribute)": [[14, "ax.telemetry.experiment.ExperimentCompletedRecord.total_gen_time"]], "transformed_dimensionality (ax.telemetry.scheduler.schedulercreatedrecord attribute)": [[14, "ax.telemetry.scheduler.SchedulerCreatedRecord.transformed_dimensionality"]], "a000() (in module ax.utils.flake8_plugins.docstring_checker)": [[15, "ax.utils.flake8_plugins.docstring_checker.A000"]], "acqf_kwargs (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.ACQF_KWARGS"]], "autoset_surrogate (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.AUTOSET_SURROGATE"]], "asyncsimulatedbackendscheduler (class in ax.utils.testing.backend_scheduler)": [[15, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler"]], "aug_branin (class in ax.utils.measurement.synthetic_functions)": [[15, "ax.utils.measurement.synthetic_functions.Aug_Branin"]], "aug_hartmann6 (class in ax.utils.measurement.synthetic_functions)": [[15, "ax.utils.measurement.synthetic_functions.Aug_Hartmann6"]], "axoutputnamefilter (class in ax.utils.common.logger)": [[15, "ax.utils.common.logger.AxOutputNameFilter"]], "batch_init_conditions (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.BATCH_INIT_CONDITIONS"]], "backendsimulator (class in ax.utils.testing.backend_simulator)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator"]], "backendsimulatoroptions (class in ax.utils.testing.backend_simulator)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorOptions"]], "backendsimulatorstate (class in ax.utils.testing.backend_simulator)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorState"]], "backendsimulatortimestampmapmetric (class in ax.utils.testing.metrics.backend_simulator_map)": [[15, "ax.utils.testing.metrics.backend_simulator_map.BackendSimulatorTimestampMapMetric"]], "base (class in ax.utils.common.base)": [[15, "ax.utils.common.base.Base"]], "branin (class in ax.utils.measurement.synthetic_functions)": [[15, "ax.utils.measurement.synthetic_functions.Branin"]], "braninbackendmapmetric (class in ax.utils.testing.metrics.branin_backend_map)": [[15, "ax.utils.testing.metrics.branin_backend_map.BraninBackendMapMetric"]], "candidate_set (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.CANDIDATE_SET"]], "candidate_size (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.CANDIDATE_SIZE"]], "cnn (class in ax.utils.tutorials.cnn_utils)": [[15, "ax.utils.tutorials.cnn_utils.CNN"]], "cost_aware_utility (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.COST_AWARE_UTILITY"]], "cost_intercept (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.COST_INTERCEPT"]], "current_value (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.CURRENT_VALUE"]], "classdecorator (class in ax.utils.common.decorator)": [[15, "ax.utils.common.decorator.ClassDecorator"]], "customtestmetric (class in ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.CustomTestMetric"]], "customtestrunner (class in ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.CustomTestRunner"]], "decorate_private (ax.utils.common.decorator.classdecorator attribute)": [[15, "ax.utils.common.decorator.ClassDecorator.DECORATE_PRIVATE"]], "docstringchecker (class in ax.utils.flake8_plugins.docstring_checker)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker"]], "docstringcheckervisitor (class in ax.utils.flake8_plugins.docstring_checker)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor"]], "dummyearlystoppingstrategy (class in ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.DummyEarlyStoppingStrategy"]], "dummyglobalstoppingstrategy (class in ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.DummyGlobalStoppingStrategy"]], "expand (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.EXPAND"]], "expected_acqf_val (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.EXPECTED_ACQF_VAL"]], "err (class in ax.utils.common.result)": [[15, "ax.utils.common.result.Err"]], "error (class in ax.utils.flake8_plugins.docstring_checker)": [[15, "ax.utils.flake8_plugins.docstring_checker.Error"]], "fidelity_features (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.FIDELITY_FEATURES"]], "fidelity_weights (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.FIDELITY_WEIGHTS"]], "frac_random (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.FRAC_RANDOM"]], "full_parameterization (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.FULL_PARAMETERIZATION"]], "frombotorch (class in ax.utils.measurement.synthetic_functions)": [[15, "ax.utils.measurement.synthetic_functions.FromBotorch"]], "gaussianlinkmean() (in module ax.utils.sensitivity.sobol_measures)": [[15, "ax.utils.sensitivity.sobol_measures.GaussianLinkMean"]], "gpdgsmgpmean (class in ax.utils.sensitivity.derivative_measures)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean"]], "gpdgsmgpsampling (class in ax.utils.sensitivity.derivative_measures)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling"]], "hartmann6 (class in ax.utils.measurement.synthetic_functions)": [[15, "ax.utils.measurement.synthetic_functions.Hartmann6"]], "immutable_search_space_and_opt_conf (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.IMMUTABLE_SEARCH_SPACE_AND_OPT_CONF"]], "inittest (class in ax.utils.testing.test_init_files)": [[15, "ax.utils.testing.test_init_files.InitTest"]], "keys (class in ax.utils.common.constants)": [[15, "ax.utils.common.constants.Keys"]], "maximize (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.MAXIMIZE"]], "metadata (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.METADATA"]], "metric_names (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.METRIC_NAMES"]], "modelfitmetricprotocol (class in ax.utils.stats.model_fit_stats)": [[15, "ax.utils.stats.model_fit_stats.ModelFitMetricProtocol"]], "num_fantasies (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.NUM_FANTASIES"]], "num_inner_restarts (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.NUM_INNER_RESTARTS"]], "num_restarts (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.NUM_RESTARTS"]], "num_trace_observations (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.NUM_TRACE_OBSERVATIONS"]], "objective (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.OBJECTIVE"]], "only_surrogate (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.ONLY_SURROGATE"]], "optimizer_kwargs (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.OPTIMIZER_KWARGS"]], "ok (class in ax.utils.common.result)": [[15, "ax.utils.common.result.Ok"]], "pairwise_preference_query (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.PAIRWISE_PREFERENCE_QUERY"]], "preference_data (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.PREFERENCE_DATA"]], "primary_surrogate (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.PRIMARY_SURROGATE"]], "project (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.PROJECT"]], "probitlinkmean() (in module ax.utils.sensitivity.sobol_measures)": [[15, "ax.utils.sensitivity.sobol_measures.ProbitLinkMean"]], "qmc (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.QMC"]], "raw_inner_samples (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.RAW_INNER_SAMPLES"]], "raw_samples (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.RAW_SAMPLES"]], "refit_on_update (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.REFIT_ON_UPDATE"]], "result (class in ax.utils.common.result)": [[15, "ax.utils.common.result.Result"]], "sampler (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.SAMPLER"]], "seed_inner (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.SEED_INNER"]], "sequential (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.SEQUENTIAL"]], "state_dict (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.STATE_DICT"]], "subclass (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.SUBCLASS"]], "subset_model (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.SUBSET_MODEL"]], "serializationmixin (class in ax.utils.common.serialization)": [[15, "ax.utils.common.serialization.SerializationMixin"]], "simstatus (class in ax.utils.testing.backend_simulator)": [[15, "ax.utils.testing.backend_simulator.SimStatus"]], "simtrial (class in ax.utils.testing.backend_simulator)": [[15, "ax.utils.testing.backend_simulator.SimTrial"]], "sobolsensitivity (class in ax.utils.sensitivity.sobol_measures)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivity"]], "sobolsensitivitygpmean (class in ax.utils.sensitivity.sobol_measures)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean"]], "sobolsensitivitygpsampling (class in ax.utils.sensitivity.sobol_measures)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling"]], "sortablebase (class in ax.utils.common.base)": [[15, "ax.utils.common.base.SortableBase"]], "specialgenerationstrategy (class in ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.SpecialGenerationStrategy"]], "syntheticfunction (class in ax.utils.measurement.synthetic_functions)": [[15, "ax.utils.measurement.synthetic_functions.SyntheticFunction"]], "task_features (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.TASK_FEATURES"]], "trial_completion_timestamp (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.TRIAL_COMPLETION_TIMESTAMP"]], "testcase (class in ax.utils.common.testutils)": [[15, "ax.utils.common.testutils.TestCase"]], "testtrial (class in ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.TestTrial"]], "unwraperror": [[15, "ax.utils.common.result.UnwrapError"]], "warm_start_refitting (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.WARM_START_REFITTING"]], "x_baseline (ax.utils.common.constants.keys attribute)": [[15, "ax.utils.common.constants.Keys.X_BASELINE"]], "abandoned_arms() (ax.utils.testing.core_stubs.testtrial method)": [[15, "ax.utils.testing.core_stubs.TestTrial.abandoned_arms"]], "aggregation() (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean method)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.aggregation"]], "aggregation() (ax.utils.sensitivity.derivative_measures.gpdgsmgpsampling method)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling.aggregation"]], "agresti_coull_sem() (in module ax.utils.stats.statstools)": [[15, "ax.utils.stats.statstools.agresti_coull_sem"]], "all_trials (ax.utils.testing.backend_simulator.backendsimulator property)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.all_trials"]], "arms (ax.utils.testing.core_stubs.testtrial property)": [[15, "ax.utils.testing.core_stubs.TestTrial.arms"]], "arms_by_name() (ax.utils.testing.core_stubs.testtrial method)": [[15, "ax.utils.testing.core_stubs.TestTrial.arms_by_name"]], "assertaxbaseequal() (ax.utils.common.testutils.testcase method)": [[15, "ax.utils.common.testutils.TestCase.assertAxBaseEqual"]], "assertdictsalmostequal() (ax.utils.common.testutils.testcase method)": [[15, "ax.utils.common.testutils.TestCase.assertDictsAlmostEqual"]], "assertequal() (ax.utils.common.testutils.testcase method)": [[15, "ax.utils.common.testutils.TestCase.assertEqual"]], "assertraiseson() (ax.utils.common.testutils.testcase method)": [[15, "ax.utils.common.testutils.TestCase.assertRaisesOn"]], "ax.utils": [[15, "module-ax.utils"]], "ax.utils.common.base": [[15, "module-ax.utils.common.base"]], "ax.utils.common.constants": [[15, "module-ax.utils.common.constants"]], "ax.utils.common.decorator": [[15, "module-ax.utils.common.decorator"]], "ax.utils.common.docutils": [[15, "module-ax.utils.common.docutils"]], "ax.utils.common.equality": [[15, "module-ax.utils.common.equality"]], "ax.utils.common.executils": [[15, "module-ax.utils.common.executils"]], "ax.utils.common.kwargs": [[15, "module-ax.utils.common.kwargs"]], "ax.utils.common.logger": [[15, "module-ax.utils.common.logger"]], "ax.utils.common.mock": [[15, "module-ax.utils.common.mock"]], "ax.utils.common.result": [[15, "module-ax.utils.common.result"]], "ax.utils.common.serialization": [[15, "module-ax.utils.common.serialization"]], "ax.utils.common.testutils": [[15, "module-ax.utils.common.testutils"]], "ax.utils.common.timeutils": [[15, "module-ax.utils.common.timeutils"]], "ax.utils.common.typeutils": [[15, "module-ax.utils.common.typeutils"]], "ax.utils.common.typeutils_torch": [[15, "module-ax.utils.common.typeutils_torch"]], "ax.utils.flake8_plugins.docstring_checker": [[15, "module-ax.utils.flake8_plugins.docstring_checker"]], "ax.utils.measurement.synthetic_functions": [[15, "module-ax.utils.measurement.synthetic_functions"]], "ax.utils.notebook.plotting": [[15, "module-ax.utils.notebook.plotting"]], "ax.utils.report.render": [[15, "module-ax.utils.report.render"]], "ax.utils.sensitivity.derivative_gp": [[15, "module-ax.utils.sensitivity.derivative_gp"]], "ax.utils.sensitivity.derivative_measures": [[15, "module-ax.utils.sensitivity.derivative_measures"]], "ax.utils.sensitivity.sobol_measures": [[15, "module-ax.utils.sensitivity.sobol_measures"]], "ax.utils.stats.model_fit_stats": [[15, "module-ax.utils.stats.model_fit_stats"]], "ax.utils.stats.statstools": [[15, "module-ax.utils.stats.statstools"]], "ax.utils.testing.backend_scheduler": [[15, "module-ax.utils.testing.backend_scheduler"]], "ax.utils.testing.backend_simulator": [[15, "module-ax.utils.testing.backend_simulator"]], "ax.utils.testing.benchmark_stubs": [[15, "module-ax.utils.testing.benchmark_stubs"]], "ax.utils.testing.core_stubs": [[15, "module-ax.utils.testing.core_stubs"]], "ax.utils.testing.metrics.backend_simulator_map": [[15, "module-ax.utils.testing.metrics.backend_simulator_map"]], "ax.utils.testing.metrics.branin_backend_map": [[15, "module-ax.utils.testing.metrics.branin_backend_map"]], "ax.utils.testing.mock": [[15, "module-ax.utils.testing.mock"]], "ax.utils.testing.modeling_stubs": [[15, "module-ax.utils.testing.modeling_stubs"]], "ax.utils.testing.test_init_files": [[15, "module-ax.utils.testing.test_init_files"]], "ax.utils.testing.torch_stubs": [[15, "module-ax.utils.testing.torch_stubs"]], "ax.utils.testing.utils": [[15, "module-ax.utils.testing.utils"]], "ax.utils.tutorials.cnn_utils": [[15, "module-ax.utils.tutorials.cnn_utils"]], "ax_parameter_sens() (in module ax.utils.sensitivity.sobol_measures)": [[15, "ax.utils.sensitivity.sobol_measures.ax_parameter_sens"]], "backend_simulator (ax.utils.testing.backend_scheduler.asyncsimulatedbackendscheduler property)": [[15, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler.backend_simulator"]], "bootstrap_indices (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean attribute)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.bootstrap_indices"]], "build_file_handler() (in module ax.utils.common.logger)": [[15, "ax.utils.common.logger.build_file_handler"]], "build_stream_handler() (in module ax.utils.common.logger)": [[15, "ax.utils.common.logger.build_stream_handler"]], "callable_from_reference() (in module ax.utils.common.serialization)": [[15, "ax.utils.common.serialization.callable_from_reference"]], "callable_to_reference() (in module ax.utils.common.serialization)": [[15, "ax.utils.common.serialization.callable_to_reference"]], "check_a000() (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor method)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.check_A000"]], "checked_cast() (in module ax.utils.common.typeutils)": [[15, "ax.utils.common.typeutils.checked_cast"]], "checked_cast_dict() (in module ax.utils.common.typeutils)": [[15, "ax.utils.common.typeutils.checked_cast_dict"]], "checked_cast_list() (in module ax.utils.common.typeutils)": [[15, "ax.utils.common.typeutils.checked_cast_list"]], "checked_cast_optional() (in module ax.utils.common.typeutils)": [[15, "ax.utils.common.typeutils.checked_cast_optional"]], "checked_cast_to_tuple() (in module ax.utils.common.typeutils)": [[15, "ax.utils.common.typeutils.checked_cast_to_tuple"]], "coefficient_of_determination() (in module ax.utils.stats.model_fit_stats)": [[15, "ax.utils.stats.model_fit_stats.coefficient_of_determination"]], "col (ax.utils.flake8_plugins.docstring_checker.error attribute)": [[15, "ax.utils.flake8_plugins.docstring_checker.Error.col"]], "completed (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorState.completed"]], "completed (ax.utils.testing.backend_simulator.simstatus attribute)": [[15, "ax.utils.testing.backend_simulator.SimStatus.completed"], [15, "id0"]], "compute_derivatives_from_model_list() (in module ax.utils.sensitivity.derivative_measures)": [[15, "ax.utils.sensitivity.derivative_measures.compute_derivatives_from_model_list"]], "compute_model_fit_metrics() (in module ax.utils.stats.model_fit_stats)": [[15, "ax.utils.stats.model_fit_stats.compute_model_fit_metrics"]], "compute_sobol_indices_from_model_list() (in module ax.utils.sensitivity.sobol_measures)": [[15, "ax.utils.sensitivity.sobol_measures.compute_sobol_indices_from_model_list"]], "config (ax.utils.testing.modeling_stubs.transform_1 attribute)": [[15, "ax.utils.testing.modeling_stubs.transform_1.config"]], "config (ax.utils.testing.modeling_stubs.transform_2 attribute)": [[15, "ax.utils.testing.modeling_stubs.transform_2.config"]], "consolidate_kwargs() (in module ax.utils.common.kwargs)": [[15, "ax.utils.common.kwargs.consolidate_kwargs"]], "convert_to_timestamps() (ax.utils.testing.metrics.backend_simulator_map.backendsimulatortimestampmapmetric method)": [[15, "ax.utils.testing.metrics.backend_simulator_map.BackendSimulatorTimestampMapMetric.convert_to_timestamps"]], "convert_to_timestamps() (ax.utils.testing.metrics.branin_backend_map.braninbackendmapmetric method)": [[15, "ax.utils.testing.metrics.branin_backend_map.BraninBackendMapMetric.convert_to_timestamps"]], "copy_doc() (in module ax.utils.common.docutils)": [[15, "ax.utils.common.docutils.copy_doc"]], "current_timestamp_in_millis() (in module ax.utils.common.timeutils)": [[15, "ax.utils.common.timeutils.current_timestamp_in_millis"]], "dataframe_equals() (in module ax.utils.common.equality)": [[15, "ax.utils.common.equality.dataframe_equals"]], "datetime_equals() (in module ax.utils.common.equality)": [[15, "ax.utils.common.equality.datetime_equals"]], "db_id (ax.utils.common.base.base property)": [[15, "ax.utils.common.base.Base.db_id"]], "decorate_callable() (ax.utils.common.decorator.classdecorator method)": [[15, "ax.utils.common.decorator.ClassDecorator.decorate_callable"]], "decorate_callable() (ax.utils.common.logger.disable_logger method)": [[15, "ax.utils.common.logger.disable_logger.decorate_callable"]], "decorate_callable() (ax.utils.common.logger.disable_loggers method)": [[15, "ax.utils.common.logger.disable_loggers.decorate_callable"]], "decorate_class() (ax.utils.common.decorator.classdecorator method)": [[15, "ax.utils.common.decorator.ClassDecorator.decorate_class"]], "deserialize_init_args() (ax.utils.common.serialization.serializationmixin class method)": [[15, "ax.utils.common.serialization.SerializationMixin.deserialize_init_args"]], "dim (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpsampling property)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling.dim"]], "disable_logger (class in ax.utils.common.logger)": [[15, "ax.utils.common.logger.disable_logger"]], "disable_loggers (class in ax.utils.common.logger)": [[15, "ax.utils.common.logger.disable_loggers"]], "disable_profiler() (in module ax.utils.common.testutils)": [[15, "ax.utils.common.testutils.disable_profiler"]], "domain (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[15, "ax.utils.measurement.synthetic_functions.SyntheticFunction.domain"]], "equality_typechecker() (in module ax.utils.common.equality)": [[15, "ax.utils.common.equality.equality_typechecker"]], "err (ax.utils.common.result.err property)": [[15, "ax.utils.common.result.Err.err"]], "err (ax.utils.common.result.ok property)": [[15, "ax.utils.common.result.Ok.err"]], "err (ax.utils.common.result.result property)": [[15, "ax.utils.common.result.Result.err"]], "errors (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor attribute)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.errors"]], "evaluate() (in module ax.utils.tutorials.cnn_utils)": [[15, "ax.utils.tutorials.cnn_utils.evaluate"]], "evalute_function() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.evalute_function"]], "experiment (ax.utils.testing.backend_scheduler.asyncsimulatedbackendscheduler attribute)": [[15, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler.experiment"]], "extract_init_args() (in module ax.utils.common.serialization)": [[15, "ax.utils.common.serialization.extract_init_args"]], "f() (ax.utils.measurement.synthetic_functions.syntheticfunction method)": [[15, "ax.utils.measurement.synthetic_functions.SyntheticFunction.f"]], "failed (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorState.failed"]], "failed (ax.utils.testing.backend_simulator.simstatus attribute)": [[15, "ax.utils.testing.backend_simulator.SimStatus.failed"], [15, "id2"]], "failure_rate (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.failure_rate"]], "fast_botorch_optimize() (in module ax.utils.testing.mock)": [[15, "ax.utils.testing.mock.fast_botorch_optimize"]], "fast_botorch_optimize_context_manager() (in module ax.utils.testing.mock)": [[15, "ax.utils.testing.mock.fast_botorch_optimize_context_manager"]], "fetch_trial_data() (ax.utils.testing.metrics.backend_simulator_map.backendsimulatortimestampmapmetric method)": [[15, "ax.utils.testing.metrics.backend_simulator_map.BackendSimulatorTimestampMapMetric.fetch_trial_data"]], "fikename (ax.utils.flake8_plugins.docstring_checker.docstringchecker attribute)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.fikename"]], "filter() (ax.utils.common.logger.axoutputnamefilter method)": [[15, "ax.utils.common.logger.AxOutputNameFilter.filter"]], "filter_kwargs() (in module ax.utils.common.kwargs)": [[15, "ax.utils.common.kwargs.filter_kwargs"]], "first_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.first_order_indices"]], "first_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpmean method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean.first_order_indices"]], "first_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpsampling method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling.first_order_indices"]], "fmax (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[15, "ax.utils.measurement.synthetic_functions.SyntheticFunction.fmax"]], "fmin (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[15, "ax.utils.measurement.synthetic_functions.SyntheticFunction.fmin"]], "format() (in module ax.utils.testing.backend_simulator)": [[15, "ax.utils.testing.backend_simulator.format"]], "forward() (ax.utils.tutorials.cnn_utils.cnn method)": [[15, "ax.utils.tutorials.cnn_utils.CNN.forward"]], "from_botorch() (in module ax.utils.measurement.synthetic_functions)": [[15, "ax.utils.measurement.synthetic_functions.from_botorch"]], "from_state() (ax.utils.testing.backend_simulator.backendsimulator class method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.from_state"]], "gen_for_multiple_trials_with_multiple_models() (ax.utils.testing.core_stubs.specialgenerationstrategy method)": [[15, "ax.utils.testing.core_stubs.SpecialGenerationStrategy.gen_for_multiple_trials_with_multiple_models"]], "generate_all_input_matrix() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.generate_all_input_matrix"]], "generation_strategy (ax.utils.testing.backend_scheduler.asyncsimulatedbackendscheduler attribute)": [[15, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler.generation_strategy"]], "generator_runs() (ax.utils.testing.core_stubs.testtrial method)": [[15, "ax.utils.testing.core_stubs.TestTrial.generator_runs"]], "generic_equals() (in module ax.utils.testing.utils)": [[15, "ax.utils.testing.utils.generic_equals"]], "get_kxx_inv() (in module ax.utils.sensitivity.derivative_gp)": [[15, "ax.utils.sensitivity.derivative_gp.get_KXX_inv"]], "get_kxx_dx() (in module ax.utils.sensitivity.derivative_gp)": [[15, "ax.utils.sensitivity.derivative_gp.get_KxX_dx"]], "get_kxx_dx2() (in module ax.utils.sensitivity.derivative_gp)": [[15, "ax.utils.sensitivity.derivative_gp.get_Kxx_dx2"]], "get_abandoned_arm() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_abandoned_arm"]], "get_acquisition_function_type() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_acquisition_function_type"]], "get_acquisition_type() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_acquisition_type"]], "get_aggregated_benchmark_result() (in module ax.utils.testing.benchmark_stubs)": [[15, "ax.utils.testing.benchmark_stubs.get_aggregated_benchmark_result"]], "get_and_early_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_and_early_stopping_strategy"]], "get_arm() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_arm"]], "get_arm_weights1() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_arm_weights1"]], "get_arm_weights2() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_arm_weights2"]], "get_arms() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_arms"]], "get_arms_from_dict() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_arms_from_dict"]], "get_augmented_branin_metric() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_augmented_branin_metric"]], "get_augmented_branin_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_augmented_branin_objective"]], "get_augmented_branin_optimization_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_augmented_branin_optimization_config"]], "get_augmented_hartmann_metric() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_augmented_hartmann_metric"]], "get_augmented_hartmann_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_augmented_hartmann_objective"]], "get_augmented_hartmann_optimization_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_augmented_hartmann_optimization_config"]], "get_batch_trial() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_batch_trial"]], "get_batch_trial_with_repeated_arms() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_batch_trial_with_repeated_arms"]], "get_benchmark_problem() (in module ax.utils.testing.benchmark_stubs)": [[15, "ax.utils.testing.benchmark_stubs.get_benchmark_problem"]], "get_benchmark_result() (in module ax.utils.testing.benchmark_stubs)": [[15, "ax.utils.testing.benchmark_stubs.get_benchmark_result"]], "get_botorch_model() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_botorch_model"]], "get_botorch_model_with_default_acquisition_class() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_botorch_model_with_default_acquisition_class"]], "get_botorch_model_with_surrogate_specs() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_botorch_model_with_surrogate_specs"]], "get_branin_arms() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_arms"]], "get_branin_data() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_data"]], "get_branin_data_batch() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_data_batch"]], "get_branin_data_multi_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_data_multi_objective"]], "get_branin_experiment() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_experiment"]], "get_branin_experiment_with_multi_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_experiment_with_multi_objective"]], "get_branin_experiment_with_status_quo_trials() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_experiment_with_status_quo_trials"]], "get_branin_experiment_with_timestamp_map_metric() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_experiment_with_timestamp_map_metric"]], "get_branin_metric() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_metric"]], "get_branin_multi_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_multi_objective"]], "get_branin_multi_objective_optimization_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_multi_objective_optimization_config"]], "get_branin_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_objective"]], "get_branin_optimization_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_optimization_config"]], "get_branin_outcome_constraint() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_outcome_constraint"]], "get_branin_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_search_space"]], "get_branin_with_multi_task() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_branin_with_multi_task"]], "get_chained_input_transform() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_chained_input_transform"]], "get_choice_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_choice_parameter"]], "get_custom_multi_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_custom_multi_objective"]], "get_data() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_data"]], "get_dataset() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_dataset"]], "get_default_scheduler_options() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_default_scheduler_options"]], "get_dict_lookup_metric() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_dict_lookup_metric"]], "get_discrete_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_discrete_search_space"]], "get_experiment() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment"]], "get_experiment_for_value() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_experiment_for_value"]], "get_experiment_with_batch_and_single_trial() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_batch_and_single_trial"]], "get_experiment_with_batch_trial() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_batch_trial"]], "get_experiment_with_custom_runner_and_metric() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_custom_runner_and_metric"]], "get_experiment_with_data() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_data"]], "get_experiment_with_map_data() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_map_data"]], "get_experiment_with_map_data_type() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_map_data_type"]], "get_experiment_with_multi_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_multi_objective"]], "get_experiment_with_observations() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_observations"]], "get_experiment_with_repeated_arms() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_repeated_arms"]], "get_experiment_with_scalarized_objective_and_outcome_constraint() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_scalarized_objective_and_outcome_constraint"]], "get_experiment_with_trial() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_trial"]], "get_experiment_with_trial_with_ttl() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_experiment_with_trial_with_ttl"]], "get_factorial_experiment() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_factorial_experiment"]], "get_factorial_metric() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_factorial_metric"]], "get_factorial_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_factorial_search_space"]], "get_fixed_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_fixed_parameter"]], "get_function_argument_names() (in module ax.utils.common.kwargs)": [[15, "ax.utils.common.kwargs.get_function_argument_names"]], "get_function_default_arguments() (in module ax.utils.common.kwargs)": [[15, "ax.utils.common.kwargs.get_function_default_arguments"]], "get_gamma_prior() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_gamma_prior"]], "get_generation_strategy() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_generation_strategy"]], "get_generator_run() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_generator_run"]], "get_generator_run2() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_generator_run2"]], "get_hartmann_metric() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_hartmann_metric"]], "get_hartmann_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_hartmann_objective"]], "get_hartmann_optimization_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_hartmann_optimization_config"]], "get_hartmann_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_hartmann_search_space"]], "get_hierarchical_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_hierarchical_search_space"]], "get_hierarchical_search_space_experiment() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_hierarchical_search_space_experiment"]], "get_high_dimensional_branin_experiment() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_high_dimensional_branin_experiment"]], "get_hss_trials_with_fixed_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_hss_trials_with_fixed_parameter"]], "get_improvement_global_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_improvement_global_stopping_strategy"]], "get_input_transform_type() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_input_transform_type"]], "get_interval() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_interval"]], "get_l2_reg_weight_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_l2_reg_weight_parameter"]], "get_large_factorial_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_large_factorial_search_space"]], "get_large_ordinal_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_large_ordinal_search_space"]], "get_legacy_list_surrogate_generation_step_as_dict() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_legacy_list_surrogate_generation_step_as_dict"]], "get_logger() (in module ax.utils.common.logger)": [[15, "ax.utils.common.logger.get_logger"]], "get_lr_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_lr_parameter"]], "get_many_branin_objective_opt_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_many_branin_objective_opt_config"]], "get_map_data() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_map_data"]], "get_map_key_info() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_map_key_info"]], "get_map_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_map_objective"]], "get_map_optimization_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_map_optimization_config"]], "get_metric() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_metric"]], "get_mll_type() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_mll_type"]], "get_model_covariance() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_model_covariance"]], "get_model_mean() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_model_mean"]], "get_model_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_model_parameter"]], "get_model_predictions() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_model_predictions"]], "get_model_predictions_per_arm() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_model_predictions_per_arm"]], "get_model_type() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_model_type"]], "get_moo_surrogate() (in module ax.utils.testing.benchmark_stubs)": [[15, "ax.utils.testing.benchmark_stubs.get_moo_surrogate"]], "get_multi_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_multi_objective"]], "get_multi_objective_benchmark_problem() (in module ax.utils.testing.benchmark_stubs)": [[15, "ax.utils.testing.benchmark_stubs.get_multi_objective_benchmark_problem"]], "get_multi_objective_optimization_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_multi_objective_optimization_config"]], "get_multi_type_experiment() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_multi_type_experiment"]], "get_multi_type_experiment_with_multi_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_multi_type_experiment_with_multi_objective"]], "get_non_monolithic_branin_moo_data() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_non_monolithic_branin_moo_data"]], "get_num_boost_rounds_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_num_boost_rounds_parameter"]], "get_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_objective"]], "get_objective_threshold() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_objective_threshold"]], "get_observation() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_observation"]], "get_observation1() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_observation1"]], "get_observation1trans() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_observation1trans"]], "get_observation2() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_observation2"]], "get_observation2trans() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_observation2trans"]], "get_observation_features() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_observation_features"]], "get_observation_status_quo0() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_observation_status_quo0"]], "get_observation_status_quo1() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_observation_status_quo1"]], "get_optimization_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_optimization_config"]], "get_optimization_config_no_constraints() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_optimization_config_no_constraints"]], "get_or_early_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_or_early_stopping_strategy"]], "get_order_constraint() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_order_constraint"]], "get_ordered_choice_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_ordered_choice_parameter"]], "get_outcome_constraint() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_outcome_constraint"]], "get_outcome_transfrom_type() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_outcome_transfrom_type"]], "get_parameter_constraint() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_parameter_constraint"]], "get_parameter_distribution() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_parameter_distribution"]], "get_partition_data_loaders() (in module ax.utils.tutorials.cnn_utils)": [[15, "ax.utils.tutorials.cnn_utils.get_partition_data_loaders"]], "get_pathlib_path() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_pathlib_path"]], "get_percentile_early_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_percentile_early_stopping_strategy"]], "get_percentile_early_stopping_strategy_with_non_objective_metric_name() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_percentile_early_stopping_strategy_with_non_objective_metric_name"]], "get_percentile_early_stopping_strategy_with_true_objective_metric_name() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_percentile_early_stopping_strategy_with_true_objective_metric_name"]], "get_range_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_range_parameter"]], "get_range_parameter2() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_range_parameter2"]], "get_risk_measure() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_risk_measure"]], "get_robust_branin_experiment() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_robust_branin_experiment"]], "get_robust_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_robust_search_space"]], "get_robust_search_space_environmental() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_robust_search_space_environmental"]], "get_scalarized_objective() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_scalarized_objective"]], "get_scalarized_outcome_constraint() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_scalarized_outcome_constraint"]], "get_scheduler_options_batch_trial() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_scheduler_options_batch_trial"]], "get_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_search_space"]], "get_search_space_for_range_value() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_search_space_for_range_value"]], "get_search_space_for_range_values() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_search_space_for_range_values"]], "get_search_space_for_value() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_search_space_for_value"]], "get_search_space_with_choice_parameters() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_search_space_with_choice_parameters"]], "get_sebo_acquisition_class() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_sebo_acquisition_class"]], "get_sim_trial_by_index() (ax.utils.testing.backend_simulator.backendsimulator method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.get_sim_trial_by_index"]], "get_single_objective_benchmark_problem() (in module ax.utils.testing.benchmark_stubs)": [[15, "ax.utils.testing.benchmark_stubs.get_single_objective_benchmark_problem"]], "get_small_discrete_search_space() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_small_discrete_search_space"]], "get_sobol_benchmark_method() (in module ax.utils.testing.benchmark_stubs)": [[15, "ax.utils.testing.benchmark_stubs.get_sobol_benchmark_method"]], "get_sobol_gpei_benchmark_method() (in module ax.utils.testing.benchmark_stubs)": [[15, "ax.utils.testing.benchmark_stubs.get_sobol_gpei_benchmark_method"]], "get_soo_surrogate() (in module ax.utils.testing.benchmark_stubs)": [[15, "ax.utils.testing.benchmark_stubs.get_soo_surrogate"]], "get_status_quo() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_status_quo"]], "get_sum_constraint1() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_sum_constraint1"]], "get_sum_constraint2() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_sum_constraint2"]], "get_surrogate() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_surrogate"]], "get_surrogate_as_dict() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_surrogate_as_dict"]], "get_surrogate_generation_step() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_surrogate_generation_step"]], "get_surrogate_spec_as_dict() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_surrogate_spec_as_dict"]], "get_synthetic_runner() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_synthetic_runner"]], "get_task_choice_parameter() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_task_choice_parameter"]], "get_test_map_data_experiment() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_test_map_data_experiment"]], "get_threshold_early_stopping_strategy() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_threshold_early_stopping_strategy"]], "get_torch_test_data() (in module ax.utils.testing.torch_stubs)": [[15, "ax.utils.testing.torch_stubs.get_torch_test_data"]], "get_transform_type() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.get_transform_type"]], "get_trial() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_trial"]], "get_weights() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_weights"]], "get_weights_from_dict() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_weights_from_dict"]], "get_winsorization_config() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.get_winsorization_config"]], "gradient_absolute_measure() (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean method)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.gradient_absolute_measure"]], "gradient_measure() (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean method)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.gradient_measure"]], "gradients_square_measure() (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean method)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.gradients_square_measure"]], "h2_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.h2_html"]], "h3_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.h3_html"]], "handle_exceptions_in_retries() (in module ax.utils.common.executils)": [[15, "ax.utils.common.executils.handle_exceptions_in_retries"]], "informative_failure_on_none() (in module ax.utils.measurement.synthetic_functions)": [[15, "ax.utils.measurement.synthetic_functions.informative_failure_on_none"]], "init_notebook_plotting() (in module ax.utils.notebook.plotting)": [[15, "ax.utils.notebook.plotting.init_notebook_plotting"]], "internal_clock (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.internal_clock"]], "inverse_variance_weight() (in module ax.utils.stats.statstools)": [[15, "ax.utils.stats.statstools.inverse_variance_weight"]], "is_copy_doc_call() (in module ax.utils.flake8_plugins.docstring_checker)": [[15, "ax.utils.flake8_plugins.docstring_checker.is_copy_doc_call"]], "is_err() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.is_err"]], "is_err() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.is_err"]], "is_err() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.is_err"]], "is_ok() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.is_ok"]], "is_ok() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.is_ok"]], "is_ok() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.is_ok"]], "lineno (ax.utils.flake8_plugins.docstring_checker.error attribute)": [[15, "ax.utils.flake8_plugins.docstring_checker.Error.lineno"]], "link_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.link_html"]], "list_item_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.list_item_html"]], "load_mnist() (in module ax.utils.tutorials.cnn_utils)": [[15, "ax.utils.tutorials.cnn_utils.load_mnist"]], "logger (ax.utils.testing.backend_scheduler.asyncsimulatedbackendscheduler attribute)": [[15, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler.logger"]], "lookup_trial_index_status() (ax.utils.testing.backend_simulator.backendsimulator method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.lookup_trial_index_status"]], "make_indices_str() (in module ax.utils.common.logger)": [[15, "ax.utils.common.logger.make_indices_str"]], "map() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.map"]], "map() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.map"]], "map() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.map"]], "map_err() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.map_err"]], "map_err() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.map_err"]], "map_err() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.map_err"]], "map_or() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.map_or"]], "map_or() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.map_or"]], "map_or() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.map_or"]], "map_or_else() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.map_or_else"]], "map_or_else() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.map_or_else"]], "map_or_else() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.map_or_else"]], "marginal_effects() (in module ax.utils.stats.statstools)": [[15, "ax.utils.stats.statstools.marginal_effects"]], "markdown_messages (ax.utils.testing.backend_scheduler.asyncsimulatedbackendscheduler attribute)": [[15, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler.markdown_messages"]], "max_concurrency (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.max_concurrency"]], "maximums (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[15, "ax.utils.measurement.synthetic_functions.SyntheticFunction.maximums"]], "mean_gradients (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean attribute)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.mean_gradients"]], "mean_gradients_btsp (ax.utils.sensitivity.derivative_measures.gpdgsmgpmean attribute)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpMean.mean_gradients_btsp"]], "mean_of_the_standardized_error() (in module ax.utils.stats.model_fit_stats)": [[15, "ax.utils.stats.model_fit_stats.mean_of_the_standardized_error"]], "message (ax.utils.flake8_plugins.docstring_checker.error attribute)": [[15, "ax.utils.flake8_plugins.docstring_checker.Error.message"]], "minimums (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[15, "ax.utils.measurement.synthetic_functions.SyntheticFunction.minimums"]], "mock_patch_method_original() (in module ax.utils.common.mock)": [[15, "ax.utils.common.mock.mock_patch_method_original"]], "modelbridge (ax.utils.testing.modeling_stubs.transform_1 attribute)": [[15, "ax.utils.testing.modeling_stubs.transform_1.modelbridge"]], "modelbridge (ax.utils.testing.modeling_stubs.transform_2 attribute)": [[15, "ax.utils.testing.modeling_stubs.transform_2.modelbridge"]], "name (ax.utils.flake8_plugins.docstring_checker.docstringchecker attribute)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.name"]], "name (ax.utils.measurement.synthetic_functions.frombotorch property)": [[15, "ax.utils.measurement.synthetic_functions.FromBotorch.name"]], "name (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[15, "ax.utils.measurement.synthetic_functions.SyntheticFunction.name"]], "named_tuple_to_dict() (in module ax.utils.common.serialization)": [[15, "ax.utils.common.serialization.named_tuple_to_dict"]], "new_error() (in module ax.utils.flake8_plugins.docstring_checker)": [[15, "ax.utils.flake8_plugins.docstring_checker.new_error"]], "new_trial() (ax.utils.testing.backend_simulator.backendsimulator method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.new_trial"]], "not_none() (in module ax.utils.common.typeutils)": [[15, "ax.utils.common.typeutils.not_none"]], "num_completed (ax.utils.testing.backend_simulator.backendsimulator property)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.num_completed"]], "num_failed (ax.utils.testing.backend_simulator.backendsimulator property)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.num_failed"]], "num_queued (ax.utils.testing.backend_simulator.backendsimulator property)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.num_queued"]], "num_running (ax.utils.testing.backend_simulator.backendsimulator property)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.num_running"]], "numpy_type_to_python_type() (in module ax.utils.common.typeutils)": [[15, "ax.utils.common.typeutils.numpy_type_to_python_type"]], "object_attribute_dicts_equal() (in module ax.utils.common.equality)": [[15, "ax.utils.common.equality.object_attribute_dicts_equal"]], "object_attribute_dicts_find_unequal_fields() (in module ax.utils.common.equality)": [[15, "ax.utils.common.equality.object_attribute_dicts_find_unequal_fields"]], "ok (ax.utils.common.result.err property)": [[15, "ax.utils.common.result.Err.ok"]], "ok (ax.utils.common.result.ok property)": [[15, "ax.utils.common.result.Ok.ok"]], "ok (ax.utils.common.result.result property)": [[15, "ax.utils.common.result.Result.ok"]], "options (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorState.options"]], "p_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.p_html"]], "positive_part_james_stein() (in module ax.utils.stats.statstools)": [[15, "ax.utils.stats.statstools.positive_part_james_stein"]], "posterior_derivative() (in module ax.utils.sensitivity.derivative_gp)": [[15, "ax.utils.sensitivity.derivative_gp.posterior_derivative"]], "properties (ax.utils.testing.metrics.backend_simulator_map.backendsimulatortimestampmapmetric attribute)": [[15, "ax.utils.testing.metrics.backend_simulator_map.BackendSimulatorTimestampMapMetric.properties"]], "properties (ax.utils.testing.metrics.branin_backend_map.braninbackendmapmetric attribute)": [[15, "ax.utils.testing.metrics.branin_backend_map.BraninBackendMapMetric.properties"]], "queued (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorState.queued"]], "queued (ax.utils.testing.backend_simulator.simstatus attribute)": [[15, "ax.utils.testing.backend_simulator.SimStatus.queued"], [15, "id3"]], "relativize() (in module ax.utils.stats.statstools)": [[15, "ax.utils.stats.statstools.relativize"]], "relativize_data() (in module ax.utils.stats.statstools)": [[15, "ax.utils.stats.statstools.relativize_data"]], "render() (in module ax.utils.notebook.plotting)": [[15, "ax.utils.notebook.plotting.render"]], "render_report_elements() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.render_report_elements"]], "required_dimensionality (ax.utils.measurement.synthetic_functions.syntheticfunction property)": [[15, "ax.utils.measurement.synthetic_functions.SyntheticFunction.required_dimensionality"]], "reset() (ax.utils.testing.backend_simulator.backendsimulator method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.reset"]], "retry_on_exception() (in module ax.utils.common.executils)": [[15, "ax.utils.common.executils.retry_on_exception"]], "run() (ax.utils.flake8_plugins.docstring_checker.docstringchecker method)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.run"]], "run() (ax.utils.testing.core_stubs.customtestrunner method)": [[15, "ax.utils.testing.core_stubs.CustomTestRunner.run"]], "run_branin_experiment_with_generation_strategy() (in module ax.utils.testing.core_stubs)": [[15, "ax.utils.testing.core_stubs.run_branin_experiment_with_generation_strategy"]], "run_trial() (ax.utils.testing.backend_simulator.backendsimulator method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.run_trial"]], "running (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorState.running"]], "running (ax.utils.testing.backend_simulator.simstatus attribute)": [[15, "ax.utils.testing.backend_simulator.SimStatus.running"], [15, "id4"]], "same_elements() (in module ax.utils.common.equality)": [[15, "ax.utils.common.equality.same_elements"]], "samples_gradients (ax.utils.sensitivity.derivative_measures.gpdgsmgpsampling attribute)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling.samples_gradients"]], "samples_gradients_btsp (ax.utils.sensitivity.derivative_measures.gpdgsmgpsampling attribute)": [[15, "ax.utils.sensitivity.derivative_measures.GpDGSMGpSampling.samples_gradients_btsp"]], "second_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.second_order_indices"]], "second_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpmean method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean.second_order_indices"]], "second_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpsampling method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling.second_order_indices"]], "serialize_init_args() (ax.utils.common.serialization.serializationmixin class method)": [[15, "ax.utils.common.serialization.SerializationMixin.serialize_init_args"]], "serialize_init_args() (in module ax.utils.common.serialization)": [[15, "ax.utils.common.serialization.serialize_init_args"]], "setup() (ax.utils.common.testutils.testcase method)": [[15, "ax.utils.common.testutils.TestCase.setUp"]], "set_stderr_log_level() (in module ax.utils.common.logger)": [[15, "ax.utils.common.logger.set_stderr_log_level"]], "should_check() (in module ax.utils.flake8_plugins.docstring_checker)": [[15, "ax.utils.flake8_plugins.docstring_checker.should_check"]], "should_stop_trials_early() (ax.utils.testing.backend_scheduler.asyncsimulatedbackendscheduler method)": [[15, "ax.utils.testing.backend_scheduler.AsyncSimulatedBackendScheduler.should_stop_trials_early"]], "should_stop_trials_early() (ax.utils.testing.core_stubs.dummyearlystoppingstrategy method)": [[15, "ax.utils.testing.core_stubs.DummyEarlyStoppingStrategy.should_stop_trials_early"]], "silence_stderr() (ax.utils.common.testutils.testcase static method)": [[15, "ax.utils.common.testutils.TestCase.silence_stderr"]], "sim_completed_time (ax.utils.testing.backend_simulator.simtrial attribute)": [[15, "ax.utils.testing.backend_simulator.SimTrial.sim_completed_time"], [15, "id6"]], "sim_queued_time (ax.utils.testing.backend_simulator.simtrial attribute)": [[15, "ax.utils.testing.backend_simulator.SimTrial.sim_queued_time"], [15, "id7"]], "sim_runtime (ax.utils.testing.backend_simulator.simtrial attribute)": [[15, "ax.utils.testing.backend_simulator.SimTrial.sim_runtime"], [15, "id8"]], "sim_start_time (ax.utils.testing.backend_simulator.simtrial attribute)": [[15, "ax.utils.testing.backend_simulator.SimTrial.sim_start_time"], [15, "id9"]], "skip_fit_gpytorch_mll() (in module ax.utils.testing.mock)": [[15, "ax.utils.testing.mock.skip_fit_gpytorch_mll"]], "skip_fit_gpytorch_mll_context_manager() (in module ax.utils.testing.mock)": [[15, "ax.utils.testing.mock.skip_fit_gpytorch_mll_context_manager"]], "sobol_gpei_generation_node_gs() (in module ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.sobol_gpei_generation_node_gs"]], "split_dataset() (in module ax.utils.tutorials.cnn_utils)": [[15, "ax.utils.tutorials.cnn_utils.split_dataset"]], "state() (ax.utils.testing.backend_simulator.backendsimulator method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.state"]], "status() (ax.utils.testing.backend_simulator.backendsimulator method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.status"]], "std_of_the_standardized_error() (in module ax.utils.stats.model_fit_stats)": [[15, "ax.utils.stats.model_fit_stats.std_of_the_standardized_error"]], "stop_trial() (ax.utils.testing.backend_simulator.backendsimulator method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.stop_trial"]], "table_cell_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.table_cell_html"]], "table_heading_cell_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.table_heading_cell_html"]], "table_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.table_html"]], "table_row_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.table_row_html"]], "test_initfiles() (ax.utils.testing.test_init_files.inittest method)": [[15, "ax.utils.testing.test_init_files.InitTest.test_InitFiles"]], "time (ax.utils.testing.backend_simulator.backendsimulator property)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.time"]], "time_remaining (ax.utils.testing.backend_simulator.simstatus attribute)": [[15, "ax.utils.testing.backend_simulator.SimStatus.time_remaining"], [15, "id5"]], "time_scaling (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.time_scaling"]], "timestamps_in_range() (in module ax.utils.common.timeutils)": [[15, "ax.utils.common.timeutils.timestamps_in_range"]], "to_ds() (in module ax.utils.common.timeutils)": [[15, "ax.utils.common.timeutils.to_ds"]], "to_ts() (in module ax.utils.common.timeutils)": [[15, "ax.utils.common.timeutils.to_ts"]], "torch_type_from_str() (in module ax.utils.common.typeutils_torch)": [[15, "ax.utils.common.typeutils_torch.torch_type_from_str"]], "torch_type_to_str() (in module ax.utils.common.typeutils_torch)": [[15, "ax.utils.common.typeutils_torch.torch_type_to_str"]], "total_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivity method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivity.total_order_indices"]], "total_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpmean method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPMean.total_order_indices"]], "total_order_indices() (ax.utils.sensitivity.sobol_measures.sobolsensitivitygpsampling method)": [[15, "ax.utils.sensitivity.sobol_measures.SobolSensitivityGPSampling.total_order_indices"]], "total_variance() (in module ax.utils.stats.statstools)": [[15, "ax.utils.stats.statstools.total_variance"]], "train() (in module ax.utils.tutorials.cnn_utils)": [[15, "ax.utils.tutorials.cnn_utils.train"]], "training (ax.utils.tutorials.cnn_utils.cnn attribute)": [[15, "ax.utils.tutorials.cnn_utils.CNN.training"]], "transform_1 (class in ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.transform_1"]], "transform_2 (class in ax.utils.testing.modeling_stubs)": [[15, "ax.utils.testing.modeling_stubs.transform_2"]], "transform_observation_features() (ax.utils.testing.modeling_stubs.transform_1 method)": [[15, "ax.utils.testing.modeling_stubs.transform_1.transform_observation_features"]], "transform_observation_features() (ax.utils.testing.modeling_stubs.transform_2 method)": [[15, "ax.utils.testing.modeling_stubs.transform_2.transform_observation_features"]], "transform_optimization_config() (ax.utils.testing.modeling_stubs.transform_1 method)": [[15, "ax.utils.testing.modeling_stubs.transform_1.transform_optimization_config"]], "transform_optimization_config() (ax.utils.testing.modeling_stubs.transform_2 method)": [[15, "ax.utils.testing.modeling_stubs.transform_2.transform_optimization_config"]], "transform_search_space() (ax.utils.testing.modeling_stubs.transform_1 method)": [[15, "ax.utils.testing.modeling_stubs.transform_1.transform_search_space"]], "transform_search_space() (ax.utils.testing.modeling_stubs.transform_2 method)": [[15, "ax.utils.testing.modeling_stubs.transform_2.transform_search_space"]], "tree (ax.utils.flake8_plugins.docstring_checker.docstringchecker attribute)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.tree"]], "trial_index (ax.utils.testing.backend_simulator.simtrial attribute)": [[15, "ax.utils.testing.backend_simulator.SimTrial.trial_index"], [15, "id10"]], "type (ax.utils.flake8_plugins.docstring_checker.error attribute)": [[15, "ax.utils.flake8_plugins.docstring_checker.Error.type"]], "unordered_list_html() (in module ax.utils.report.render)": [[15, "ax.utils.report.render.unordered_list_html"]], "unrelativize() (in module ax.utils.stats.statstools)": [[15, "ax.utils.stats.statstools.unrelativize"]], "untransform_observation_features() (ax.utils.testing.modeling_stubs.transform_1 method)": [[15, "ax.utils.testing.modeling_stubs.transform_1.untransform_observation_features"]], "untransform_observation_features() (ax.utils.testing.modeling_stubs.transform_2 method)": [[15, "ax.utils.testing.modeling_stubs.transform_2.untransform_observation_features"]], "unwrap() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.unwrap"]], "unwrap() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.unwrap"]], "unwrap() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.unwrap"]], "unwrap_err() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.unwrap_err"]], "unwrap_err() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.unwrap_err"]], "unwrap_err() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.unwrap_err"]], "unwrap_or() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.unwrap_or"]], "unwrap_or() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.unwrap_or"]], "unwrap_or() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.unwrap_or"]], "unwrap_or_else() (ax.utils.common.result.err method)": [[15, "ax.utils.common.result.Err.unwrap_or_else"]], "unwrap_or_else() (ax.utils.common.result.ok method)": [[15, "ax.utils.common.result.Ok.unwrap_or_else"]], "unwrap_or_else() (ax.utils.common.result.result method)": [[15, "ax.utils.common.result.Result.unwrap_or_else"]], "update() (ax.utils.testing.backend_simulator.backendsimulator method)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.update"]], "use_internal_clock (ax.utils.testing.backend_simulator.backendsimulator property)": [[15, "ax.utils.testing.backend_simulator.BackendSimulator.use_internal_clock"]], "use_update_as_start_time (ax.utils.testing.backend_simulator.backendsimulatoroptions attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorOptions.use_update_as_start_time"]], "validate_kwarg_typing() (in module ax.utils.common.kwargs)": [[15, "ax.utils.common.kwargs.validate_kwarg_typing"]], "value (ax.utils.common.result.err property)": [[15, "ax.utils.common.result.Err.value"]], "value (ax.utils.common.result.ok property)": [[15, "ax.utils.common.result.Ok.value"]], "value (ax.utils.common.result.result property)": [[15, "ax.utils.common.result.Result.value"]], "verbose_logging (ax.utils.testing.backend_simulator.backendsimulatorstate attribute)": [[15, "ax.utils.testing.backend_simulator.BackendSimulatorState.verbose_logging"]], "version (ax.utils.flake8_plugins.docstring_checker.docstringchecker attribute)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringChecker.version"]], "version_safe_check_type() (in module ax.utils.common.typeutils)": [[15, "ax.utils.common.typeutils.version_safe_check_type"]], "visit_asyncfunctiondef() (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor method)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.visit_AsyncFunctionDef"]], "visit_classdef() (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor method)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.visit_ClassDef"]], "visit_functiondef() (ax.utils.flake8_plugins.docstring_checker.docstringcheckervisitor method)": [[15, "ax.utils.flake8_plugins.docstring_checker.DocstringCheckerVisitor.visit_FunctionDef"]], "warn_on_kwargs() (in module ax.utils.common.kwargs)": [[15, "ax.utils.common.kwargs.warn_on_kwargs"]]}})